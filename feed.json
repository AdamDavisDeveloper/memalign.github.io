{
   "version" : "https://jsonfeed.org/version/1",
   "title" : "memalign.github.io",
   "home_page_url" : "https://memalign.github.io/index.html",
   "feed_url" : "https://memalign.github.io/feed.json",
   "author" : {
      "url" : "https://twitter.com/memalign",
      "name" : "memalign"
   },
   "icon" : "https://memalign.github.io/apple-touch-icon.png",
   "favicon" : "https://memalign.github.io/favicon.ico",
   "items" : [
    {
         "title" : "Universal Paperclips",
         "date_published" : "2020-9-13T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/universal-paperclips.html",
         "url" : "https://memalign.github.io/p/universal-paperclips.html",
         "image" : "https://memalign.github.io/m/universal-paperclips.png",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/universal-paperclips.html'>Universal Paperclips</a>\n</h2>\n</div>\n<img src=\"/m/universal-paperclips.png\"></img>\n<div id='postdate'>Posted on 9/13/2020</div>\n<a href=\"https://www.decisionproblem.com/paperclips/index2.html\">Universal Paperclips</a> (<a href=\"https://en.wikipedia.org/wiki/Universal_Paperclips\">wikipedia article</a>) is an <a href=\"https://en.wikipedia.org/wiki/Incremental_game\">incremental game</a> about an AI created to produce paperclips.<br />\n<br />\nWhen I first played it several years ago, I got sucked in for an entire day. Then I felt compelled to play it again the next day.<br />\n<br />\n<br />\nUniversal Paperclips drew me in for many reasons:<br />\n<br />\n- Its premise and user interface is simple. It's almost entirely text-based.<br />\n<br />\n- The game starts small and builds up levels of complexity, with the next goal being barely within reach<br />\n<br />\n- Optimizing ever-growing numbers of paperclips, dollars, and other resources is satisfying to my engineer-brain<br />\n<br />\n- AI as an existential threat to humanity is an interesting topic to explore<br />\n<br />\n<br />\nThe game popped up in one of my news feeds last week and I started to consider whether I could automate playing the whole game from beginning to end.<br />\n<br />\nBecause it's a web-based game, it's easy to inspect the UI and inject code. Just open your web browser's JavaScript console to paste in code.<br />\n<br />\nHere's how to scrape the number of paperclips:<br />\n<div id='code'>parseInt(document.getElementById(&quot;clips&quot;).textContent.replace(/,/g, &#039;&#039;))</div>\nThough it's possible to inspect the global variables that power the game, I mostly stuck to scraping the user interface even though it's messier. Example messiness: I needed to strip commas from the number of paperclips so \"1,000,000\" would turn into 1000000.<br />\n<br />\nThe project of automating playing the game mirrored playing the game itself. I incrementally refined my strategy and added complexity.<br />\n<br />\nTo automate playing the game:<br />\n<br />\n- I created an event loop which runs every 10ms<br />\n<br />\n- I aimed to maintain a minimal amount of my own state. Every cycle, my script inspects the UI to determine relevant actions to take. I only need to keep state to count the number of elapsed cycles and to monitor whether a few game attributes stopped changing. By keeping minimal state, I was able to easily update my code running on the page mid-game and it could always pick up at the right place.<br />\n<br />\n- I initially started by calling button handler methods directly. I found that the game doesn't always check whether the relevant button should have been enabled so I later started injecting clicks to the buttons themselves.<br />\n<br />\n<br />\nOpportunities for improvement:<br />\n<br />\n- The game sometimes glitches due to how quickly my event loop performs actions. It's possible to over-spend some resources which means my script is accidentally cheating. The script could be updated to perform actions more slowly (and one per cycle) or add its own resource checking to avoid over-spending.<br />\n<br />\n- My script is not playing with an optimal strategy to complete the game quickly. Though I based some of the strategy off of a speed run I found on <a href=\"https://www.youtube.com/watch?v=hDXoonknjS0\">YouTube</a>, there's a lot of opportunity to follow that strategy more closely.<br />\n<br />\n- I sprinkled some limits to prevent actions when they're not relevant (e.g. stop upgrading the investment engine after level 15). It would be helpful to document why these limits are needed. Some could be replaced with smarter logic.<br />\n<br />\n- Updating the script is time-consuming because a test cycle takes hours! Finding a way to reduce the test cycle to take less time than playing through the game in real-time could lead to a lot of other refinement.<br />\n<br />\n<br />\nHere's a script which successfully automatically plays Universal Paperclips from beginning to end:<br />\n<br />\n<div id='code'>// Open this page:<br />\n// https://www.decisionproblem.com/paperclips/index2.html<br />\n//<br />\n// Open JavaScript console and paste this code in<br />\n<br />\nvar dpCycles = 0<br />\n<br />\nfunction incrementCycles() {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;dpCycles++<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (dpCycles % 10000 == 0) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;dpCycles: &quot; + dpCycles)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}<br />\n<br />\nvar lastUnsoldClips = 0<br />\nvar cyclesWithoutSellingClips = 0<br />\nvar cyclesSinceLastDeposit = 0<br />\nvar lastUnusedClipsCount = 0<br />\nvar cyclesWithoutUnusedClipsCountChange = 0<br />\nfunction performEventCycle() {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;incrementCycles()<br />\n&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Examine game state<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let clips = parseInt(document.getElementById(&quot;clips&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let unsoldClips = parseInt(document.getElementById(&quot;unsoldClips&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let funds = parseFloat(document.getElementById(&quot;funds&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let pricePerClip = parseFloat(document.getElementById(&quot;margin&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let wire = parseInt(document.getElementById(&quot;wire&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let wireCost = parseInt(document.getElementById(&quot;wireCost&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canBuyWire = !document.getElementById(&quot;btnBuyWire&quot;).disabled<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let marketingLevel = parseInt(document.getElementById(&quot;marketingLvl&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canIncreaseMarketingLevel = !document.getElementById(&quot;btnExpandMarketing&quot;).disabled<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let autoClippers = parseInt(document.getElementById(&quot;clipmakerLevel2&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canMakeAutoClipper = !document.getElementById(&quot;btnMakeClipper&quot;).disabled <br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let megaAutoClippers = parseInt(document.getElementById(&quot;megaClipperLevel&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canMakeMegaAutoClipper = !document.getElementById(&quot;btnMakeMegaClipper&quot;).disabled<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let processors = parseInt(document.getElementById(&quot;processors&quot;).textContent)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let memory = parseInt(document.getElementById(&quot;memory&quot;).textContent)<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let processorButton = document.getElementById(&quot;btnAddProc&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canAddProcessor = processorButton &amp;&amp; !processorButton.disabled<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let memoryButton = document.getElementById(&quot;btnAddMem&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canAddMemory = memoryButton &amp;&amp; !memoryButton.disabled<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let operations = parseInt(document.getElementById(&quot;operations&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let hasQuantumComputing = document.getElementById(&quot;qComputing&quot;).style.display != &quot;none&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let needsQuantumChip = document.getElementById(&quot;qCompDisplay&quot;).textContent == &quot;Need Photonic Chips&quot;<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let investmentLevel = parseInt(document.getElementById(&quot;investmentLevel&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canInvest = document.getElementById(&quot;investmentEngine&quot;).style.display != &quot;none&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let investmentTotal = parseInt(document.getElementById(&quot;portValue&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;var quantumChipValues = []<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (hasQuantumComputing) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; 10; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quantumChipValues.push(document.getElementById(&quot;qChip&quot;+i).style.opacity)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (lastUnsoldClips &lt; unsoldClips) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesWithoutSellingClips++<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesWithoutSellingClips = 0<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;lastUnsoldClips = unsoldClips<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Available research projects<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let projButton_creativity = document.getElementById(&quot;projectButton3&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let projAvail_creativity = projButton_creativity &amp;&amp; !projButton_creativity.disabled<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_creativity = function() { projButton_creativity.click() }<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let businessButtonIDs = [&quot;projectButton7&quot;, &quot;projectButton26&quot;]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let trustProjectButtonIDs = [&quot;projectButton6&quot;, &quot;projectButton13&quot;, &quot;projectButton14&quot;, &quot;projectButton15&quot;, &quot;projectButton17&quot;, &quot;projectButton19&quot;]<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let quantumProjectButtonIDs = [&quot;projectButton50&quot;, &quot;projectButton51&quot;]<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let postQuantumProjectButtonIDs = [&quot;projectButton1&quot;, &quot;projectButton4&quot;, &quot;projectButton5&quot;, &quot;projectButton8&quot;, &quot;projectButton9&quot;, &quot;projectButton10&quot;, &quot;projectButton10b&quot;, &quot;projectButton11&quot;, &quot;projectButton12&quot;, &quot;projectButton16&quot;, &quot;projectButton18&quot;, &quot;projectButton20&quot;, &quot;projectButton21&quot;, &quot;projectButton22&quot;, &quot;projectButton23&quot;, &quot;projectButton24&quot;, &quot;projectButton25&quot;, &quot;projectButton27&quot;, &quot;projectButton28&quot;, &quot;projectButton29&quot;, &quot;projectButton30&quot;, &quot;projectButton31&quot;, &quot;projectButton34&quot;, &quot;projectButton35&quot;, &quot;projectButton41&quot;, &quot;projectButton43&quot;, &quot;projectButton44&quot;, &quot;projectButton45&quot;, &quot;projectButton46&quot;, &quot;projectButton60&quot;, &quot;projectButton61&quot;, &quot;projectButton62&quot;, &quot;projectButton63&quot;, &quot;projectButton64&quot;, &quot;projectButton65&quot;, &quot;projectButton66&quot;, &quot;projectButton70&quot;, &quot;projectButton100&quot;, &quot;projectButton101&quot;, &quot;projectButton102&quot;, &quot;projectButton110&quot;, &quot;projectButton111&quot;, &quot;projectButton112&quot;, &quot;projectButton118&quot;, &quot;projectButton119&quot;, &quot;projectButton120&quot;, &quot;projectButton121&quot;, &quot;projectButton125&quot;, &quot;projectButton126&quot;, &quot;projectButton127&quot;, &quot;projectButton128&quot;, &quot;projectButton129&quot;, &quot;projectButton130&quot;, &quot;projectButton131&quot;, &quot;projectButton132&quot;, &quot;projectButton133&quot;, &quot;projectButton134&quot;, &quot;projectButton218&quot;]<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// comment out projectButton148 (Reject Drift&#039;s offer to Start Over in a New Universe) to try the alternate ending<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let endGameProjectButtonIDs = [ &quot;projectButton140&quot;, &quot;projectButton141&quot;, &quot;projectButton142&quot;, &quot;projectButton143&quot;, &quot;projectButton144&quot;, &quot;projectButton145&quot;, &quot;projectButton146&quot;, &quot;projectButton148&quot;, &quot;projectButton210&quot;, &quot;projectButton211&quot;, &quot;projectButton212&quot;, &quot;projectButton213&quot;, &quot;projectButton214&quot;, &quot;projectButton215&quot;, &quot;projectButton216&quot; ]<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let moneyProjectButtonIDs = [&quot;projectButton37&quot;, &quot;projectButton38&quot;, &quot;projectButton40&quot;, &quot;projectButton40b&quot;]<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Button handler functions<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_makePaperclip = function() { clipClick(1) }<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_increaseMarketing = buyAds<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_buyWire = buyWire<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeAutoClipper = makeClipper<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeMegaAutoClipper = makeMegaClipper<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_raisePrice = raisePrice<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_lowerPrice = lowerPrice<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_addProcessor = addProc<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_addMemory = addMem<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_quantumCompute = qComp<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_deposit = investDeposit<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_withdraw = investWithdraw<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// =========================<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Choose actions to perform<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// =========================<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;handler_makePaperclip()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (wireCost &lt; 19 &amp;&amp; canBuyWire) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_buyWire()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// If we&#039;re not selling any paperclips, reduce cost<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if ((clips &lt; 10000 &amp;&amp; pricePerClip &gt; 0.03) ||<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cyclesWithoutSellingClips &gt; 20 &amp;&amp; pricePerClip &gt; 0.03) ||<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(unsoldClips &gt; 10000000 &amp;&amp; pricePerClip &gt; 0.01)) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_lowerPrice()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesWithoutSellingClips = 0<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// In middle-game, if we&#039;re selling out fast, increase cost<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (clips &gt; 500000 &amp;&amp; unsoldClips &lt; 1000 &amp;&amp; pricePerClip &lt; 8.00) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_raisePrice()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Autoclippers<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (clips &gt; 1000000 &amp;&amp; wire &gt; 0 &amp;&amp; canMakeAutoClipper &amp;&amp; autoClippers &lt; 75) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeAutoClipper()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if ((clips &gt; 1000000 &amp;&amp; wire &gt; 0 &amp;&amp; canMakeMegaAutoClipper &amp;&amp; megaAutoClippers &lt; 70) ||<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(clips &gt; 100000000 &amp;&amp; wire &gt; 0 &amp;&amp; canMakeMegaAutoClipper &amp;&amp; megaAutoClippers &lt; 90) ||<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(clips &gt; 20000000000 &amp;&amp; wire &gt; 0 &amp;&amp; canMakeMegaAutoClipper &amp;&amp; megaAutoClippers &lt; 120)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeMegaAutoClipper()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Marketing<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (canIncreaseMarketingLevel &amp;&amp; marketingLevel &lt; 14) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_increaseMarketing()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Quantum Computing<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (hasQuantumComputing) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var canCompute = true<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (let qVal of quantumChipValues) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (qVal &lt; 0) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canCompute = false<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (canCompute) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_quantumCompute()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Research projects<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (projAvail_creativity) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_creativity()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;for (let trustButtonID of trustProjectButtonIDs) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let trustButton = document.getElementById(trustButtonID)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (trustButton &amp;&amp; !trustButton.disabled &amp;&amp; trustButton.style.visibility == &quot;visible&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trustButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;for (let businessButtonID of businessButtonIDs) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let businessButton = document.getElementById(businessButtonID)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (businessButton &amp;&amp; !businessButton.disabled &amp;&amp; businessButton.style.visibility == &quot;visible&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;businessButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;for (let buttonID of quantumProjectButtonIDs) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let button = document.getElementById(buttonID)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (button &amp;&amp; !button.disabled &amp;&amp; button.style.visibility == &quot;visible&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (operations &gt; 0) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasQuantumComputing &amp;&amp; !needsQuantumChip) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (let buttonID of postQuantumProjectButtonIDs) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let button = document.getElementById(buttonID)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (button &amp;&amp; !button.disabled &amp;&amp; button.style.visibility == &quot;visible&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.click()<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Act on only one at a time; the game appears to let you overspend with fast clicks<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;for (let buttonID of endGameProjectButtonIDs) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let button = document.getElementById(buttonID)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (button &amp;&amp; !button.disabled &amp;&amp; button.style.visibility == &quot;visible&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Strategic Modeling<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let newTournamentButton = document.getElementById(&quot;btnNewTournament&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let runTournamentButton = document.getElementById(&quot;btnRunTournament&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let hasAutoTourney = document.getElementById(&quot;autoTourneyControl&quot;).style.display != &quot;none&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_newTournament = newTourney<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_runTournament = runTourney<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (operations &gt; 50000 &amp;&amp; newTournamentButton &amp;&amp; !newTournamentButton.disabled &amp;&amp; !hasAutoTourney) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_newTournament()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let stratPickerElement = document.getElementById(&quot;stratPicker&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let hasBeatLastStrategy = Array.apply(null, document.getElementById(&quot;stratPicker&quot;).options).map(x =&gt; x.value).includes(&quot;7&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasBeatLastStrategy) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stratPickerElement.value = 7 // BEAT LAST<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stratPickerElement.value = 0 // RANDOM<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (runTournamentButton &amp;&amp; !runTournamentButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_runTournament()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Investments<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Perform these upgrades after handling research projects to avoid starving them<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let upgradeInvestmentEngineButton = document.getElementById(&quot;btnImproveInvestments&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_upgradeInvestmentEngine = function() { upgradeInvestmentEngineButton.click() }<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (investmentLevel &lt; 15 &amp;&amp; upgradeInvestmentEngineButton &amp;&amp; !upgradeInvestmentEngineButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_upgradeInvestmentEngine()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (investmentLevel &gt; 5 &amp;&amp; unsoldClips &gt; 10000000 &amp;&amp; funds &gt; 20000 &amp;&amp; cyclesSinceLastDeposit &gt; 50000) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;investStrat&quot;).value = &quot;hi&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_deposit()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesSinceLastDeposit = 0<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesSinceLastDeposit++<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Money projects (e.g. Hostile Takeover)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Check whether they are visible moneyProjectButtonIDs; check money in stock market; if &gt; 15M; withdraw and perform project<br />\n&nbsp;&nbsp;&nbsp;&nbsp;for (let moneyButtonID of moneyProjectButtonIDs) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let button = document.getElementById(moneyButtonID)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let buttonIsVisible = button &amp;&amp; button.style.visibility == &quot;visible&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let buttonIsDisabled = button &amp;&amp; button.disabled<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (buttonIsVisible) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (buttonIsDisabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (investmentTotal &gt; 15000000) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_withdraw()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Button may have become enabled; check the button directly<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!button.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Drone and Solar Farm phase<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let factoryCount = parseInt(document.getElementById(&quot;factoryLevelDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canMakeFactory = !document.getElementById(&quot;btnMakeFactory&quot;).disabled<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let harvesterDroneCount = parseInt(document.getElementById(&quot;harvesterLevelDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canMakeHarvesterDrone = !document.getElementById(&quot;btnMakeHarvester&quot;).disabled<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canMakeHarvesterDrone1k = !document.getElementById(&quot;btnHarvesterx1000&quot;).disabled<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let wireDroneCount = parseInt(document.getElementById(&quot;wireDroneLevelDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canMakeWireDrone = !document.getElementById(&quot;btnMakeWireDrone&quot;).disabled<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canMakeWireDrone1k = !document.getElementById(&quot;btnWireDronex1000&quot;).disabled<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let solarFarmCount = parseInt(document.getElementById(&quot;farmLevel&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canMakeSolarFarm = !document.getElementById(&quot;btnMakeFarm&quot;).disabled<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let batteryTowerCount = parseInt(document.getElementById(&quot;batteryLevel&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let canMakeBatteryTower = !document.getElementById(&quot;btnMakeBattery&quot;).disabled<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let hasAvailableMatter = parseFloat(document.getElementById(&quot;availableMatterDisplay&quot;).textContent.replace(/,/g, &#039;&#039;)) &gt; 0<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let hasAcquiredMatter = parseFloat(document.getElementById(&quot;acquiredMatterDisplay&quot;).textContent.replace(/,/g, &#039;&#039;)) &gt; 0<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let hasWire = parseFloat(document.getElementById(&quot;nanoWire&quot;).textContent.replace(/,/g, &#039;&#039;)) &gt; 0<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// We can end up stuck with a small amount of clips that we can&#039;t spend (e.g. 528.1 thousand)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let unusedClipsCount = parseFloat(document.getElementById(&quot;unusedClipsDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (unusedClipsCount == lastUnusedClipsCount) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesWithoutUnusedClipsCountChange++<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesWithoutUnusedClipsCountChange = 0<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastUnusedClipsCount = unusedClipsCount<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let hasUnusedClips = unusedClipsCount &gt; 0 &amp;&amp; (cyclesWithoutUnusedClipsCountChange &lt; 1000)<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let projButton_selfCorrectingSupplyChain = document.getElementById(&quot;projectButton102&quot;) <br />\n&nbsp;&nbsp;&nbsp;&nbsp;let selfCorrectingSupplyChainVisible = projButton_selfCorrectingSupplyChain &amp;&amp; projButton_selfCorrectingSupplyChain.style.visibility == &quot;visible&quot;<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeFactory = makeFactory<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeHarvesterDrone = function() { makeHarvester(1) }<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeHarvesterDrone1k = function() { makeHarvester(1000) }<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeWireDrone = function() { makeWireDrone(1) }<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeWireDrone1k = function() { makeWireDrone(1000) }<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeSolarFarm = function() { makeFarm(1) }<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeBatteryTower = function() { makeBattery(1) }<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (factoryCount &gt;= 59 &amp;&amp; solarFarmCount &gt; 3538 &amp;&amp; selfCorrectingSupplyChainVisible) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Pause consuming clips so we can activate selfCorrectingSupplyChain<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else if (hasAvailableMatter || hasAcquiredMatter) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Based on a speed run: https://www.youtube.com/watch?v=hDXoonknjS0<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Values to achieve:<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// [factory, harvester, wire, farm, battery]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let milestones = [<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1, 30, 30, 11, 1],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6, 170, 180, 34, 11],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6, 320, 370, 49, 11],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8, 400, 490, 60, 21],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9, 510, 610, 68, 21],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[10, 1000, 1400, 168, 21],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[15, 2000, 2800, 248, 121],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[20, 2500, 3300, 308, 121],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[50, 5500, 6600, 600, 121],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[57, 35500, 36000, 2208, 121],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[70, 77000, 77000, 5508, 1221],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[80, 87000, 87000, 7508, 1221],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[198, 377000, 404000, 29508, 1221],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[211, 1121000, 1133000, 50308, 1221],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1000, 1133000, 1135000, 50308, 1221],<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let currVals = [factoryCount, harvesterDroneCount, wireDroneCount, solarFarmCount, batteryTowerCount]<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (let milestone of milestones) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var done = false<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (let i = 0; i &lt; currVals.length; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let delta = milestone[i] - currVals[i]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (delta &gt; 0) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == 0 &amp;&amp; canMakeFactory) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeFactory()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (i == 1 &amp;&amp; canMakeHarvesterDrone) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasAvailableMatter) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (canMakeHarvesterDrone1k &amp;&amp; delta &gt;= 1000) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeHarvesterDrone1k()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeHarvesterDrone()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (i == 2 &amp;&amp; canMakeWireDrone) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasAcquiredMatter) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (canMakeWireDrone1k &amp;&amp; delta &gt;= 1000) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeWireDrone1k()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeWireDrone()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (i == 3 &amp;&amp; canMakeSolarFarm) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeSolarFarm()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (i == 4 &amp;&amp; canMakeBatteryTower) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeBatteryTower()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Don&#039;t break so we can increment evenly across the types that need it<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done = true<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (done) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let hasSpaceExploration = document.getElementById(&quot;spaceDiv&quot;).style.display != &quot;none&quot;<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Swarm computing<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let hasSwarmComputing = document.getElementById(&quot;swarmEngine&quot;).style.display != &quot;none&quot;<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (hasSwarmComputing) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let totalDroneCount = harvesterDroneCount + wireDroneCount<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let swarmComputingSlider = document.getElementById(&quot;slider&quot;)<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sliderValue = 0 // range is 0 to 200<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasSpaceExploration) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderValue = processors &gt; 1400 ? 0 : 150<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Heuristic for when we&#039;re still on Earth (prior to space exploration)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!hasAvailableMatter &amp;&amp; !hasAcquiredMatter) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderValue = 200<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (processors &gt; 160) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderValue = 0<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (totalDroneCount &gt; 1000) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderValue = 150<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (totalDroneCount &gt; 700) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderValue = 100<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swarmComputingSlider.value = sliderValue<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let entertainSwarmButton = document.getElementById(&quot;btnEntertainSwarm&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let swarmIsBored = document.getElementById(&quot;swarmStatus&quot;).textContent == &quot;Bored&quot;<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let synchronizeSwarmButton = document.getElementById(&quot;btnSynchSwarm&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let swarmIsDisorganized = document.getElementById(&quot;swarmStatus&quot;).textContent == &quot;Disorganized&quot;<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (entertainSwarmButton &amp;&amp; !entertainSwarmButton.disabled &amp;&amp; swarmIsBored) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entertainSwarmButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (synchronizeSwarmButton &amp;&amp; !synchronizeSwarmButton.disabled &amp;&amp; swarmIsDisorganized) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronizeSwarmButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Reclaim clips from factories and drones<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (hasSwarmComputing &amp;&amp; !hasSpaceExploration &amp;&amp; !hasAvailableMatter &amp;&amp; !hasAcquiredMatter &amp;&amp; wire == 0) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let handler_disassembleFactories = factoryReboot<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let handler_disassembleHarvesterDrones = harvesterReboot<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let handler_disassembleWireDrones = wireDroneReboot<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (factoryCount &gt; 0) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_disassembleFactories()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (harvesterDroneCount &gt; 0) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_disassembleHarvesterDrones()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (wireDroneCount &gt; 0) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_disassembleWireDrones()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Space Exploration and Probes<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (hasSpaceExploration) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probesLaunched = parseInt(document.getElementById(&quot;probesLaunchedDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeSpeed = parseInt(document.getElementById(&quot;probeSpeedDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeExploration = parseInt(document.getElementById(&quot;probeNavDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeReplication = parseInt(document.getElementById(&quot;probeRepDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeHazardRemediation = parseInt(document.getElementById(&quot;probeHazDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeFactoryProduction = parseInt(document.getElementById(&quot;probeFacDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeHarvesterDroneProduction = parseInt(document.getElementById(&quot;probeHarvDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeWireDroneProduction = parseInt(document.getElementById(&quot;probeWireDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let increaseProbeTrustButton = document.getElementById(&quot;btnIncreaseProbeTrust&quot;) <br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!increaseProbeTrustButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increaseProbeTrustButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let increaseProbeMaxTrustButton = document.getElementById(&quot;btnIncreaseMaxTrust&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!increaseProbeMaxTrustButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increaseProbeMaxTrustButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Don&#039;t launch any probes until we have enough hazard remediation and replication for them to survive<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let launchProbeButton = document.getElementById(&quot;btnMakeProbe&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!launchProbeButton.disabled &amp;&amp; probesLaunched &lt; 11000 &amp;&amp; probeHazardRemediation &gt;= 5 &amp;&amp; probeReplication &gt;= 7) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;launchProbeButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let needsToExplore = !hasAcquiredMatter &amp;&amp; !hasUnusedClips &amp;&amp; !hasWire<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let lowerSpeedButton = document.getElementById(&quot;btnLowerProbeSpeed&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let raiseSpeedButton = document.getElementById(&quot;btnRaiseProbeSpeed&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let lowerExplorationButton = document.getElementById(&quot;btnLowerProbeNav&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let raiseExplorationButton = document.getElementById(&quot;btnRaiseProbeNav&quot;)<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let lowerReplicationButton = document.getElementById(&quot;btnLowerProbeRep&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let raiseReplicationButton = document.getElementById(&quot;btnRaiseProbeRep&quot;)<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// When we need to gather more matter, take from replication to explore with speed<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (needsToExplore) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let needsSpeed = probeSpeed &lt; 1<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let needsExploration = probeExploration &lt; 1<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (needsSpeed) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (raiseSpeedButton.disabled &amp;&amp; !lowerReplicationButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerReplicationButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!raiseSpeedButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raiseSpeedButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (needsExploration) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (raiseExplorationButton.disabled &amp;&amp; !lowerReplicationButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerReplicationButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!raiseExplorationButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raiseExplorationButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// reduce exploration and speed so it goes back to replication<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!lowerExplorationButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerExplorationButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!lowerSpeedButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerSpeedButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If we&#039;re not exploring, divide our time between different responsibilities:<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// each dpCycle is 1ms, 1000 in a second, 10000 in 10 seconds;  if dpCycles/10 % 10000:<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!needsToExplore) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let timeSlice = Math.floor(dpCycles/10) % 10000<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let buttonToProduce = null<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (timeSlice &lt; 10 &amp;&amp; probeFactoryProduction &lt; 1) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Produce factories<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonToProduce = document.getElementById(&quot;btnRaiseProbeFac&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (timeSlice &gt;= 10 &amp;&amp; timeSlice &lt; 2010 &amp;&amp; probeWireDroneProduction &lt; 1) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Produce wire drones<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonToProduce = document.getElementById(&quot;btnRaiseProbeWire&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (timeSlice &gt;= 2010 &amp;&amp; timeSlice &lt; 4010 &amp;&amp; probeHarvesterDroneProduction &lt; 1) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Produce harvester drones<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonToProduce = document.getElementById(&quot;btnRaiseProbeHarv&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (buttonToProduce) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (buttonToProduce.disabled &amp;&amp; !lowerReplicationButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerReplicationButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!buttonToProduce.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonToProduce.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Lower relevant buttons to reclaim the probe trust for replication<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let lowerButtonIDs = [&quot;btnLowerProbeFac&quot;, &quot;btnLowerProbeWire&quot;, &quot;btnLowerProbeHarv&quot;]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (let lowerButtonID of lowerButtonIDs) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let lowerButton = document.getElementById(lowerButtonID)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!lowerButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let hasProbeCombat = document.getElementById(&quot;combatButtonDiv&quot;).style.display != &quot;none&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasProbeCombat) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeCombat = parseInt(document.getElementById(&quot;probeCombatDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeCountText = document.getElementById(&quot;probesTotalDisplay&quot;).textContent // &quot;2.2 billion &quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let drifterCountText = document.getElementById(&quot;drifterCount&quot;).textContent<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let numProbes = parseFloat(probeCountText)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let numDrifters = parseFloat(drifterCountText)<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeOrderOfMagnitudeStr = probeCountText.replace(/[\d\s\.]+/, &#039;&#039;).trim()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let drifterOrderOfMagnitudeStr = drifterCountText.replace(/[\d\s\.]+/, &#039;&#039;).trim()<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let needsToBattle = (probeOrderOfMagnitudeStr == drifterOrderOfMagnitudeStr) || numDrifters &gt; 10<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let combatRaiseButton = document.getElementById(&quot;btnRaiseProbeCombat&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let combatLowerButton = document.getElementById(&quot;btnLowerProbeCombat&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (needsToBattle) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (probeCombat &lt; 6) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (combatRaiseButton.disabled &amp;&amp; !lowerReplicationButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerReplicationButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!combatRaiseButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;combatRaiseButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Reduce combat to reclaim probe trust for replication<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!combatLowerButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;combatLowerButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let raiseHazardRemediationButton = document.getElementById(&quot;btnRaiseProbeHaz&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (probeHazardRemediation &lt; 5 &amp;&amp; !raiseHazardRemediationButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raiseHazardRemediationButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (!raiseReplicationButton.disabled) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Spend any remaining probe trust on replication<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raiseReplicationButton.click()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Computational resources<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Some research projects consume trust. Update computational resources after research projects to avoid starving research.<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (canAddProcessor &amp;&amp; processors &lt; 6) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addProcessor()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddMemory &amp;&amp; memory &lt; 46) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addMemory()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddProcessor &amp;&amp; processors &lt; 25) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addProcessor()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddMemory &amp;&amp; memory &lt; 95) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addMemory()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddProcessor &amp;&amp; processors &lt; 113) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addProcessor()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddMemory &amp;&amp; memory &lt; 146) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addMemory()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddProcessor &amp;&amp; processors &lt; 1102) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addProcessor()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddMemory &amp;&amp; memory &lt; 503) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addMemory()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddProcessor) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addProcessor()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n}<br />\n<br />\nfunction runEventLoop() {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;performEventCycle()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!pauseAI) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runEventLoop()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}, 1)<br />\n}<br />\n<br />\nvar pauseAI = 0<br />\nrunEventLoop()</div>"
    },
    {
         "title" : "Fall Down the Rabbit Hole",
         "date_published" : "2020-5-15T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/rabbit-hole.html",
         "url" : "https://memalign.github.io/p/rabbit-hole.html",
         "image" : "https://memalign.github.io/m/whiterabbit.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/rabbit-hole.html'>Fall Down the Rabbit Hole</a>\n</h2>\n</div>\n<img src=\"/m/whiterabbit.jpg\"></img>\n<div id='postdate'>Posted on 5/15/2020</div>\nI enjoy following my interests and making connections that take me on tangents. This is a hobby that's supercharged by the internet.<br />\n<br />\n<br />\nA recent example:<br />\n<br />\nI was in the mood to read a good book so I asked my coworkers for recommendations. While reading the most enticing one, I had the idea to write about <a href=\"/p/books.html\">notable books I've read</a>. While I wrote that, I did a little research into those books on Wikipedia and I discovered that, after Douglas Adams died, a concluding Hitchhiker's Guide book was published that I hadn't heard about. I read <a href=\"https://en.wikipedia.org/wiki/And_Another_Thing..._(novel)\">that book</a> next. I refreshed my memory on his other work and saw that there was a 2016 TV series for <a href=\"https://www.imdb.com/title/tt4047038/\">Dirk Gently's Holistic Detective Agency</a>. I watched the first episode and liked it so I binged its two seasons over the following days. I haven't read the original Dirk Gently books (and my impression is that the TV series is only loosely based on them) so I'm going to read those next. Who knows where those will take me!<br />\n<br />\n<br />\nA similar activity that can also be fun is to realize, deep into a conversation with people, that a chain of tangentially connected ideas led you to the current topic. Then you can work backwards together to figure out how you got there.<br />\n<br />\nFor example:<br />\n<br />\n- What the heck led us to talking about Trader Joe's Everything but the Bagel Sesame Seasoning?<br />\n<br />\n- We were talking about having avocado toast and that seasoning goes great on it<br />\n<br />\n- Before that, we were talking about how your neighbor has an avocado tree<br />\n<br />\n- Before that, we were talking about fruit trees<br />\n<br />\n- Before that, we were talking about how Silicon Valley was largely covered in orchards before the tech boom. It was called the <a href=\"https://en.wikipedia.org/wiki/Santa_Clara_Valley\">Valley of Heart's Delight</a>.<br />\n<br />\n- Before that, I mentioned how the first thing I noticed when I landed in the Bay Area for my first job interview is that it wasn't a frozen wasteland like upstate New York where I had just departed. The second thing I noticed is how many iconic tech companies I saw while driving down 101 from SFO to the South Bay.<br />\n<br />\n- Before that, we were fake complaining about the lack of seasons in the Bay Area... because none of us actually miss winter<br />\n<br />\n- Before that, we were talking about how time is blurring together while we're all sheltering in place<br />\n<br />\n- And now we're back to the beginning of our FaceTime call when I asked how you're doing in these crazy times<br />\n"
    },
    {
         "title" : "Live COVID-19 Dashboard",
         "date_published" : "2020-5-9T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/live-covid19.html",
         "url" : "https://memalign.github.io/p/live-covid19.html",
         "image" : "https://memalign.github.io/m/graph-js.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/live-covid19.html'>Live COVID-19 Dashboard</a>\n</h2>\n</div>\n<img src=\"/m/graph-js.jpg\"></img>\n<div id='postdate'>Posted on 5/9/2020</div>\nAs a followup to <a href=\"/p/graph-js.html\">graphing in Scriptable</a>, I took some time to convert the script into a live web dashboard.<br />\n<br />\nYou can find the live dashboard <a href=\"/m/graph-js/covid19.html?maxStates=24\">here</a>.<br />\n<br />\n<br />\nThe main ways the code needed to change:<br />\n<br />\n- Instead of loading data synchronously, it is now loaded asynchronously via XMLHttpRequest<br />\n<br />\n- The document body is constructed dynamically once data loads (instead of being generated and then loaded into a web view in its complete form)<br />\n<br />\n- canvasJS requires divs to be set up before charts are created. I needed to move div setup to happen inline instead of at the end of the script.<br />\n<br />\n- Instead of generating JavaScript in string form to setup the charts, I set them up directly<br />\n<br />\n&nbsp;&nbsp;Code like this:<br />\n<div id='code'>var result = &quot;&quot;<br />\n...<br />\nresult += &quot;{ x: new Date(&quot;+year+&quot;,&quot;+(month-1)+&quot;,&quot;+day+&quot;), y: &quot; + value + &quot; },\n&quot;<br />\n...<br />\nreturn result</div>\n&nbsp;&nbsp;Became this:<br />\n<div id='code'>var result = []<br />\n...<br />\nresult.push({ x: new Date(year, month-1, day), y: value })<br />\n...<br />\nreturn result</div>\n- I limit the number of total charts because the full page was consuming too much memory which caused canvasJS to render completely blank charts, charts where some lines were missing, etc.<br />\n<br />\n- I also fixed a bug so lines can be hidden by clicking them in the legend<br />\n"
    },
    {
         "title" : "Create COVID-19 Graphs Using JavaScript",
         "date_published" : "2020-5-8T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/graph-js.html",
         "url" : "https://memalign.github.io/p/graph-js.html",
         "image" : "https://memalign.github.io/m/graph-js.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/graph-js.html'>Create COVID-19 Graphs Using JavaScript</a>\n</h2>\n</div>\n<img src=\"/m/graph-js.jpg\"></img>\n<div id='postdate'>Posted on 5/8/2020</div>\nCOVID-19 has loomed over us for many months. For weeks, I watched the spread using graphs on <a href=\"https://www.politico.com/interactives/2020/coronavirus-testing-by-state-chart-of-new-cases/\">politico.com</a>.<br />\n<br />\n<img src=\"/m/politico-covid19.jpg\"></img><br />\n<br />\nA few days went by without updates so I investigated recreating the graphs myself. Here’s my process:<br />\n<br />\n1. I noticed that the website links to its data source. Fortunately, it comes from an open website with a convenient API: <a href=\"https://covidtracking.com/api\">https://covidtracking.com/api</a><br />\n<br />\n2. I knew I could use the <a href=\"https://apps.apple.com/us/app/scriptable/id1405459188\">Scriptable app</a> on iOS to write some JavaScript to process and transform the data<br />\n<br />\n3. Scriptable can draw some native UI but it’s often too limited. Instead, I chose to generate some HTML it can display in a web view.<br />\n<br />\n4. I did some quick searches for simple ways to graph data on web pages. When I <a href=\"https://www.google.com/search?q=graph+data+html\">searched</a>, one of the top hits was <a href=\"https://canvasjs.com\">canvasJS</a>.<br />\n<br />\n5. I found a <a href=\"https://canvasjs.com/javascript-charts/null-data-chart/\">sample</a> graph that looked similar to what I needed<br />\n<br />\n6. To quickly check that this would work, I created a script in Scriptable to generate the HTML and show a web view, pasting in their example:<br />\n<br />\n<div id='code'>let html = `<br />\n&lt;!DOCTYPE html&gt;<br />\n&lt;html&gt;<br />\n&lt;head&gt;<br />\n&lt;script&gt;<br />\nwindow.onload = function() {<br />\n<br />\nvar chart = new CanvasJS.Chart(&quot;chartContainer&quot;, {<br />\n	animationEnabled: true,<br />\n	title: {<br />\n		text: &quot;Hourly Average CPU Utilization&quot;<br />\n	},<br />\n	axisX: {<br />\n		title: &quot;Time&quot;<br />\n	},<br />\n	axisY: {<br />\n		title: &quot;Percentage&quot;,<br />\n		suffix: &quot;%&quot;<br />\n	},<br />\n	data: [{<br />\n		type: &quot;line&quot;,<br />\n		name: &quot;CPU Utilization&quot;,<br />\n		connectNullData: true,<br />\n		//nullDataLineDashType: &quot;solid&quot;,<br />\n		xValueType: &quot;dateTime&quot;,<br />\n		xValueFormatString: &quot;DD MMM hh:mm TT&quot;,<br />\n		yValueFormatString: &quot;#,##0.##\&quot;%\&quot;&quot;,<br />\n		dataPoints: [<br />\n			{ x: 1501102673000, y: 22.836 },<br />\n			{ x: 1501106273000, y: 23.220 },<br />\n			{ x: 1501109873000, y: 23.594 },<br />\n			{ x: 1501113473000, y: 24.596 },<br />\n			{ x: 1501117073000, y: 31.947 },<br />\n			{ x: 1501120673000, y: 31.142 }<br />\n		]<br />\n	}]<br />\n});<br />\nchart.render();<br />\n<br />\n}<br />\n&lt;/script&gt;<br />\n&lt;/head&gt;<br />\n&lt;body&gt;<br />\n&lt;div id=&quot;chartContainer&quot; style=&quot;height: 300px; width: 100%;&quot;&gt;&lt;/div&gt;<br />\n&lt;script src=&quot;https://canvasjs.com/assets/script/canvasjs.min.js&quot;&gt;&lt;/script&gt;<br />\n&lt;/body&gt;<br />\n&lt;/html&gt;<br />\n`<br />\n<br />\nlet webView = new WebView()<br />\n<br />\nwebView.loadHTML(html)<br />\nwebView.present(true)</div>\n7. That worked! I then figured out how to request data from covidtracking.com — conveniently hosted in JSON format. I used console.log to sanity check the result.<br />\n<br />\n<div id='code'>let dailyDataRequest = new Request(&quot;https://covidtracking.com/api/v1/us/daily.json&quot;)<br />\nlet dailyData = await dailyDataRequest.loadJSON()<br />\n<br />\nconsole.log(&quot;Row 0: &quot; + dailyData[0].positive)</div>\n8. From there, I parsed the data, transformed it, and added more charts. I included some charts that the original website didn’t have that I found interesting.<br />\n<br />\n<div id='code'>// Show graphs that match: https://www.politico.com/interactives/2020/coronavirus-testing-by-state-chart-of-new-cases/<br />\n// Data from: https://covidtracking.com/api<br />\n<br />\n// Examples the charts are based on:<br />\n// https://canvasjs.com/javascript-charts/null-data-chart/<br />\n// https://canvasjs.com/javascript-charts/multi-series-chart/<br />\n// https://canvasjs.com/javascript-charts/stacked-column-chart/<br />\n// https://canvasjs.com/javascript-charts/stacked-bar-chart/<br />\n// https://canvasjs.com/javascript-charts/stacked-bar-100-chart/<br />\n<br />\nlet firstInterestingDate = 20200301<br />\n<br />\nfunction dataPointsFromDailyDataJSON(json, key) {<br />\n&nbsp;&nbsp;// { x: new Date(2017,6,24), y: 31 },<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;var result = &quot;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;for (let row of json) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let value = row[key]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let date = row[&quot;date&quot;]<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Data is uninteresting before March 1st: 20200301<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (date &lt; firstInterestingDate) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let match = (date+&quot;&quot;).match(/(\d{4})(\d{2})(\d{2})/)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let year = parseInt(match[1])<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let month = parseInt(match[2])<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let day = parseInt(match[3])<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;result += &quot;{ x: new Date(&quot;+year+&quot;,&quot;+(month-1)+&quot;,&quot;+day+&quot;), y: &quot; + value + &quot; },\n&quot;<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return result<br />\n}<br />\n<br />\nfunction deltaDataPointsFromDailyDataJSON(json, key) {<br />\n&nbsp;&nbsp;// { x: new Date(2017,6,24), y: 31 },<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;var result = &quot;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// json is sorted newest to oldest so we need to iterate backwards<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;var index = json.length-1<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;var prevValue = json[index][key]<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;while (index &gt;= 0) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let row = json[index]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;index--<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let value = row[key]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let date = row[&quot;date&quot;]<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let delta = value - prevValue<br />\n&nbsp;&nbsp;&nbsp;&nbsp;prevValue = value<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Data is uninteresting before March 1st: 20200301<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (date &lt; firstInterestingDate) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let match = (date+&quot;&quot;).match(/(\d{4})(\d{2})(\d{2})/)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let year = parseInt(match[1])<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let month = parseInt(match[2])<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let day = parseInt(match[3])<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;result += &quot;{ x: new Date(&quot;+year+&quot;,&quot;+(month-1)+&quot;,&quot;+day+&quot;), y: &quot; + delta + &quot; },\n&quot;<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return result<br />\n}<br />\n<br />\nvar chartCount = 0<br />\n<br />\nfunction chartTestsPositivesDeathsForState(json, state) {<br />\n&nbsp;&nbsp;// Filter the data to the correct state; null means US<br />\n&nbsp;&nbsp;let filteredJson = (state == null) ? json : json.filter(row =&gt; row[&quot;state&quot;] == state)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let currentTotalTests = filteredJson[0][&quot;totalTestResults&quot;]<br />\n&nbsp;&nbsp;let totalTestsDataPoints = dataPointsFromDailyDataJSON(filteredJson, &quot;totalTestResults&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let currentPositive = filteredJson[0][&quot;positive&quot;]<br />\n&nbsp;&nbsp;let positiveDataPoints = dataPointsFromDailyDataJSON(filteredJson, &quot;positive&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let currentDeath = filteredJson[0][&quot;death&quot;]<br />\n&nbsp;&nbsp;let deathsDataPoints = dataPointsFromDailyDataJSON(filteredJson, &quot;death&quot;)<br />\n<br />\n&nbsp;&nbsp;let chartName = &quot;chart&quot; + (state == null ? &quot;US&quot; : state) + chartCount++<br />\n<br />\n&nbsp;&nbsp;let chartJS = `<br />\nvar ${chartName} = new CanvasJS.Chart(&quot;${chartName}&quot;, {<br />\n	animationEnabled: false,<br />\n	title:{<br />\n		text: &quot;Covid-19 in ${state == null ? &quot;the United States&quot; : state}&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize: 25,<br />\n	},<br />\n	axisX: {<br />\n		valueFormatString: &quot;MMM DD&quot;<br />\n	},<br />\n	axisY: {<br />\n		title: &quot;Count&quot;,<br />\n		includeZero: true,<br />\n	},<br />\n	legend:{<br />\n		cursor: &quot;pointer&quot;,<br />\n		fontSize: 16,<br />\n		itemclick: toggleDataSeries<br />\n	},<br />\n	toolTip:{<br />\n		shared: true<br />\n	},<br />\n	data: [{<br />\n		name: &quot;Total Tests (${currentTotalTests.toLocaleString()})&quot;,<br />\n		type: &quot;line&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;gray&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;gray&quot;,<br />\n		showInLegend: true,<br />\n		dataPoints: [<br />\n${totalTestsDataPoints}<br />\n		]<br />\n	},<br />\n	{<br />\n		name: &quot;Positive (${currentPositive.toLocaleString()})&quot;,<br />\n		type: &quot;line&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;orange&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;orange&quot;,<br />\n		showInLegend: true,<br />\n		dataPoints: [<br />\n${positiveDataPoints}<br />\n		]<br />\n	},<br />\n	{<br />\n		name: &quot;Deaths (${currentDeath.toLocaleString()})&quot;,<br />\n		type: &quot;line&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;red&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;red&quot;,<br />\n		showInLegend: true,<br />\n		dataPoints: [<br />\n${deathsDataPoints}<br />\n		]<br />\n	}]<br />\n});<br />\n${chartName}.render();<br />\n`<br />\n<br />\n&nbsp;&nbsp;return { chartJS: chartJS, chartName: chartName };<br />\n}<br />\n<br />\n<br />\nfunction chartDeltas(json, state) {<br />\n&nbsp;&nbsp;// Filter the data to the correct state; null means US<br />\n&nbsp;&nbsp;let filteredJson = (state == null) ? json : json.filter(row =&gt; row[&quot;state&quot;] == state)<br />\n<br />\n&nbsp;&nbsp;let currentTestsDeltaToday = filteredJson[0][&quot;totalTestResults&quot;] - filteredJson[1][&quot;totalTestResults&quot;]<br />\n&nbsp;&nbsp;let currentTestsDeltas = deltaDataPointsFromDailyDataJSON(filteredJson, &quot;totalTestResults&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let positiveDeltaToday = filteredJson[0][&quot;positive&quot;] - filteredJson[1][&quot;positive&quot;]<br />\n&nbsp;&nbsp;let positiveDeltas = deltaDataPointsFromDailyDataJSON(filteredJson, &quot;positive&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let deathsDeltaToday = filteredJson[0][&quot;death&quot;] - filteredJson[1][&quot;death&quot;]<br />\n&nbsp;&nbsp;let deathsDeltas = deltaDataPointsFromDailyDataJSON(filteredJson, &quot;death&quot;)<br />\n<br />\n&nbsp;&nbsp;let chartName = &quot;chartDeltas&quot; + (state == null ? &quot;US&quot; : state) + chartCount++<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let chartJS = `<br />\nvar ${chartName} = new CanvasJS.Chart(&quot;${chartName}&quot;, {<br />\n	animationEnabled: false,<br />\n	title:{<br />\n		text: &quot;Day-over-Day Change${state == null ? &quot;&quot; : &quot; in &quot; + state}&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize: 25,<br />\n	},<br />\n	axisX: {<br />\n		valueFormatString: &quot;MMM DD&quot;<br />\n	},<br />\n	axisY: {<br />\n		title: &quot;Count&quot;,<br />\n		includeZero: true,<br />\n	},<br />\n	legend:{<br />\n		cursor: &quot;pointer&quot;,<br />\n		fontSize: 16,<br />\n		itemclick: toggleDataSeries<br />\n	},<br />\n	toolTip:{<br />\n		shared: true<br />\n	},<br />\n	data: [{<br />\n		name: &quot;Total Tests Δ (${currentTestsDeltaToday.toLocaleString()})&quot;,<br />\n		type: &quot;line&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;gray&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;gray&quot;,<br />\n		showInLegend: true,<br />\n		dataPoints: [<br />\n${currentTestsDeltas}<br />\n		]<br />\n	},<br />\n	{<br />\n		name: &quot;Positive Δ (${positiveDeltaToday.toLocaleString()})&quot;,<br />\n		type: &quot;line&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;orange&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;orange&quot;,<br />\n		showInLegend: true,<br />\n		dataPoints: [<br />\n${positiveDeltas}<br />\n		]<br />\n	},<br />\n	{<br />\n		name: &quot;Deaths Δ (${deathsDeltaToday.toLocaleString()})&quot;,<br />\n		type: &quot;line&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;red&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;red&quot;,<br />\n		showInLegend: true,<br />\n		dataPoints: [<br />\n${deathsDeltas}<br />\n		]<br />\n	}]<br />\n});<br />\n${chartName}.render();<br />\n`<br />\n<br />\n&nbsp;&nbsp;return { chartJS: chartJS, chartName: chartName };<br />\n}<br />\n<br />\n<br />\nfunction sortedStateNames(json) {<br />\n&nbsp;&nbsp;// For the entry with today&#039;s date, sort the state names from highest positive count to lowest<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let todaysDate = json[0].date<br />\n&nbsp;&nbsp;let todaysData = json.filter(row =&gt; row.date == todaysDate)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;todaysData.sort((a, b) =&gt; b.positive - a.positive)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return todaysData.map(row =&gt; row.state)<br />\n}<br />\n<br />\n<br />\nfunction statesTestsBarChart(json) {<br />\n&nbsp;&nbsp;let todaysDate = json[0].date<br />\n&nbsp;&nbsp;let todaysData = json.filter(row =&gt; row.date == todaysDate)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;todaysData.sort((a, b) =&gt; b.positive - a.positive)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let positiveDataPoints = todaysData.map(row =&gt; &quot;{ y: &quot;+row.positive+&quot;, label: &#039;&quot;+row.state+&quot;&#039; }&quot;)<br />\n&nbsp;&nbsp;let negativeDataPoints = todaysData.map(row =&gt; &quot;{ y: &quot;+(row.totalTestResults-row.positive)+&quot;, label: &#039;&quot;+row.state+&quot;&#039; }&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let chartName = &quot;chartTestsBarChart&quot; + chartCount++<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let chartJS = `<br />\nvar ${chartName} = new CanvasJS.Chart(&quot;${chartName}&quot;, {<br />\n	animationEnabled: false,<br />\n	title:{<br />\n		text: &quot;State Testing&quot;,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize: 25,<br />\n	},<br />\n	axisX: {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title: &quot;State&quot;,<br />\n		interval: 1,<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;labelFontSize: 12,<br />\n	},<br />\n	axisY:{<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title: &quot;Count&quot;,<br />\n	},<br />\n	data: [{<br />\n		type: &quot;stackedColumn&quot;,<br />\n		showInLegend: true,<br />\n		color: &quot;orange&quot;,<br />\n		name: &quot;Positive&quot;,<br />\n		dataPoints: [<br />\n${positiveDataPoints.join(&quot;,&quot;)}<br />\n		]<br />\n		},<br />\n		{        <br />\n			type: &quot;stackedColumn&quot;,<br />\n			showInLegend: true,<br />\n			name: &quot;Negative&quot;,<br />\n			color: &quot;gray&quot;,<br />\n			dataPoints: [<br />\n${negativeDataPoints.join(&quot;,&quot;)}  <br />\n			]<br />\n		},<br />\n	]<br />\n});<br />\n${chartName}.render();<br />\n`<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return { chartJS: chartJS, chartName: chartName };<br />\n}<br />\n<br />\n<br />\n<br />\nvar html = `<br />\n&lt;!DOCTYPE HTML&gt;<br />\n&lt;html&gt;<br />\n&lt;head&gt;  <br />\n&lt;script&gt;<br />\nwindow.onload = function () {<br />\n`<br />\n<br />\n<br />\nvar chartNames = []<br />\n<br />\n<br />\n<br />\n// https://covidtracking.com/api/v1/us/daily.json<br />\n<br />\nlet dailyDataRequest = new Request(&quot;https://covidtracking.com/api/v1/us/daily.json&quot;)<br />\nlet dailyData = await dailyDataRequest.loadJSON()<br />\n<br />\n<br />\n// US chart for tests given, positive tests, deaths<br />\n<br />\nlet usChart = chartTestsPositivesDeathsForState(dailyData, null)<br />\n<br />\nhtml += usChart.chartJS<br />\nchartNames.push(usChart.chartName)<br />\n<br />\n<br />\n<br />\n// US Deltas<br />\n<br />\nlet usDeltasChart = chartDeltas(dailyData, null)<br />\nhtml += usDeltasChart.chartJS<br />\nchartNames.push(usDeltasChart.chartName)<br />\n<br />\n<br />\n<br />\n// Per-state tests, positive, deaths charts sorted by most positive<br />\n// https://covidtracking.com/api/v1/states/daily.json<br />\n<br />\nlet stateDataRequest = new Request(&quot;https://covidtracking.com/api/v1/states/daily.json&quot;)<br />\nlet stateData = await stateDataRequest.loadJSON()<br />\n<br />\n<br />\n<br />\n// States tests stacked bar chart<br />\n<br />\nlet testsBarChart = statesTestsBarChart(stateData)<br />\nhtml += testsBarChart.chartJS<br />\nchartNames.push(testsBarChart.chartName)<br />\n<br />\n<br />\n<br />\n// California<br />\nlet caChart = chartTestsPositivesDeathsForState(stateData, &quot;CA&quot;)<br />\n<br />\nhtml += caChart.chartJS<br />\nchartNames.push(caChart.chartName)<br />\n<br />\nlet caDeltasChart = chartDeltas(stateData, &quot;CA&quot;)<br />\nhtml += caDeltasChart.chartJS<br />\nchartNames.push(caDeltasChart.chartName)<br />\n<br />\n<br />\n<br />\n// Sorted state data<br />\n<br />\nlet sortedStates = sortedStateNames(stateData)<br />\n<br />\nfor (let state of sortedStates) {<br />\n&nbsp;&nbsp;let stateChart = chartTestsPositivesDeathsForState(stateData, state)<br />\n&nbsp;&nbsp;html += stateChart.chartJS<br />\n&nbsp;&nbsp;chartNames.push(stateChart.chartName)<br />\n}<br />\n<br />\n<br />\n<br />\n<br />\n<br />\nhtml += `<br />\nfunction toggleDataSeries(e){<br />\n	if (typeof(e.dataSeries.visible) === &quot;undefined&quot; || e.dataSeries.visible) {<br />\n		e.dataSeries.visible = false;<br />\n	}<br />\n	else{<br />\n		e.dataSeries.visible = true;<br />\n	}<br />\n	chart.render();<br />\n}<br />\n<br />\n}<br />\n&lt;/script&gt;<br />\n&lt;/head&gt;<br />\n&lt;body&gt;<br />\n`<br />\n<br />\n<br />\nvar index = 0<br />\nfor (let chartName of chartNames) {<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;var width = &quot;100%&quot; // US data, tests for all states<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (index &gt;= 5) { // sorted states<br />\n&nbsp;&nbsp;&nbsp;&nbsp;width = &quot;33%&quot;<br />\n&nbsp;&nbsp;} else if (index &gt;= 3) { // California<br />\n&nbsp;&nbsp;&nbsp;&nbsp;width = &quot;50%&quot;<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &#039;&lt;div id=&quot;&#039;+chartName+&#039;&quot; style=&quot;height: 500px; width: &#039;+width+&#039;; display: inline-block;&quot;&gt;&lt;/div&gt;&#039;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (index == 1 || index == 2 || (index % 3) == 1) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;br /&gt;&lt;br /&gt;&quot;<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;index++<br />\n}<br />\n<br />\n<br />\nhtml += `<br />\n&lt;script src=&quot;https://canvasjs.com/assets/script/canvasjs.min.js&quot;&gt;&lt;/script&gt;<br />\n&lt;/body&gt;<br />\n&lt;/html&gt;<br />\n`<br />\n<br />\n<br />\n<br />\nlet webView = new WebView()<br />\n<br />\nwebView.loadHTML(html)<br />\nwebView.present(true)</div>\nResources:<br />\n- <a href=\"/m/graph-js/canvasjs.min.js\">Backup of the canvasJS library</a><br />\n- <a href=\"/m/graph-js/us-daily.json\">Snapshot of US Daily data</a><br />\n- <a href=\"/m/graph-js/states-daily.json\">Snapshot of States Daily data</a><br />\n"
    },
    {
         "title" : "Books",
         "date_published" : "2020-4-19T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/books.html",
         "url" : "https://memalign.github.io/p/books.html",
         "image" : "https://memalign.github.io/m/book.svg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/books.html'>Books</a>\n</h2>\n</div>\n<img src=\"/m/book.svg\"></img>\n<div id='postdate'>Posted on 4/19/2020</div>\nI know some people who are always reading a book. I’m not an avid book reader like them.<br />\n<br />\nI enjoy reading, though. When reading, I get attached to the characters and the plot. When I finish a book, I feel melancholy, a mild mourning for my fictional companions.<br />\nI try to pick books that will be fun to read while also sticking with me for years to come.<br />\nIn some ways, I treat TV, movies, and books similarly: I don’t always need to be consuming something and I try to pick meaningful ones. I like to think about what I watched/read for weeks or months before picking up something else.<br />\n<br />\nHere’s a list of some books I’ve read. I’ll try to update this periodically.<br />\n<br />\n<br />\n<br />\nNon-Fiction:<br />\n<br />\n- Becoming Steve Jobs<br />\n<br />\n- Black Like Me<br />\n<br />\n- The Checklist Manifesto<br />\n<br />\n- Creative Selection<br />\n<br />\n- Extreme Ownership<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The lessons in this book directly apply to engineering management and leadership. I highly recommend it.<br />\n<br />\n- Getting to Yes<br />\n<br />\n- The Hard Thing About Hard Things<br />\n<br />\n- Punished by Rewards<br />\n<br />\n- Radical Candor<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- This is another great book for leaders and managers.<br />\n<br />\n- Steve Jobs<br />\n<br />\n- Thinking Fast and Slow<br />\n<br />\n<br />\n<br />\nFiction:<br />\n<br />\n- American Gods<br />\n<br />\n- Atlas Shrugged<br />\n<br />\n- The Bicentennial Man<br />\n<br />\n- Brave New World<br />\n<br />\n- Breakfast of Champions<br />\n<br />\n- Cat’s Cradle<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- I like Vonnegut’s writing for its humor, depth, and straightforwardness. He’s one of the few authors with more than one book on my list.<br />\n<br />\n- The Catcher in the Rye<br />\n<br />\n- Choke<br />\n<br />\n- Dirk Gently's Holistic Detective Agency<br />\n<br />\n- Dune<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The writing is dense and not usually what I would choose to read. I’m still glad I read it because it’s one of the classics which gets a lot of references.<br />\n<br />\n- <a href=\"http://www.galactanet.com/oneoff/theegg_mod.html\">The Egg</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Wonderful short story by Andy Weir<br />\n<br />\n- Ender’s Game<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- One of my favorite books. It’s an interesting story which also influences my own thoughts about leadership in the real world.<br />\n<br />\n- Ender’s Shadow<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- A sort-of-sequel to Ender’s Game. I enjoyed how it layers extra depth onto a story I already loved.<br />\n<br />\n- Fight Club<br />\n<br />\n- Foundation trilogy<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Foundation<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Foundation and Empire<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Second Foundation<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Asimov is another author with many books on my list. I think about these stories a lot today (in the year 2020) when things feel out of control.<br />\n<br />\n- Futuristic Violence and Fancy Suits<br />\n<br />\n- Girl with the Dragon Tattoo series<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The Girl with the Dragon Tattoo<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The Girl Who Played with Fire<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The Girl Who Kicked the Hornets’ Nest<br />\n<br />\n- The Gods Themselves<br />\n<br />\n- Good Omens<br />\n<br />\n- Harry Potter series<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Sorcerer’s Stone<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Chamber of Secrets<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Prisoner of Azkaban<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Goblet of Fire<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Order of the Phoenix<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Half-Blood Prince<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Deathly Hallows<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- A series core to my childhood and young adulthood. I got the first book as a present from my grandmother for graduating 5th grade.<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n- Hitchhiker’s Guide to the Galaxy trilogy<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The Hitchhiker’s Guide to the Galaxy<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The Restaurant at the End of the Universe<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Life, the Universe and Everything<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- So Long, and Thanks for All the Fish<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Mostly Harmless<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Young Zaphod Plays it Safe<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- And Another Thing...<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Funny and light while still carrying depth. Some of my favorites.<br />\n<br />\n- Hyperion<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Interesting stories though I wish I had known up-front that there would be no ending to tie off loose ends and plot-lines.<br />\n<br />\n- The Illustrated Man<br />\n<br />\n- John Dies at the End series<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- John Dies at the End<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- This Book is Full of Spiders<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- What the Hell Did I Just Read<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Fun comedy horror from Jason Parkin (aka David Wong), another author with several books on my list.<br />\n<br />\n- <a href=\"https://www.multivax.com/last_question.html\">The Last Question</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Wonderful short story by Isaac Asimov<br />\n<br />\n- Learning to Be Me<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Unsettling and thought-provoking short story by Greg Egan. It could be a Black Mirror episode.<br />\n<br />\n- The Little Prince<br />\n<br />\n- Lord of the Flies<br />\n<br />\n- Lord of the Rings<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The Hobbit<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The Fellowship of the Ring<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The Two Towers<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The Return of the King<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Dense fantasy classics. I’m glad I’ve read them but I don’t love them. I tried to read the Silmarillion but that was way too far in the wrong direction for me (even more dense and way less story).<br />\n<br />\n- The Perks of Being a Wallflower<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Really resonated with my angsty teenager self<br />\n<br />\n- The Red Pony<br />\n<br />\n- Replay<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- One of my favorite books: fun, fast, thought-provoking<br />\n<br />\n- Slaughterhouse-Five<br />\n<br />\n- Snow Crash<br />\n<br />\n- The Terminal Experiment <br />\n<br />\n- Watchmen<br />\n<br />\n- Watership Down<br />\n"
    },
    {
         "title" : "notes.txt",
         "date_published" : "2020-4-13T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/notes-txt.html",
         "url" : "https://memalign.github.io/p/notes-txt.html",
         "image" : "https://memalign.github.io/m/ios-notes.png",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/notes-txt.html'>notes.txt</a>\n</h2>\n</div>\n<img src=\"/m/ios-notes.png\"></img>\n<div id='postdate'>Posted on 4/13/2020</div>\nAt a software engineering internship in 2006, my mentor told me that he kept a paper engineering journal that he put notes in every day as he worked on problems. He gave me one, too. I followed that habit during all of my internships.<br />\n<br />\nThen ~4 years later, I started working as a full-time software engineer. A few months into working, I stopped using a paper notebook. I think part of the reason is that I had a better tool: the bug tracker. Pretty much every assignment I got had a corresponding entry in a bug tracking database. I started keeping the notes of my investigations in bug reports directly so there would be a central and shared source of truth. A mentor at this job said \"some of the best engineers\" put frequent clear updates in their bugs.<br />\n<br />\nMy personal projects had always been note-free, though. Unfortunately, I didn't bring the same problem-solving-and-knowledge-capturing discipline to personal projects until ~2016. That's a whole decade after learning the value of an engineering journal at work!<br />\n<br />\nNow, even for informal personal projects, I keep a notes.txt file in the <a href=\"/p/source-control.html\">git repository</a>. <br />\n<br />\nHere's an excerpt from notes.txt for this website (which is a personal side-project of its own):<br />\n<br />\n<div id='code'>12/25/19<br />\n<br />\nI created a user page in github!<br />\n<br />\nI found that I have to publish from the master branch and the root directory of the memalign.github.io project. I also found that an index.html file with just plaintext contents wouldn&#039;t get served for https://memalign.github.io<br />\n<br />\n( I figured this out by googling and finding:<br />\nhttps://github.community/t5/GitHub-Pages/index-html-not-working/td-p/1266 )</div>\n(You can see the full notes.txt for the project <a href=\"/notes.txt\">here</a>.)<br />\n<br />\nI use notes.txt to capture:<br />\n<br />\n- Problems I'm running into<br />\n- Thoughts on what might be happening<br />\n- Potential solutions to explore<br />\n- The solution that worked<br />\n- Useful links and other research<br />\n- Useful commands<br />\n- The full steps required to do something novel (for example: getting a 3rd party open source library to build and install correctly)<br />\n- Features I want to add<br />\n- The bug list<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- For a simple side-project a text bug list embedded in my notes is much easier than a full bug tracker"
    },
    {
         "title" : "Download Video Into Your Brain",
         "date_published" : "2020-4-5T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/speed-up-av.html",
         "url" : "https://memalign.github.io/p/speed-up-av.html",
         "image" : "https://memalign.github.io/m/westworld-pearl.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/speed-up-av.html'>Download Video Into Your Brain</a>\n</h2>\n</div>\n<img src=\"/m/westworld-pearl.jpg\"></img>\n<div id='postdate'>Posted on 4/5/2020</div>\nA natural extension of <a href=\"/p/tts-download-into-brain.html\">Downloading Text Into Your Brain</a> is to consume audio and video more efficiently.<br />\n<br />\nI do this by speeding up playback to be anywhere between 1.2x and 2x faster. Another useful trick is to skip ahead (past ads, uninteresting segments). I like to skip ahead by 30 seconds and skip back by 10 seconds (to rewind after skipping too far forward).<br />\n<br />\n<br />\nSome examples where I'll use this technique:<br />\n<br />\n- To watch a technical talk that's important but not interesting<br />\n<br />\n- To watch things that are enjoyable but not quite worth their time tradeoff. For me, this applies to YouTube channels that are funny but too slow-paced. And ones that have too much uninteresting filler.<br />\n<br />\n- To listen to podcasts which are also often too slow-paced<br />\n<br />\n- To skip past ads and sponsored content<br />\n<br />\n- To fast-foward through the credits in case there's a post-credits scene<br />\n<br />\n<br />\nNot all content consumption is about efficiency, of course!<br />\n<br />\nSometimes I want to savor every moment. For example, I won't speed up a TV show like <a href=\"https://en.wikipedia.org/wiki/Westworld_(TV_series)\">Westworld</a> which is dense with references, foreshadowing; which is made to be beautiful and thought-provoking.<br />\n<br />\n<br />\nI've built my own tools for doing this which I won't be sharing today. But you don't need my tools to get started! There's a useful bookmarklet called <a href=\"http://www.yuptude.com/\">yuptude</a>. There's more info on that website. In case it goes down some day, here's the raw bookmarklet:<br />\n<div id='code'>javascript:(function()%7Bfunction%20dg(t)%7Breturn%20document.getElementById(t)%7Dfunction%20yte_in()%7Bs=dg(%22yptd-in%22).value%7Dfunction%20yte_off()%7Byti_in.removeEventListener(%22input%22,yte_in),yti_off.removeEventListener(%22click%22,yte_off),yti_pit.removeEventListener(%22click%22,yte_pit),yti_up.removeEventListener(%22click%22,yte_up),yti_dwn.removeEventListener(%22click%22,yte_dwn),ytw.parentNode.removeChild(ytw),yts.parentNode.removeChild(yts),clearInterval(interval),s=1,pitch(1)%7Dfunction%20yte_pit()%7Bp=dg(%22yptd-pin%22).checked%7Dfunction%20yte_up()%7Binputval=document.getElementById(%22yptd-in%22).value,inputval=inputval%3FparseFloat(inputval):1,inputval=3.9%3E=inputval%3Finputval+.1:inputval,s=dg(%22yptd-in%22).value=inputval.toFixed(1)%7Dfunction%20yte_dwn()%7Binputval=dg(%22yptd-in%22).value,inputval=inputval%3FparseFloat(inputval):1,inputval=inputval%3E=.6%3Finputval-.1:inputval,s=dg(%22yptd-in%22).value=inputval.toFixed(1)%7Dfunction%20pitch(t)%7Bfor(var%20e=0;videos.length%3Ee;e++)v=videos%5Be%5D,v%26%26v.readyState%3E=2%26%26(v.playbackRate=t%7C%7Cs%7C%7C1,v.mozPreservesPitch=v.webkitPreservesPitch=v.preservePitch=!p)%7Dvar%20s=1,p=!1,videos=document.querySelectorAll(%22video,audio%22),v,inputval,ytw=document.createElement(%22div%22);ytw.innerHTML=&#039;%3Cstyle%20id=%22yptd-style%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%23yptd%20span,%23yptd-box%7Bfloat:left;padding:0%20.5em;display:block%7D%23yptd%20span%20em,%23yptd-bottom,%23yptd-in%7Bvertical-align:middle%7D%23yptd-pit,%23yptd-pit%20input%7Bfloat:right%7D%23yptd%20a,%23yptd-bar%7Bbackground-color:%23fd0d5d%7D%23yptd%7Bz-index:9999999999;position:fixed;bottom:0;left:6px;font:16px%20Helvetica,Arial,sans-serif;-webkit-text-size-adjust:100%25;-ms-text-size-adjust:100%25%7D%23yptd%20*%7Bmargin:0%7D%23yptd%20a%7Bborder-radius:5px;-moz-border-radius:5px;-webkit-border-radius:5px;float:left;margin:0%20.5em%200%200;padding:.25em%201em;font-weight:700;color:%23FFF%7D%23yptd%20a%20em%7Bfont-size:.9em%7D%23yptd%20a:active,%23yptd%20a:focus,%23yptd%20a:hover%7Boutline:0;color:%23fd0d5d;background-color:%23FFF;text-decoration:none%7D%23yptd%20span%7Bborder-radius:3px;-moz-border-radius:3px;-webkit-border-radius:3px;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;margin:.5em;width:2.5em;border-bottom:2px%20solid%20rgba(0,0,0,.25);text-decoration:none;color:%23000;background-color:%23FFF;cursor:pointer;text-align:center%7D%23yptd%20span%20em%7Bfont-size:.75em%7D%23yptd%20span:active,%23yptd%20span:focus,%23yptd%20span:hover%7Bcolor:%23fd0d5d%7D%23yptd-bar%7Bborder-radius:3px%203px%200%200;-moz-border-radius:3px%203px%200%200;-webkit-border-radius:3px%203px%200%200;height:2.25em%7D%23yptd-bar:after,%23yptd-bottom:after%7Bcontent:%22%22;display:block;clear:both%7D%23yptd-controls%7Bfloat:right;height:2.25em;border-left:2px%20solid%20rgba(0,0,0,.33)%7D%23yptd-box%7B-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:4em;min-width:4em;height:100%25;background-color:rgba(0,0,0,.15)%7D%23yptd-in%7Bwidth:100%25;height:100%25;border:0;text-align:center;font:14px%20Helvetica,Arial,sans-serif;font-family:Helvetica,Arial,sans-serif;font-size:14px;color:%23FFF;background-color:transparent%7D%23yptd-bottom%7Bpadding:.75em;font-size:.75em;background-color:rgba(0,0,0,.8)%7D%23yptd-pit%7Bposition:relative;padding:.25em%200%7D%23yptd-pit%20label%7Bmargin-right:.5em;color:%23FFF%7D%23yptd-pit%20em%7Bdisplay:none%7D%23yptd-pit:active%20em,%23yptd-pit:focus%20em,%23yptd-pit:hover%20em%7Bdisplay:block;position:absolute;top:-2.5em;left:0;padding:.5em;white-space:pre;font-size:.8em;background-color:%23fd0d5d%7D%20%20%20%20%20%20%20%20%20%20%20%20%3C/style%3E%20%20%20%20%20%20%20%20%3Cdiv%20id=%22yptd%22%3E%20%3Cdiv%20id=%22yptd-bar%22%3E%20%3Cspan%20id=%22yptd-off%22%3E%3Cem%3EOff%3C/em%3E%3C/span%3E%20%3Cdiv%20id=%22yptd-controls%22%3E%20%3Cspan%20id=%22yptd-dwn%22%3E-%3C/span%3E%20%3Cdiv%20id=%22yptd-box%22%3E%20%3Cinput%20id=%22yptd-in%22%20type=%22text%22%20value=%22&#039;+s+&#039;%22%3E%20%3C/div%3E%20%3Cspan%20id=%22yptd-up%22%3E+%3C/span%3E%20%3C/div%3E%20%3C/div%3E%20%3Cdiv%20id=%22yptd-bottom%22%3E%20%3Ca%20href=%22http://yuptude.com%22%3E%3Cem%3Eyuptude%3C/em%3E%3C/a%3E%20%3Cdiv%20id=%22yptd-pit%22%3E%20%3Clabel%20for=%22yptd-pin%22%3E%20Shift%20Pitch%20%3Cem%3E(Firefox%20%26amp;%20Safari%20only)%3C/em%3E%3C/label%3E%20%3Cinput%20type=%22checkbox%22%20name=%22yptd-pin%22%20id=%22yptd-pin%22%20value=%221%22%20&#039;+(p%3F&#039;checked=%22checked%22%20&#039;:%22%20%22)+%22%3E%20%3C/div%3E%20%3C/div%3E%20%3C/div%3E%22,document.body.appendChild(ytw);var%20ytw=dg(%22yptd%22),yts=dg(%22yptd-style%22),yti_in=dg(%22yptd-in%22),yti_off=dg(%22yptd-off%22),yti_pit=dg(%22yptd-pin%22),yti_up=dg(%22yptd-up%22),yti_dwn=dg(%22yptd-dwn%22);yti_in.addEventListener(%22input%22,yte_in),yti_off.addEventListener(%22click%22,yte_off),yti_pit.addEventListener(%22click%22,yte_pit),yti_up.addEventListener(%22click%22,yte_up),yti_dwn.addEventListener(%22click%22,yte_dwn);var%20interval=setInterval(function()%7Bpitch()%7D,100);%7D)()</div>"
    },
    {
         "title" : "Download Text Into Your Brain",
         "date_published" : "2020-3-28T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/tts-download-into-brain.html",
         "url" : "https://memalign.github.io/p/tts-download-into-brain.html",
         "image" : "https://memalign.github.io/m/matrix-kung-fu.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/tts-download-into-brain.html'>Download Text Into Your Brain</a>\n</h2>\n</div>\n<img src=\"/m/matrix-kung-fu.jpg\"></img>\n<div id='postdate'>Posted on 3/28/2020</div>\nIn the internet age, there's so much interesting information to absorb: academic papers, blog posts, articles, books, reddit posts, text messages, emails, etc.<br />\n<br />\nA lot of this content is in text form so I'm reading all the time.<br />\n<br />\nA while ago, I discovered that the iPhone has a built-in <a href=\"https://en.wikipedia.org/wiki/Speech_synthesis\">text-to-speech (TTS)</a> accessibility feature that can speak text the user highlights. At the time of writing, you can turn this on in Settings->Accessibility->Spoken Content->Speak Selection. This will cause a Speak button to appear when you select text. You can crank up the speed of the speech too.<br />\n<br />\nI started using this feature to listen to paragraphs while doing things that occupy eyes and hands: driving, washing dishes, exercising. I quickly got used to listening to this sped up Siri voice.<br />\n<br />\nI was blown away by how much more quickly I could read this way. When I'm reading with my eyes, I'll often get temporarily stuck trying to understand specific wording or fine details. I realized that this is unnecessarily slowing me down. When listening, I'm forced to keep a quick and steady pace. For wording I would've gotten stuck on, I either figure it out from context or move on.<br />\n<br />\nUsing this technique feels like downloading information directly into your brain.<br />\n<br />\nManually selecting text can become onerous so I've built some tools that help me more easily read websites and eBooks this way.<br />\n<br />\nI'm using a combination of the <a href=\"https://apps.apple.com/us/app/shortcuts/id1462947752\">Shortcuts app</a> and the <a href=\"https://apps.apple.com/us/app/scriptable/id1405459188\">Scriptable app</a>.<br />\n<br />\nThe Shortcuts app provides easy ways to access system functionality, including speaking text and getting text from a website.<br />\n<br />\nScriptable lets the user write programs in JavaScript that call into iOS APIs and make use of Shortcuts.<br />\n<br />\n<br />\nTo use these yourself:<br />\n<br />\n1. Install the apps<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- <a href=\"https://apps.apple.com/us/app/shortcuts/id1462947752\">Shortcuts</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;- <a href=\"https://apps.apple.com/us/app/scriptable/id1405459188\">Scriptable</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n2. Install/recreate these Shortcuts:<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- <a href=\"https://www.icloud.com/shortcuts/992821652da741e2a3993a2dce37f4b2\">Get Website Text</a><br />\n<img src=\"/m/get-website-text.png\"></img><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- <a href=\"https://www.icloud.com/shortcuts/a3f88b742ada4a9f835e8a734bdfb907\">SpeakText</a><br />\n<img src=\"/m/speaktext.png\"></img><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- <a href=\"https://www.icloud.com/shortcuts/80a6e542803448329e110094bfee2146\">Dictate</a><br />\n<img src=\"/m/dictate.png\"></img><br />\n<br />\n3. In Scriptable, create a new script called Speak Web Content. Paste in this code:<br />\n<br />\n<div id='code'>// Made by @memalign - 1/1/19<br />\n// Copyright 2019<br />\n// Run from a share sheet to speak shared text<br />\n// I call over to a shortcut because the Speech support in Scriptable doesn&#039;t let me configure the speaking speed<br />\n// Needs to be run in the app (instead of in the extension) so x-callback-url works<br />\n<br />\n<br />\n// let urls = [ &quot;https://support.apple.com/guide/shortcuts/use-x-callback-url-apdcd7f20a6f/ios&quot; ]<br />\nlet urls = args.urls<br />\n<br />\n<br />\nfor (url of urls) {<br />\n&nbsp;&nbsp;console.log(url)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// Without this alert, Scriptable got confused and would abort when the callback URL returned focus to Scriptable from Shortcuts<br />\n&nbsp;&nbsp;let alert = new Alert()<br />\n&nbsp;&nbsp;alert.title = &quot;Speak Web Content&quot;<br />\n&nbsp;&nbsp;alert.message = &quot;Speak content for &quot; + url + &quot; ?&quot;<br />\n&nbsp;&nbsp;alert.addAction(&quot;Speak it!&quot;)<br />\n&nbsp;&nbsp;alert.addAction(&quot;Cancel&quot;)<br />\n&nbsp;&nbsp;if (await alert.present() == 1) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// Get Website Text: https://www.icloud.com/shortcuts/992821652da741e2a3993a2dce37f4b2<br />\n&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;Get Website Text&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;input&quot;, &quot;text&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;text&quot;, url)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let result = await callbackURL.open()<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;result: &quot; + result.result)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;await showWebViewWithText(result.result)<br />\n&nbsp;&nbsp;<br />\n}<br />\n<br />\n<br />\nasync function showWebViewWithText(text) {<br />\n&nbsp;&nbsp;let webView = new WebView()<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let html = &quot;&lt;table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let lines = text.split(&quot;\n&quot;)<br />\n&nbsp;&nbsp;let count = 0<br />\n&nbsp;&nbsp;for (line of lines) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;input type=&#039;checkbox&#039; id=&#039;line&quot;+count+&quot;&#039; value=&#039;&quot;+htmlEncode(line)+&quot;&#039; checked&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;input type=&#039;button&#039; value=&#039;uncheck above&#039; onclick=&#039;uncheckAbove(&quot;+count+&quot;)&#039;&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;br /&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;input type=&#039;button&#039; value=&#039;uncheck below&#039; onclick=&#039;uncheckBelow(&quot;+count+&quot;)&#039;&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += htmlEncode(line)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;count++<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += `<br />\n&nbsp;&nbsp;&lt;script&gt;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;document.body.style.zoom = 4.0<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function uncheckAbove(index) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;for (let i = 0; i &lt;= index; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;line&quot;+i).checked = false;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function uncheckBelow(index) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;for (let i = index; i &lt; ${count}; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;line&quot;+i).checked = false;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function getSelectedText() {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let text = &quot;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;for (let i = 0; i &lt; ${count}; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let checkbox = document.getElementById(&quot;line&quot;+i)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (checkbox.checked) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += &quot;\\n&quot; + checkbox.value<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return text<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&lt;/script&gt;<br />\n&nbsp;&nbsp;`<br />\n&nbsp;&nbsp;<br />\n<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;await webView.loadHTML(html)<br />\n&nbsp;&nbsp;await webView.present()<br />\n&nbsp;&nbsp;let selectedText = await webView.evaluateJavaScript(&quot;getSelectedText()&quot;)<br />\n&nbsp;&nbsp;console.log(&quot;selected text:\n&quot; + selectedText)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;speakText(selectedText)<br />\n}<br />\n<br />\n<br />\nfunction speakText(text) {<br />\n&nbsp;&nbsp;// SpeakText: https://www.icloud.com/shortcuts/a3f88b742ada4a9f835e8a734bdfb907<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;SpeakText&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;input&quot;, &quot;text&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;text&quot;, text)<br />\n&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;callbackURL.open()<br />\n}<br />\n<br />\n// HTML encoding utilities<br />\n// Main logic from https://ourcodeworld.com/articles/read/188/encode-and-decode-html-entities-using-pure-javascript<br />\n<br />\nfunction htmlEncode(str) {<br />\n&nbsp;&nbsp;var buf = [];<br />\n			<br />\n&nbsp;&nbsp;for (var i=str.length-1;i&gt;=0;i--) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;buf.unshift([&#039;&amp;#&#039;, str[i].charCodeAt(), &#039;;&#039;].join(&#039;&#039;));<br />\n&nbsp;&nbsp;}<br />\n			<br />\n&nbsp;&nbsp;return buf.join(&#039;&#039;);<br />\n}<br />\n<br />\nfunction htmlDecode(str) {<br />\n&nbsp;&nbsp;return str.replace(/&amp;#(\d+);/g, function(match, dec) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return String.fromCharCode(dec);<br />\n&nbsp;&nbsp;});<br />\n}</div>\n4. Configure the script settings:<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Always Run in App = on<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Share Sheet Inputs = URLs<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n5. To use this script:<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- View a website in Safari<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Tap the Share button<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Tap \"Run Script\"<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Tap \"Speak Web Content\"<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Accept prompts asking for permission<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Uncheck any text that you don't want the script to read. Usually an article is in the middle of a webpage so it's useful to uncheck the top portion and bottom portion of a webpage which include menus, ads, user comments, or related article links.<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Tap Close<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The content will now be spoken!<br />\n<br />\n6. In Scriptable, create a new script called Read eBook. Paste in this code:<br />\n<br />\n<div id='code'>// Made by @memalign - 1/1/19<br />\n// Copyright 2019<br />\n<br />\n// First, convert eBook to text using http://www.convertfiles.com/convert/ebook/EPUB-to-TXT.html<br />\n// Then, using Files, save the result to Scriptable&#039;s space<br />\n<br />\n<br />\nlet fm = FileManager.iCloud()<br />\n<br />\nlet fullBookPath = fm.documentsDirectory() + &quot;/your-book-filename.txt&quot;<br />\n<br />\n<br />\n// File format:<br />\n// currentLineNumber\n   - integer, offset into full book<br />\nlet inProgressPath = fullBookPath + &quot;.inProgress.txt&quot;<br />\n<br />\nfm.downloadFileFromiCloud(inProgressPath)<br />\nif (!fm.fileExists(inProgressPath)) {<br />\n&nbsp;&nbsp;console.log(&quot;Creating in progress copy&quot;)<br />\n&nbsp;&nbsp;fm.writeString(inProgressPath, &quot;0\n&quot;)<br />\n}<br />\n<br />\n<br />\nlet lines = fm.readString(fullBookPath).split(&quot;\n&quot;)<br />\nlet lineOffset = 0<br />\n<br />\nlet fullBookLineCount = lines.length<br />\n<br />\nconst DEFAULT_APPROX_WORDS_PER_CHUNK = 1200<br />\n<br />\nlet wordsPerChunk = DEFAULT_APPROX_WORDS_PER_CHUNK<br />\n<br />\nlet handsFreeMode = false<br />\n<br />\ndo {<br />\n<br />\n&nbsp;&nbsp;let progress = fm.readString(inProgressPath)<br />\n&nbsp;&nbsp;if (!progress) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;lineOffset = parseInt((progress.split(&quot;\n&quot;))[0])<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// Pick enough lines to have enough words<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let lineCount = findNumLinesToAchieveWordCount(lines, lineOffset, wordsPerChunk)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;Showing chunk of &quot; + lineCount + &quot; lines with &quot; + (lines.length-lineCount) + &quot; remaining&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let chunkStr = stringForNumLines(lines, lineOffset, lineCount)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// console.log(chunkStr)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let action = &quot;read&quot;<br />\n<br />\n<br />\n&nbsp;&nbsp;if (handsFreeMode) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let voiceCommand = await getDictatedText()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let shouldStop = voiceCommand.match(/stop/i)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (shouldStop) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action = &quot;stop&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let actionAndWPC = await showWebViewWithText(chunkStr, lineOffset, fullBookLineCount, wordsPerChunk)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;action = actionAndWPC[0]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;wordsPerChunk = actionAndWPC[1]<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (action === &quot;stop&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (action === &quot;start over&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let alert = new Alert()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;alert.title = &quot;Start Over&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;alert.message = &quot;Are you sure you want to forget all progress? This cannot be undone.&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;alert.addDestructiveAction(&quot;Start Over&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;alert.addAction(&quot;Cancel&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (await alert.present() == 0) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Starting over!&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fm.remove(inProgressPath)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (action === &quot;hands free&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;action = &quot;read&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;handsFreeMode = true<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (action === &quot;read&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;await speakText(chunkStr)<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (action === &quot;previous&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;lineOffset -= findNumLinesToGoBack(lines, lineOffset, wordsPerChunk)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;lineCount = 0<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;updateInProgressFile(lineOffset+lineCount, fullBookLineCount, inProgressPath)<br />\n<br />\n} while (true)<br />\n<br />\n<br />\n<br />\nfunction updateInProgressFile(newLineOffset, fullBookLineCount, inProgressPath) {<br />\n&nbsp;&nbsp;if (newLineOffset &gt;= fullBookLineCount) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;No more lines remain!&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;fm.remove(inProgressPath)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// Write to a temp file<br />\n&nbsp;&nbsp;let tempFile = fm.documentsDirectory() + &quot;/temp-book.txt&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;fm.writeString(tempFile, newLineOffset+&quot;\n&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;Replacing &quot; + inProgressPath)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// Move the temp file to final path<br />\n&nbsp;&nbsp;fm.remove(inProgressPath) // seems to be required since move errors if the destination file exists (contradicting the docs)<br />\n&nbsp;&nbsp;fm.move(tempFile, inProgressPath)<br />\n}<br />\n<br />\nasync function showWebViewWithText(text, lineOffset, totalLineCount, wordsPerChunk) {<br />\n&nbsp;&nbsp;let webView = new WebView()<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let html = &quot;&lt;html&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;body&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += `<br />\n&nbsp;&nbsp;&lt;script&gt;<br />\n&nbsp;&nbsp;document.body.style.zoom = 4.0<br />\n&nbsp;&nbsp;&lt;/script&gt;<br />\n&nbsp;&nbsp;`<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;center&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;stop&#039; onclick=&#039;setAction(\&quot;stop\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;skip&#039; onclick=&#039;setAction(\&quot;skip\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;read&#039; onclick=&#039;setAction(\&quot;read\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;hands free&#039; onclick=&#039;setAction(\&quot;hands free\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;text&#039; size=&#039;5&#039; style=&#039;text-align:center;&#039; id=&#039;desiredAction&#039; value=&#039;read&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;text&#039; size=&#039;5&#039; style=&#039;text-align:center;&#039; id=&#039;wordsPerChunk&#039; value=&#039;&quot;+wordsPerChunk+&quot;&#039;&gt; words&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;br /&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let linesRead = lineOffset<br />\n&nbsp;&nbsp;html += &quot;Progress: &quot; + linesRead + &quot;/&quot; + totalLineCount + &quot; = &quot; + (100*linesRead/totalLineCount).toFixed(1) + &quot;%&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/center&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let lines = text.split(&quot;\n&quot;)<br />\n&nbsp;&nbsp;let count = 0<br />\n&nbsp;&nbsp;for (line of lines) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += htmlEncode(line)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;count++<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;br /&gt;&lt;br /&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;center&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;previous&#039; onclick=&#039;setAction(\&quot;previous\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;start over&#039; onclick=&#039;setAction(\&quot;start over\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;/center&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += `<br />\n&nbsp;&nbsp;&lt;script&gt;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function setAction(str) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;desiredAction&quot;).value = str<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function getDesiredAction() {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let actionInput = document.getElementById(&quot;desiredAction&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return actionInput.value<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function getWordsPerChunk() {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let wpcInput = document.getElementById(&quot;wordsPerChunk&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return wpcInput.value<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&lt;/script&gt;<br />\n&nbsp;&nbsp;`<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/body&gt;&lt;/html&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;await webView.loadHTML(html)<br />\n&nbsp;&nbsp;await webView.present()<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let selectedAction = await webView.evaluateJavaScript(&quot;getDesiredAction()&quot;)<br />\n&nbsp;&nbsp;console.log(&quot;action:\n&quot; + selectedAction)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let wpc = await webView.evaluateJavaScript(&quot;getWordsPerChunk()&quot;)<br />\n&nbsp;&nbsp;console.log(&quot;wpc: &quot; + wpc)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return [selectedAction, wpc]<br />\n}<br />\n<br />\n<br />\n<br />\nfunction stringForNumLines(lines, lineOffset, numLines) {<br />\n&nbsp;&nbsp;let str = &quot;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;for (let i = 0; i &lt; numLines; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;str += &quot;\n&quot; + lines[i+lineOffset];<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return str<br />\n}<br />\n<br />\n<br />\nfunction findNumLinesToAchieveWordCount(lines, lineOffset, desiredWordCount) {<br />\n&nbsp;&nbsp;let lineCount = 0<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let accumWC = 0<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;for (let i = lineOffset; i &lt; lines.length; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let line = lines[i]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let lineWC = line.split(&quot; &quot;).length<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Don&#039;t far exceed word count<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (i &gt; 0 &amp;&amp; lineWC &gt; 2*desiredWordCount) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;lineCount++<br />\n&nbsp;&nbsp;&nbsp;&nbsp;accumWC += lineWC<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (accumWC &gt;= desiredWordCount) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return lineCount<br />\n}<br />\n<br />\n<br />\n// Instead of making a custom reversed version of findNumLinesToAchieveWordCount, this is a more complex method that should work with any future implementation of that method<br />\nfunction findNumLinesToGoBack(lines, lineOffset, wordsPerChunk) {<br />\n&nbsp;&nbsp;let numToGoBack = 0<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;for (numToGoBack = 0; numToGoBack &lt;= lineOffset; numToGoBack++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let numLinesWeWouldPick = findNumLinesToAchieveWordCount(lines, lineOffset-numToGoBack, wordsPerChunk)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// if our offset were lineOffset-numToGoBack<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// we would show numLinesWeWouldPick lines<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// if (lineOffset-numToGoBack) + numLinesWeWouldPick is equal to our current offset then that&#039;s the previous offset we had<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// if that sum is less than our current offset then it would be going back too far<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let testOffset = (lineOffset-numToGoBack) + numLinesWeWouldPick<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (testOffset &lt;= lineOffset) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;Going back by &quot; + numToGoBack + &quot; lines&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return numToGoBack<br />\n}<br />\n<br />\n<br />\n// I call over to a shortcut because the Speech support in Scriptable doesn&#039;t let me configure the speaking speed<br />\n// https://www.icloud.com/shortcuts/a3f88b742ada4a9f835e8a734bdfb907<br />\nasync function speakText(text) {<br />\n&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;SpeakText&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;input&quot;, &quot;text&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;text&quot;, text)<br />\n&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let result = await callbackURL.open()<br />\n&nbsp;&nbsp;console.log(&quot;speakText result: &quot; + result)<br />\n}<br />\n<br />\n// I call over to a shortcut because the Dictation support in Scriptable requires touch interaction<br />\n// https://www.icloud.com/shortcuts/80a6e542803448329e110094bfee2146<br />\nasync function getDictatedText() {<br />\n&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;Dictate&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let result = await callbackURL.open()<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;dictated text: &quot; + result.result)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return result.result<br />\n}<br />\n<br />\n<br />\n// HTML encoding utilities<br />\n// Main logic from https://ourcodeworld.com/articles/read/188/encode-and-decode-html-entities-using-pure-javascript<br />\n<br />\nfunction htmlEncode(str) {<br />\n&nbsp;&nbsp;var buf = [];<br />\n			<br />\n&nbsp;&nbsp;for (var i=str.length-1;i&gt;=0;i--) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;buf.unshift([&#039;&amp;#&#039;, str[i].charCodeAt(), &#039;;&#039;].join(&#039;&#039;));<br />\n&nbsp;&nbsp;}<br />\n			<br />\n&nbsp;&nbsp;return buf.join(&#039;&#039;);<br />\n}<br />\n<br />\nfunction htmlDecode(str) {<br />\n&nbsp;&nbsp;return str.replace(/&amp;#(\d+);/g, function(match, dec) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return String.fromCharCode(dec);<br />\n&nbsp;&nbsp;});<br />\n}</div>\n7. You'll need to save a long text file (using a converted eBook works great) into Scriptable's directory using the Files app. Then, you'll need to replace \"your-book-filename.txt\" with the appropriate filename.<br />\n<br />\n8. Run the script<br />\n<br />\n9. Tap a mode (stop, skip, read, hands free) or keep the default (read) and then tap Close<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- stop: stop the script<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- skip: skip this page without reading it aloud<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- read: read this page, advance to the next one, and reprompt<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- hands free: read this page, then give the user a chance to say \"continue\" or \"stop\". If the user says \"continue\" the next page will automatically be read aloud. If the user says \"stop\", the script will stop running. This is especially useful when driving or washing dishes!<br />\n<br />\n<br />\nHopefully somebody will find these tools useful or inspiring!<br />\n"
    },
    {
         "title" : "Source Control",
         "date_published" : "2020-3-27T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/source-control.html",
         "url" : "https://memalign.github.io/p/source-control.html",
         "image" : "https://memalign.github.io/m/2560px-Git-logo-black.svg.png",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/source-control.html'>Source Control</a>\n</h2>\n</div>\n<img src=\"/m/2560px-Git-logo-black.svg.png\"></img>\n<div id='postdate'>Posted on 3/27/2020</div>\nIt's smart to have backups of important information. The best way to have backups for programming projects is <a href=\"https://en.wikipedia.org/wiki/Version_control\">source control</a>.<br />\n<br />\nI've used source control (<a href=\"https://en.wikipedia.org/wiki/Git\">git</a>, specifically) for personal programming projects, professional software development, journals, and websites. It works well for anything text-based.<br />\n<br />\nSource control is super useful because it tracks incremental history of changes. That makes it easy to hone in on when a change (good or bad) was made with some context of why. That's useful when tracking down a nasty bug! It's also useful when researching why specific design decisions were made.<br />\n<br />\n<br />\nSome helpful options to get started with source control:<br />\n<br />\n- Use <a href=\"https://github.com\">https://github.com</a> to create and host repositories for free<br />\n<br />\n- Another free option is <a href=\"https://bitbucket.org/product\">Bitbucket</a><br />\n<br />\n- Create your own local git repository that lives directly on your computer. Learn more <a href=\"https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Getting-and-Creating-Projects\">here</a>.<br />\n<br />\n<br />\nBecause code can often be reused, I recommend using git for nearly all the code you ever write. It's even useful to have a git repository that's just for small utilities or toying around. Use a local git repository if you want to keep it private.<br />\n<br />\nYou can find my own public GitHub repositories <a href=\"https://github.com/memalign/\">here</a>."
    },
    {
         "title" : "Personal Projects",
         "date_published" : "2020-3-26T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/personal-projects.html",
         "url" : "https://memalign.github.io/p/personal-projects.html",
         "image" : "https://memalign.github.io/m/sitegenerator.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/personal-projects.html'>Personal Projects</a>\n</h2>\n</div>\n<img src=\"/m/sitegenerator.jpg\"></img>\n<div id='postdate'>Posted on 3/26/2020</div>\nI used to get in my own head about personal projects.<br />\n<br />\nI didn't want to waste time working on something that wouldn't have a big impact on other people or wouldn't make money.<br />\n<br />\nI eventually worked on a tool for myself, mostly just for fun, and I realized that my hobbies don't need to be productive or impactful. An enjoyable hobby is a fulfilling part of life.<br />\n<br />\nThis website is a hobby that I think will be fun yet not impactful. Maybe somebody will see a post some day and think, \"that's neat\". That's more than enough for me :)<br />\n<br />\n(Programming the <a href=\"https://github.com/memalign/memalign.github.io/blob/master/SiteGenerator/SiteGenerator.js\">site generator</a> has already been lots of fun)"
    },
    {
         "title" : "How to Program a Text Adventure",
         "date_published" : "2020-3-25T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/text-adventure.html",
         "url" : "https://memalign.github.io/p/text-adventure.html",
         "image" : "https://memalign.github.io/m/text-adventure.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/text-adventure.html'>How to Program a Text Adventure</a>\n</h2>\n</div>\n<img src=\"/m/text-adventure.jpg\"></img>\n<div id='postdate'>Posted on 3/25/2020</div>\nText adventures, also known as <a href=\"https://en.wikipedia.org/wiki/Interactive_fiction\">interactive fiction</a>, are fun text-only computer games that give me a lot of nostalgia.<br />\n<br />\nI recently read a cool website that shows how to incrementally write your own text adventure:<br />\n<br />\n<a href=\"https://helderman.github.io/htpataic/htpataic01.html\">https://helderman.github.io/htpataic/htpataic01.html</a><br />\n<br />\n(An older version can be found <a href=\"http://home.hccnet.nl/r.helderman/adventures/htpataic01.html\">here</a>)<br />\n<br />\n<br />\nI like this website because:<br />\n<br />\n- It's written simply and clearly<br />\n<br />\n- It exposes the reader to a bunch of useful concepts in a practical context<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Text adventures<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- C programming<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Simple data structures<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Text parsing<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- AWK and Domain-specific languages<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- make files<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Generating a graph using Graphviz<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Automated testing<br />\n<br />\n- It serves as a launching point for learning these topics in depth<br />\n<br />\n- It demonstrates how to incrementally build a more complicated program from a simple one that works<br />\n<br />\n- The subject is fun<br />\n<br />\n<br />\nThis tutorial can serve as a great example for other types of online textbooks."
    },
    {
         "title" : "RSS and Feedly",
         "date_published" : "2020-3-22T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/feedly.html",
         "url" : "https://memalign.github.io/p/feedly.html",
         "image" : "https://memalign.github.io/m/feedly.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/feedly.html'>RSS and Feedly</a>\n</h2>\n</div>\n<img src=\"/m/feedly.jpg\"></img>\n<div id='postdate'>Posted on 3/22/2020</div>\nI like to read news feeds to learn, find entertainment, and stay up-to-date on various topics.<br />\n<br />\nRSS feeds and Atom feeds are a great way to subscribe to news feeds. I used to use Google Reader and, after that service shut down, I moved to Feedly.<br />\n<br />\nFeedly is really cool! Especially for developers.<br />\n<br />\nOver winter break in 2019, I decided to build an app for myself to read news feeds (mainly so I could write smart filters to remove uninteresting entries). I did some cursory research into Feedly's developer support and I was pleasantly surprised by how easy the Feedly API is to adopt! Even though every website's RSS or Atom feed can have weird quirks, Feedly solves all of those problems for us. It's straightforward and quick to use the Feedly API to build a simple RSS reader.<br />\n<br />\n<br />\nHere's how I adopted the Feedly API (and how you can too):<br />\n<br />\n1. Become a Feedly user. Create an account using their website or app.<br />\n<br />\n2. Subscribe to some RSS feeds using their app<br />\n<br />\n3. Decide to build a custom news reader app to read these feeds<br />\n<br />\n4. Look at their developer documentation with an eye toward ease of adoption and whether all needed functionality exists<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Documentation is found here: <a href=\"https://developer.feedly.com/\">https://developer.feedly.com/</a><br />\n<br />\n5. Note the primitives needed to build an app:<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Get a list of news feeds with unread entries: <a href=\"https://developer.feedly.com/v3/markers/\">https://developer.feedly.com/v3/markers/</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Get information about a feed (I use this to get its icon): <a href=\"https://developer.feedly.com/v3/collections/\">https://developer.feedly.com/v3/collections/</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Get a list of news entries (including their content) for a given feed: <a href=\"https://developer.feedly.com/v3/streams/\">https://developer.feedly.com/v3/streams/</a><br />\n<br />\n6. Get access to their API. It's easy to start prototyping for your own use with a developer access token: <a href=\"https://developer.feedly.com/v3/developer/\">https://developer.feedly.com/v3/developer/</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Your developer access token can then be included in HTTP requests instead of a real OAuth token.<br />\n<br />\n7. Use <a href=\"https://en.wikipedia.org/wiki/CURL\">curl</a> to quickly prove that the developer access token works and the APIs return expected results<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Here's an example command:<br />\n<div id='code'>curl -H &#039;Authorization: OAuth YOUR_DEV_TOKEN&#039; https://cloud.feedly.com/v3/markers/counts</div>\n8. Think about how to organize your code into classes. Some useful classes might be: FeedlyDataSource, NewsFeed, NewsEntry.<br />\n<br />\n9. Use your platform's built-in APIs for making HTTP requests, parsing JSON, displaying a list of NewsEntrys to the user.<br />\n<br />\n10. As you build your app, add unit tests for parsing responses. One tip: save some curl results to files and inject those files into tests so your tests can work offline. Save to file like this:<br />\n<div id='code'>curl -H &#039;Authorization: OAuth YOUR_DEV_TOKEN&#039; https://cloud.feedly.com/v3/markers/counts &gt; /path/to/test_data_files/markersCountsResponse.txt</div>\nIf you need any help, please @ me on <a href=\"http://twitter.com/memalign\">Twitter</a>.<br />\n<br />\n<br />\nBonus:<br />\n<br />\n- You can subscribe to YouTube channels in Feedly<br />\n- I like to subscribe to HackerNews in Feedly instead of reading it on the website: <a href=\"https://news.ycombinator.com/rss\">https://news.ycombinator.com/rss</a>"
    },
    {
         "title" : "Welcome",
         "date_published" : "2019-12-26T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/this-website.html",
         "url" : "https://memalign.github.io/p/this-website.html",
         "image" : "https://memalign.github.io/m/shiba.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/this-website.html'>Welcome</a>\n</h2>\n</div>\n<img src=\"/m/shiba.jpg\"></img>\n<div id='postdate'>Posted on 12/26/2019</div>\nWelcome to memalign.github.io!<br />\n<br />\nI made this website so I have a place to post ideas and projects.<br />\n<br />\nI'm creating my own website instead of posting on Facebook or Twitter with the hope that it'll be more durable and discoverable long-term.<br />\n<br />\nI also hope that this website will be simpler than maintaining some kind of blog.<br />\n<br />\n<br />\nAbout me:<br />\n- I live in California. I moved here for a software engineering job after graduating college<br />\n- I'm married to a beautiful and intelligent woman who works as an attorney<br />\n- We have a Shiba Inu who brings us a lot of joy<br />\n"
    }
  ]
}
