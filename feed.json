{
   "version" : "https://jsonfeed.org/version/1",
   "title" : "memalign.github.io",
   "home_page_url" : "https://memalign.github.io/index.html",
   "feed_url" : "https://memalign.github.io/feed.json",
   "author" : {
      "url" : "https://twitter.com/memalign",
      "name" : "memalign"
   },
   "icon" : "https://memalign.github.io/apple-touch-icon.png",
   "favicon" : "https://memalign.github.io/favicon.ico",
   "items" : [
    {
         "title" : "Download Text Into Your Brain",
         "date_published" : "2020-3-28T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/tts-download-into-brain.html",
         "url" : "https://memalign.github.io/p/tts-download-into-brain.html",
         "image" : "https://memalign.github.io/m/matrix-kung-fu.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/tts-download-into-brain.html'>Download Text Into Your Brain</a>\n</h2>\n</div>\n<img src=\"/m/matrix-kung-fu.jpg\"></img>\n<div id='postdate'>Posted on 3/28/2020</div>\nIn the internet age, there's so much interesting information to absorb: academic papers, blog posts, articles, books, reddit posts, text messages, emails, etc.<br />\n<br />\nA lot of this content is in text form so I'm reading all the time.<br />\n<br />\nA while ago, I discovered that the iPhone has a built-in <a href=\"https://en.wikipedia.org/wiki/Speech_synthesis\">text-to-speech (TTS)</a> accessibility feature that can speak text the user highlights. At the time of writing, you can turn this on in Settings->Accessibility->Spoken Content->Speak Selection. This will cause a Speak button to appear when you select text. You can crank up the speed of the speech too.<br />\n<br />\nI started using this feature to listen to paragraphs while doing things that occupy eyes and hands: driving, washing dishes, exercising. I quickly got used to listening to this sped up Siri voice.<br />\n<br />\nI was blown away by how much more quickly I could read this way. When I'm reading with my eyes, I'll often get temporarily stuck trying to understand specific wording or fine details. I realized that this is unnecessarily slowing me down. When listening, I'm forced to keep a quick and steady pace. For wording I would've gotten stuck on, I either figure it out from context or move on.<br />\n<br />\nUsing this technique feels like downloading information directly into your brain.<br />\n<br />\nManually selecting text can become onerous so I've built some tools that help me more easily read websites and eBooks this way.<br />\n<br />\nI'm using a combination of the <a href=\"https://apps.apple.com/us/app/shortcuts/id1462947752\">Shortcuts app</a> and the <a href=\"https://apps.apple.com/us/app/scriptable/id1405459188\">Scriptable app</a>.<br />\n<br />\nThe Shortcuts app provides easy ways to access system functionality, including speaking text and getting text from a website.<br />\n<br />\nScriptable lets the user write programs in JavaScript that call into iOS APIs and make use of Shortcuts.<br />\n<br />\n<br />\nTo use these yourself:<br />\n<br />\n1. Install the apps<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- <a href=\"https://apps.apple.com/us/app/shortcuts/id1462947752\">Shortcuts</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;- <a href=\"https://apps.apple.com/us/app/scriptable/id1405459188\">Scriptable</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n2. Install/recreate these Shortcuts:<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- <a href=\"https://www.icloud.com/shortcuts/992821652da741e2a3993a2dce37f4b2\">Get Website Text</a><br />\n<img src=\"/m/get-website-text.png\"></img><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- <a href=\"https://www.icloud.com/shortcuts/a3f88b742ada4a9f835e8a734bdfb907\">SpeakText</a><br />\n<img src=\"/m/speaktext.png\"></img><br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- <a href=\"https://www.icloud.com/shortcuts/80a6e542803448329e110094bfee2146\">Dictate</a><br />\n<img src=\"/m/dictate.png\"></img><br />\n<br />\n3. In Scriptable, create a new script called Speak Web Content. Paste in this code:<br />\n<br />\n<div id='code'>// Made by @memalign - 1/1/19<br />\n// Copyright 2019<br />\n// Run from a share sheet to speak shared text<br />\n// I call over to a shortcut because the Speech support in Scriptable doesn&#039;t let me configure the speaking speed<br />\n// Needs to be run in the app (instead of in the extension) so x-callback-url works<br />\n<br />\n<br />\n// let urls = [ &quot;https://support.apple.com/guide/shortcuts/use-x-callback-url-apdcd7f20a6f/ios&quot; ]<br />\nlet urls = args.urls<br />\n<br />\n<br />\nfor (url of urls) {<br />\n&nbsp;&nbsp;console.log(url)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// Without this alert, Scriptable got confused and would abort when the callback URL returned focus to Scriptable from Shortcuts<br />\n&nbsp;&nbsp;let alert = new Alert()<br />\n&nbsp;&nbsp;alert.title = &quot;Speak Web Content&quot;<br />\n&nbsp;&nbsp;alert.message = &quot;Speak content for &quot; + url + &quot; ?&quot;<br />\n&nbsp;&nbsp;alert.addAction(&quot;Speak it!&quot;)<br />\n&nbsp;&nbsp;alert.addAction(&quot;Cancel&quot;)<br />\n&nbsp;&nbsp;if (await alert.present() == 1) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// Get Website Text: https://www.icloud.com/shortcuts/992821652da741e2a3993a2dce37f4b2<br />\n&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;Get Website Text&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;input&quot;, &quot;text&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;text&quot;, url)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let result = await callbackURL.open()<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;result: &quot; + result.result)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;await showWebViewWithText(result.result)<br />\n&nbsp;&nbsp;<br />\n}<br />\n<br />\n<br />\nasync function showWebViewWithText(text) {<br />\n&nbsp;&nbsp;let webView = new WebView()<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let html = &quot;&lt;table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let lines = text.split(&quot;\n&quot;)<br />\n&nbsp;&nbsp;let count = 0<br />\n&nbsp;&nbsp;for (line of lines) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;input type=&#039;checkbox&#039; id=&#039;line&quot;+count+&quot;&#039; value=&#039;&quot;+htmlEncode(line)+&quot;&#039; checked&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;input type=&#039;button&#039; value=&#039;uncheck above&#039; onclick=&#039;uncheckAbove(&quot;+count+&quot;)&#039;&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;br /&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;input type=&#039;button&#039; value=&#039;uncheck below&#039; onclick=&#039;uncheckBelow(&quot;+count+&quot;)&#039;&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += htmlEncode(line)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;count++<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += `<br />\n&nbsp;&nbsp;&lt;script&gt;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;document.body.style.zoom = 4.0<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function uncheckAbove(index) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;for (let i = 0; i &lt;= index; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;line&quot;+i).checked = false;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function uncheckBelow(index) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;for (let i = index; i &lt; ${count}; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;line&quot;+i).checked = false;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function getSelectedText() {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let text = &quot;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;for (let i = 0; i &lt; ${count}; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let checkbox = document.getElementById(&quot;line&quot;+i)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (checkbox.checked) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += &quot;\\n&quot; + checkbox.value<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return text<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&lt;/script&gt;<br />\n&nbsp;&nbsp;`<br />\n&nbsp;&nbsp;<br />\n<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;await webView.loadHTML(html)<br />\n&nbsp;&nbsp;await webView.present()<br />\n&nbsp;&nbsp;let selectedText = await webView.evaluateJavaScript(&quot;getSelectedText()&quot;)<br />\n&nbsp;&nbsp;console.log(&quot;selected text:\n&quot; + selectedText)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;speakText(selectedText)<br />\n}<br />\n<br />\n<br />\nfunction speakText(text) {<br />\n&nbsp;&nbsp;// SpeakText: https://www.icloud.com/shortcuts/a3f88b742ada4a9f835e8a734bdfb907<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;SpeakText&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;input&quot;, &quot;text&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;text&quot;, text)<br />\n&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;callbackURL.open()<br />\n}<br />\n<br />\n// HTML encoding utilities<br />\n// Main logic from https://ourcodeworld.com/articles/read/188/encode-and-decode-html-entities-using-pure-javascript<br />\n<br />\nfunction htmlEncode(str) {<br />\n&nbsp;&nbsp;var buf = [];<br />\n			<br />\n&nbsp;&nbsp;for (var i=str.length-1;i&gt;=0;i--) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;buf.unshift([&#039;&amp;#&#039;, str[i].charCodeAt(), &#039;;&#039;].join(&#039;&#039;));<br />\n&nbsp;&nbsp;}<br />\n			<br />\n&nbsp;&nbsp;return buf.join(&#039;&#039;);<br />\n}<br />\n<br />\nfunction htmlDecode(str) {<br />\n&nbsp;&nbsp;return str.replace(/&amp;#(\d+);/g, function(match, dec) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return String.fromCharCode(dec);<br />\n&nbsp;&nbsp;});<br />\n}</div>\n4. Configure the script settings:<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Always Run in App = on<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Share Sheet Inputs = URLs<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n5. To use this script:<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- View a website in Safari<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Tap the Share button<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Tap \"Run Script\"<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Tap \"Speak Web Content\"<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Accept prompts asking for permission<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Uncheck any text that you don't want the script to read. Usually an article is in the middle of a webpage so it's useful to uncheck the top portion and bottom portion of a webpage which include menus, ads, user comments, or related article links.<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Tap Close<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- The content will now be spoken!<br />\n<br />\n6. In Scriptable, create a new script called Read eBook. Paste in this code:<br />\n<br />\n<div id='code'>// Made by @memalign - 1/1/19<br />\n// Copyright 2019<br />\n<br />\n// First, convert eBook to text using http://www.convertfiles.com/convert/ebook/EPUB-to-TXT.html<br />\n// Then, using Files, save the result to Scriptable&#039;s space<br />\n<br />\n<br />\nlet fm = FileManager.iCloud()<br />\n<br />\nlet fullBookPath = fm.documentsDirectory() + &quot;/your-book-filename.txt&quot;<br />\n<br />\n<br />\n// File format:<br />\n// currentLineNumber\n   - integer, offset into full book<br />\nlet inProgressPath = fullBookPath + &quot;.inProgress.txt&quot;<br />\n<br />\nfm.downloadFileFromiCloud(inProgressPath)<br />\nif (!fm.fileExists(inProgressPath)) {<br />\n&nbsp;&nbsp;console.log(&quot;Creating in progress copy&quot;)<br />\n&nbsp;&nbsp;fm.writeString(inProgressPath, &quot;0\n&quot;)<br />\n}<br />\n<br />\n<br />\nlet lines = fm.readString(fullBookPath).split(&quot;\n&quot;)<br />\nlet lineOffset = 0<br />\n<br />\nlet fullBookLineCount = lines.length<br />\n<br />\nconst DEFAULT_APPROX_WORDS_PER_CHUNK = 1200<br />\n<br />\nlet wordsPerChunk = DEFAULT_APPROX_WORDS_PER_CHUNK<br />\n<br />\nlet handsFreeMode = false<br />\n<br />\ndo {<br />\n<br />\n&nbsp;&nbsp;let progress = fm.readString(inProgressPath)<br />\n&nbsp;&nbsp;if (!progress) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;lineOffset = parseInt((progress.split(&quot;\n&quot;))[0])<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// Pick enough lines to have enough words<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let lineCount = findNumLinesToAchieveWordCount(lines, lineOffset, wordsPerChunk)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;Showing chunk of &quot; + lineCount + &quot; lines with &quot; + (lines.length-lineCount) + &quot; remaining&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let chunkStr = stringForNumLines(lines, lineOffset, lineCount)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// console.log(chunkStr)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let action = &quot;read&quot;<br />\n<br />\n<br />\n&nbsp;&nbsp;if (handsFreeMode) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let voiceCommand = await getDictatedText()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let shouldStop = voiceCommand.match(/stop/i)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (shouldStop) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action = &quot;stop&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;} else {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let actionAndWPC = await showWebViewWithText(chunkStr, lineOffset, fullBookLineCount, wordsPerChunk)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;action = actionAndWPC[0]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;wordsPerChunk = actionAndWPC[1]<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (action === &quot;stop&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (action === &quot;start over&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let alert = new Alert()<br />\n&nbsp;&nbsp;&nbsp;&nbsp;alert.title = &quot;Start Over&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;alert.message = &quot;Are you sure you want to forget all progress? This cannot be undone.&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;alert.addDestructiveAction(&quot;Start Over&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;alert.addAction(&quot;Cancel&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (await alert.present() == 0) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Starting over!&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fm.remove(inProgressPath)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (action === &quot;hands free&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;action = &quot;read&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;handsFreeMode = true<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (action === &quot;read&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;await speakText(chunkStr)<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;if (action === &quot;previous&quot;) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;lineOffset -= findNumLinesToGoBack(lines, lineOffset, wordsPerChunk)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;lineCount = 0<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;updateInProgressFile(lineOffset+lineCount, fullBookLineCount, inProgressPath)<br />\n<br />\n} while (true)<br />\n<br />\n<br />\n<br />\nfunction updateInProgressFile(newLineOffset, fullBookLineCount, inProgressPath) {<br />\n&nbsp;&nbsp;if (newLineOffset &gt;= fullBookLineCount) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;No more lines remain!&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;fm.remove(inProgressPath)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// Write to a temp file<br />\n&nbsp;&nbsp;let tempFile = fm.documentsDirectory() + &quot;/temp-book.txt&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;fm.writeString(tempFile, newLineOffset+&quot;\n&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;Replacing &quot; + inProgressPath)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;// Move the temp file to final path<br />\n&nbsp;&nbsp;fm.remove(inProgressPath) // seems to be required since move errors if the destination file exists (contradicting the docs)<br />\n&nbsp;&nbsp;fm.move(tempFile, inProgressPath)<br />\n}<br />\n<br />\nasync function showWebViewWithText(text, lineOffset, totalLineCount, wordsPerChunk) {<br />\n&nbsp;&nbsp;let webView = new WebView()<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let html = &quot;&lt;html&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;body&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += `<br />\n&nbsp;&nbsp;&lt;script&gt;<br />\n&nbsp;&nbsp;document.body.style.zoom = 4.0<br />\n&nbsp;&nbsp;&lt;/script&gt;<br />\n&nbsp;&nbsp;`<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;center&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;stop&#039; onclick=&#039;setAction(\&quot;stop\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;skip&#039; onclick=&#039;setAction(\&quot;skip\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;read&#039; onclick=&#039;setAction(\&quot;read\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;hands free&#039; onclick=&#039;setAction(\&quot;hands free\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;text&#039; size=&#039;5&#039; style=&#039;text-align:center;&#039; id=&#039;desiredAction&#039; value=&#039;read&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;text&#039; size=&#039;5&#039; style=&#039;text-align:center;&#039; id=&#039;wordsPerChunk&#039; value=&#039;&quot;+wordsPerChunk+&quot;&#039;&gt; words&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;br /&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let linesRead = lineOffset<br />\n&nbsp;&nbsp;html += &quot;Progress: &quot; + linesRead + &quot;/&quot; + totalLineCount + &quot; = &quot; + (100*linesRead/totalLineCount).toFixed(1) + &quot;%&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/center&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let lines = text.split(&quot;\n&quot;)<br />\n&nbsp;&nbsp;let count = 0<br />\n&nbsp;&nbsp;for (line of lines) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />\n<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += htmlEncode(line)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;count++<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;br /&gt;&lt;br /&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;center&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;previous&#039; onclick=&#039;setAction(\&quot;previous\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;start over&#039; onclick=&#039;setAction(\&quot;start over\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />\n&nbsp;&nbsp;html += &quot;&lt;/center&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += `<br />\n&nbsp;&nbsp;&lt;script&gt;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function setAction(str) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;desiredAction&quot;).value = str<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function getDesiredAction() {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let actionInput = document.getElementById(&quot;desiredAction&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return actionInput.value<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;function getWordsPerChunk() {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let wpcInput = document.getElementById(&quot;wordsPerChunk&quot;)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return wpcInput.value<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&lt;/script&gt;<br />\n&nbsp;&nbsp;`<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;html += &quot;&lt;/body&gt;&lt;/html&gt;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;await webView.loadHTML(html)<br />\n&nbsp;&nbsp;await webView.present()<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let selectedAction = await webView.evaluateJavaScript(&quot;getDesiredAction()&quot;)<br />\n&nbsp;&nbsp;console.log(&quot;action:\n&quot; + selectedAction)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let wpc = await webView.evaluateJavaScript(&quot;getWordsPerChunk()&quot;)<br />\n&nbsp;&nbsp;console.log(&quot;wpc: &quot; + wpc)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return [selectedAction, wpc]<br />\n}<br />\n<br />\n<br />\n<br />\nfunction stringForNumLines(lines, lineOffset, numLines) {<br />\n&nbsp;&nbsp;let str = &quot;&quot;<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;for (let i = 0; i &lt; numLines; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;str += &quot;\n&quot; + lines[i+lineOffset];<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return str<br />\n}<br />\n<br />\n<br />\nfunction findNumLinesToAchieveWordCount(lines, lineOffset, desiredWordCount) {<br />\n&nbsp;&nbsp;let lineCount = 0<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let accumWC = 0<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;for (let i = lineOffset; i &lt; lines.length; i++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let line = lines[i]<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let lineWC = line.split(&quot; &quot;).length<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// Don&#039;t far exceed word count<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (i &gt; 0 &amp;&amp; lineWC &gt; 2*desiredWordCount) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;lineCount++<br />\n&nbsp;&nbsp;&nbsp;&nbsp;accumWC += lineWC<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (accumWC &gt;= desiredWordCount) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return lineCount<br />\n}<br />\n<br />\n<br />\n// Instead of making a custom reversed version of findNumLinesToAchieveWordCount, this is a more complex method that should work with any future implementation of that method<br />\nfunction findNumLinesToGoBack(lines, lineOffset, wordsPerChunk) {<br />\n&nbsp;&nbsp;let numToGoBack = 0<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;for (numToGoBack = 0; numToGoBack &lt;= lineOffset; numToGoBack++) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let numLinesWeWouldPick = findNumLinesToAchieveWordCount(lines, lineOffset-numToGoBack, wordsPerChunk)<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// if our offset were lineOffset-numToGoBack<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// we would show numLinesWeWouldPick lines<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// if (lineOffset-numToGoBack) + numLinesWeWouldPick is equal to our current offset then that&#039;s the previous offset we had<br />\n&nbsp;&nbsp;&nbsp;&nbsp;// if that sum is less than our current offset then it would be going back too far<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;let testOffset = (lineOffset-numToGoBack) + numLinesWeWouldPick<br />\n&nbsp;&nbsp;&nbsp;&nbsp;<br />\n&nbsp;&nbsp;&nbsp;&nbsp;if (testOffset &lt;= lineOffset) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />\n&nbsp;&nbsp;&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;}<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;Going back by &quot; + numToGoBack + &quot; lines&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return numToGoBack<br />\n}<br />\n<br />\n<br />\n// I call over to a shortcut because the Speech support in Scriptable doesn&#039;t let me configure the speaking speed<br />\n// https://www.icloud.com/shortcuts/a3f88b742ada4a9f835e8a734bdfb907<br />\nasync function speakText(text) {<br />\n&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;SpeakText&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;input&quot;, &quot;text&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;text&quot;, text)<br />\n&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let result = await callbackURL.open()<br />\n&nbsp;&nbsp;console.log(&quot;speakText result: &quot; + result)<br />\n}<br />\n<br />\n// I call over to a shortcut because the Dictation support in Scriptable requires touch interaction<br />\n// https://www.icloud.com/shortcuts/80a6e542803448329e110094bfee2146<br />\nasync function getDictatedText() {<br />\n&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />\n&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;Dictate&quot;)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;let result = await callbackURL.open()<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;console.log(&quot;dictated text: &quot; + result.result)<br />\n&nbsp;&nbsp;<br />\n&nbsp;&nbsp;return result.result<br />\n}<br />\n<br />\n<br />\n// HTML encoding utilities<br />\n// Main logic from https://ourcodeworld.com/articles/read/188/encode-and-decode-html-entities-using-pure-javascript<br />\n<br />\nfunction htmlEncode(str) {<br />\n&nbsp;&nbsp;var buf = [];<br />\n			<br />\n&nbsp;&nbsp;for (var i=str.length-1;i&gt;=0;i--) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;buf.unshift([&#039;&amp;#&#039;, str[i].charCodeAt(), &#039;;&#039;].join(&#039;&#039;));<br />\n&nbsp;&nbsp;}<br />\n			<br />\n&nbsp;&nbsp;return buf.join(&#039;&#039;);<br />\n}<br />\n<br />\nfunction htmlDecode(str) {<br />\n&nbsp;&nbsp;return str.replace(/&amp;#(\d+);/g, function(match, dec) {<br />\n&nbsp;&nbsp;&nbsp;&nbsp;return String.fromCharCode(dec);<br />\n&nbsp;&nbsp;});<br />\n}</div>\n7. You'll need to save a long text file (using a converted eBook works great) into Scriptable's directory using the Files app. Then, you'll need to replace \"your-book-filename.txt\" with the appropriate filename.<br />\n<br />\n8. Run the script<br />\n<br />\n9. Tap a mode (stop, skip, read, hands free) or keep the default (read) and then tap Close<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- stop: stop the script<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- skip: skip this page without reading it aloud<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- read: read this page, advance to the next one, and reprompt<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- hands free: read this page, then give the user a chance to say \"continue\" or \"stop\". If the user says \"continue\" the next page will automatically be read aloud. If the user says \"stop\", the script will stop running. This is especially useful when driving or washing dishes!<br />\n<br />\n<br />\nHopefully somebody will find these tools useful or inspiring!<br />\n"
    },
    {
         "title" : "Source Control",
         "date_published" : "2020-3-27T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/source-control.html",
         "url" : "https://memalign.github.io/p/source-control.html",
         "image" : "https://memalign.github.io/m/2560px-Git-logo-black.svg.png",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/source-control.html'>Source Control</a>\n</h2>\n</div>\n<img src=\"/m/2560px-Git-logo-black.svg.png\"></img>\n<div id='postdate'>Posted on 3/27/2020</div>\nIt's smart to have backups of important information. The best way to have backups for programming projects is <a href=\"https://en.wikipedia.org/wiki/Version_control\">source control</a>.<br />\n<br />\nI've used source control (<a href=\"https://en.wikipedia.org/wiki/Git\">git</a>, specifically) for personal programming projects, professional software development, journals, and websites. It works well for anything text-based.<br />\n<br />\nSource control is super useful because it tracks incremental history of changes. That makes it easy to hone in on when a change (good or bad) was made with some context of why. That's useful when tracking down a nasty bug! It's also useful when researching why specific design decisions were made.<br />\n<br />\n<br />\nSome helpful options to get started with source control:<br />\n<br />\n- Use <a href=\"https://github.com\">https://github.com</a> to create and host repositories for free<br />\n<br />\n- Another free option is <a href=\"https://bitbucket.org/product\">Bitbucket</a><br />\n<br />\n- Create your own local git repository that lives directly on your computer. Learn more <a href=\"https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Getting-and-Creating-Projects\">here</a>.<br />\n<br />\n<br />\nBecause code can often be reused, I recommend using git for nearly all the code you ever write. It's even useful to have a git repository that's just for small utilities or toying around. Use a local git repository if you want to keep it private.<br />\n<br />\nYou can find my own public GitHub repositories <a href=\"https://github.com/memalign/\">here</a>."
    },
    {
         "title" : "Personal Projects",
         "date_published" : "2020-3-26T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/personal-projects.html",
         "url" : "https://memalign.github.io/p/personal-projects.html",
         "image" : "https://memalign.github.io/m/sitegenerator.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/personal-projects.html'>Personal Projects</a>\n</h2>\n</div>\n<img src=\"/m/sitegenerator.jpg\"></img>\n<div id='postdate'>Posted on 3/26/2020</div>\nI used to get in my own head about personal projects.<br />\n<br />\nI didn't want to waste time working on something that wouldn't have a big impact on other people or wouldn't make money.<br />\n<br />\nI eventually worked on a tool for myself, mostly just for fun, and I realized that my hobbies don't need to be productive or impactful. An enjoyable hobby is a fulfilling part of life.<br />\n<br />\nThis website is a hobby that I think will be fun yet not impactful. Maybe somebody will see a post some day and think, \"that's neat\". That's more than enough for me :)<br />\n<br />\n(Programming the <a href=\"https://github.com/memalign/memalign.github.io/blob/master/SiteGenerator/SiteGenerator.js\">site generator</a> has already been lots of fun)"
    },
    {
         "title" : "How to Program a Text Adventure",
         "date_published" : "2020-3-25T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/text-adventure.html",
         "url" : "https://memalign.github.io/p/text-adventure.html",
         "image" : "https://memalign.github.io/m/text-adventure.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/text-adventure.html'>How to Program a Text Adventure</a>\n</h2>\n</div>\n<img src=\"/m/text-adventure.jpg\"></img>\n<div id='postdate'>Posted on 3/25/2020</div>\nText adventures, also known as <a href=\"https://en.wikipedia.org/wiki/Interactive_fiction\">interactive fiction</a>, are fun text-only computer games that give me a lot of nostalgia.<br />\n<br />\nI recently read a cool website that shows how to incrementally write your own text adventure:<br />\n<br />\n<a href=\"https://helderman.github.io/htpataic/htpataic01.html\">https://helderman.github.io/htpataic/htpataic01.html</a><br />\n<br />\n(An older version can be found <a href=\"http://home.hccnet.nl/r.helderman/adventures/htpataic01.html\">here</a>)<br />\n<br />\n<br />\nI like this website because:<br />\n<br />\n- It's written simply and clearly<br />\n<br />\n- It exposes the reader to a bunch of useful concepts in a practical context<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Text adventures<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- C programming<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Simple data structures<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Text parsing<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- AWK and Domain-specific languages<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- make files<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Generating a graph using Graphviz<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Automated testing<br />\n<br />\n- It serves as a launching point for learning these topics in depth<br />\n<br />\n- It demonstrates how to incrementally build a more complicated program from a simple one that works<br />\n<br />\n- The subject is fun<br />\n<br />\n<br />\nThis tutorial can serve as a great example for other types of online textbooks."
    },
    {
         "title" : "RSS and Feedly",
         "date_published" : "2020-3-22T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/feedly.html",
         "url" : "https://memalign.github.io/p/feedly.html",
         "image" : "https://memalign.github.io/m/feedly.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/feedly.html'>RSS and Feedly</a>\n</h2>\n</div>\n<img src=\"/m/feedly.jpg\"></img>\n<div id='postdate'>Posted on 3/22/2020</div>\nI like to read news feeds to learn, find entertainment, and stay up-to-date on various topics.<br />\n<br />\nRSS feeds and Atom feeds are a great way to subscribe to news feeds. I used to use Google Reader and, after that service shut down, I moved to Feedly.<br />\n<br />\nFeedly is really cool! Especially for developers.<br />\n<br />\nOver winter break in 2019, I decided to build an app for myself to read news feeds (mainly so I could write smart filters to remove uninteresting entries). I did some cursory research into Feedly's developer support and I was pleasantly surprised by how easy the Feedly API is to adopt! Even though every website's RSS or Atom feed can have weird quirks, Feedly solves all of those problems for us. It's straightforward and quick to use the Feedly API to build a simple RSS reader.<br />\n<br />\n<br />\nHere's how I adopted the Feedly API (and how you can too):<br />\n<br />\n1. Become a Feedly user. Create an account using their website or app.<br />\n<br />\n2. Subscribe to some RSS feeds using their app<br />\n<br />\n3. Decide to build a custom news reader app to read these feeds<br />\n<br />\n4. Look at their developer documentation with an eye toward ease of adoption and whether all needed functionality exists<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Documentation is found here: <a href=\"https://developer.feedly.com/\">https://developer.feedly.com/</a><br />\n<br />\n5. Note the primitives needed to build an app:<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Get a list of news feeds with unread entries: <a href=\"https://developer.feedly.com/v3/markers/\">https://developer.feedly.com/v3/markers/</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Get information about a feed (I use this to get its icon): <a href=\"https://developer.feedly.com/v3/collections/\">https://developer.feedly.com/v3/collections/</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Get a list of news entries (including their content) for a given feed: <a href=\"https://developer.feedly.com/v3/streams/\">https://developer.feedly.com/v3/streams/</a><br />\n<br />\n6. Get access to their API. It's easy to start prototyping for your own use with a developer access token: <a href=\"https://developer.feedly.com/v3/developer/\">https://developer.feedly.com/v3/developer/</a><br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Your developer access token can then be included in HTTP requests instead of a real OAuth token.<br />\n<br />\n7. Use <a href=\"https://en.wikipedia.org/wiki/CURL\">curl</a> to quickly prove that the developer access token works and the APIs return expected results<br />\n&nbsp;&nbsp;&nbsp;&nbsp;- Here's an example command:<br />\n<div id='code'>curl -H &#039;Authorization: OAuth YOUR_DEV_TOKEN&#039; https://cloud.feedly.com/v3/markers/counts</div>\n8. Think about how to organize your code into classes. Some useful classes might be: FeedlyDataSource, NewsFeed, NewsEntry.<br />\n<br />\n9. Use your platform's built-in APIs for making HTTP requests, parsing JSON, displaying a list of NewsEntrys to the user.<br />\n<br />\n10. As you build your app, add unit tests for parsing responses. One tip: save some curl results to files and inject those files into tests so your tests can work offline. Save to file like this:<br />\n<div id='code'>curl -H &#039;Authorization: OAuth YOUR_DEV_TOKEN&#039; https://cloud.feedly.com/v3/markers/counts &gt; /path/to/test_data_files/markersCountsResponse.txt</div>\nIf you need any help, please @ me on <a href=\"http://twitter.com/memalign\">Twitter</a>.<br />\n<br />\n<br />\nBonus:<br />\n<br />\n- You can subscribe to YouTube channels in Feedly<br />\n- I like to subscribe to HackerNews in Feedly instead of reading it on the website: <a href=\"https://news.ycombinator.com/rss\">https://news.ycombinator.com/rss</a>"
    },
    {
         "title" : "Welcome",
         "date_published" : "2019-12-26T00:00:00-08:00",
         "id" : "https://memalign.github.io/p/this-website.html",
         "url" : "https://memalign.github.io/p/this-website.html",
         "image" : "https://memalign.github.io/m/shiba.jpg",
         "author" : {
            "name" : "memalign"
         },
         "content_html" : "\n<div id='header'>\n<h2>\n<a href='https://memalign.github.io/p/this-website.html'>Welcome</a>\n</h2>\n</div>\n<img src=\"/m/shiba.jpg\"></img>\n<div id='postdate'>Posted on 12/26/2019</div>\nWelcome to memalign.github.io!<br />\n<br />\nI made this website so I have a place to post ideas and projects.<br />\n<br />\nI'm creating my own website instead of posting on Facebook or Twitter with the hope that it'll be more durable and discoverable long-term.<br />\n<br />\nI also hope that this website will be simpler than maintaining some kind of blog.<br />\n<br />\n<br />\nAbout me:<br />\n- I live in California. I moved here for a software engineering job after graduating college<br />\n- I'm married to a beautiful and intelligent woman who works as an attorney<br />\n- We have a Shiba Inu who brings us a lot of joy<br />\n"
    }
  ]
}
