Title: FormulaGraph
Date: 8/4/2021

[Image:/m/formulagraph.jpg]

I'm excited to introduce [Link:/m/formulagraph/index.html]FormulaGraph[/Link], a graphing calculator for general formulas (not just functions of x)!

Whereas many graphing calculators require an equation like [Link:/m/formulagraph/index.html?f1(x,t)=y%20=%20sqrt(1-x%5E2)&v1=true&f2(x,t)=y%20=%20-sqrt(1-x%5E2)&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]y = sqrt(1 - x^2)[/Link], FormulaGraph can handle formulas like [Link:/m/formulagraph/index.html?f1(x,t)=y%5E2%20+%20x%5E2%20=%201&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]y^2 + x^2 = 1[/Link]. You don't have to solve for y to use FormulaGraph.

Here's what else it can do:

- Polar formulas in terms of r and theta, such as [Link:/m/formulagraph/index.html?f1(x,t)=r%20=%202*sin(2*theta)&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]r = 2*sin(2*theta)[/Link]
- Animate based on time t: [Link:/m/formulagraph/index.html?f1(x,t)=y=%20x%5E(t%254)&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=false]y = x^(t % 4)[/Link]
- Inequalities: [Link:/m/formulagraph/index.html?f1(x,t)=x%5E100%20+%20y%5E100%20%3C=%202&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]x^100 + y^100 <= 2[/Link]
- Handle panning and zooming using mouse and touch/pinch
- Share links


While FormulaGraph lacks features other graphing calculators have (such as precisely calculating y- and x-intercepts), it has some unique benefits:
(I introduced this list of calculators [Link:/p/draw-shapes.html]previously[/Link])

- TI-83 Plus
  - Features only in FormulaGraph: interactive graphs, animate with time, available in any web browser, graph formulas (not just functions)

- WolframAlpha
  - Features only in FormulaGraph: interactive graphs, animate with time
  - WolframAlpha won't graph some formulas, e.g. [Link:/m/formulagraph/index.html?f1(x,t)=y%5E2+x%5Ex=1&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]y^2+x^x=1[/Link] and [Link:/m/formulagraph/index.html?f1(x,t)=x%5Ey=x%5Ex%5Ex%5Ex%5Ex%5Ex&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]x^y=x^x^x^x^x^x[/Link]

- Meta-Calculator
  - Features only in FormulaGraph: interactive graphs, animate with time, graph formulas (not just functions), modulo operator

- FooPlot
  - Features only in FormulaGraph: animate with time, graph formulas (not just functions), graph inequalities

- GeoGebra Graphing Calculator
  - Features only in FormulaGraph: available in any web browser, graph polar formulas, modulo operator
  - GeoGebra Graphing Calculator won't graph some formulas, e.g. [Link:/m/formulagraph/index.html?f1(x,t)=x*y*(x-y)*(x+y)%20%3C%201&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]x*y*(x-y)*(x+y) < 1[/Link]

- Desmos
  - Desmos is really great. It's the best graphing calculator in this list. It can handle formulas, animations, polar formulas, and more!
  - One thing FormulaGraph handles better: Desmos doesn't support polar equations which aren't linear in r. Example: [Link:/m/formulagraph/index.html?f1(x,t)=r%5E2=cos(theta)&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]r^2 = cos(theta)[/Link]
  - Also, FormulaGraph is available in any web browser whereas Desmos is an app

- NumWorks Graphing Calculator
  - Features only in FormulaGraph: interactive graphs, convenient UI, animate with time, available in any web browser, graph formulas (not just functions), graph polar formulas, graph inequalities

- Relplot
  - Features only in FormulaGraph: interactive graphs, animate with time
  - Relplot has some graphing correctness bugs. Examples: [Link:/m/formulagraph/index.html?f1(x,t)=y=x%252&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]y = x mod 2[/Link], [Link:/m/formulagraph/index.html?f1(x,t)=y=x%5Ex&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]y = x^x[/Link], [Link:/m/formulagraph/index.html?f1(x,t)=y%5Ey=x%5Ex&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]y^y = x^x[/Link], [Link:/m/formulagraph/index.html?f1(x,t)=r=2*sin(4*theta)&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]r = 2*sin(4*theta)[/Link], [Link:/m/formulagraph/index.html?f1(x,t)=r=theta&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]r = theta[/Link] covers a small range of theta values
  - I'm reporting these bugs and I hope they get fixed!

- Graphtoy
  - Features only in FormulaGraph: graph formulas (not just functions), graph polar formulas, graph inequalities
  - Graphtoy has visual glitches (missing segments) when drawing circles and other similar shapes (e.g. [Link:/m/formulagraph/index.html?f1(x,t)=y=sqrt(1-x%5E2)&v1=true&f2(x,t)=y=-sqrt(1-x%5E2)&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]y = sqrt(1-x^2) and y = -sqrt(1-x^2)[/Link])

- Bonus: FormulaGraph has tons of test coverage, including checks that graphs render accurately. You can run the tests [Link:/m/formulagraph/unitTests.html]here[/Link]. Beware: they take ~1 minute to run!


FormulaGraph's origins:

This is a hobby project I made by combining code and ideas from other peoples' cool projects.

It all started with [Link:https://www.cs.cornell.edu/w8/~andru/relplot/]Relplot[/Link], a project by Cornell's [Link:https://www.cs.cornell.edu/andru/]Andrew Myers[/Link]. In Professor Myers' functional programming class, we implemented formula plotters using interval arithmetic.

Over a decade later, I stumbled upon [Link:https://www.iquilezles.org]Inigo Quilez[/Link]'s [Link:https://graphtoy.com/]Graphtoy[/Link]. I had fun [Link:/p/shape-catalog.html]making shapes[/Link] and I thought it'd be even more fun to bring Relplot's general formula capabilities to Graphtoy's interactive UI.

So that's what I did: I ported Relplot's implementation of interval arithmetic from SML to JavaScript and spliced it into Graphtoy. I really appreciate all the work Professor Myers and Inigo did, especially publishing the source code for these projects.

There was one remaining difficulty: While Graphtoy uses JavaScript's built-in parser for inputted expressions, I needed to completely replace the implementations of operators like +, -, *, /, %. JavaScript doesn't have operator overloading so I needed my own expression parser.

That's where [Link:https://www.teamten.com/]Lawrence Kesteloot[/Link]'s awesome web implementation of [Link:https://github.com/lkesteloot/turbopascal]Turbo Pascal[/Link] ([Link:/m/turbopascal.zip]my backup[/Link]) comes in (see his interesting [Link:https://www.teamten.com/lawrence/projects/turbo_pascal_compiler/]writeup[/Link] about the project). I simply copied and reused his expression parser. Thank you Lawrence for building and sharing that passion project! I particularly like that this project has very few dependencies. And I was able to remove the few 3rd party dependencies it had in the portion of code I reused.

Key integration points where these projects are glued together:
- [Link:/m/formulagraph/relplot.js]relplot.js[/Link] - look for "MAIntervalMath" for a reimplementation of Relplot's interval arithmetic
- [Link:/m/formulagraph/graphtoy.js]graphtoy.js[/Link] - look for "Draw Relplot graphs" to see where Relplot was added to Graphtoy
- [Link:/m/formulagraph/utilities.js]utilities.js[/Link] - look for "_convertFormulaToFnSyntax" to see where the parser comes into play


Here are some miscellaneous things I've learned during this project:

- Some equations have solutions that are not clearly visible on most graphing calculators. For example, [Link:/m/formulagraph/index.html?f1(x,t)=y=x%5Ex&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]y = x^x[/Link] has valid solutions for negative values of x which are single points (e.g. (-1, -1)).

- New shapes:
  - [Link:/m/formulagraph/index.html?f1(x,t)=y%5E100%20+%20x%5E100%20%3C%201&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]Square[/Link]
  - [Link:/m/formulagraph/index.html?f1(x,t)=x%5E2+(y-(x%5E2)%5E(1/3))%5E2%20%3C%201&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]Heart[/Link]
  - [Link:/m/formulagraph/index.html?f1(x,t)=((x*y*(x-y)*(x+y)*(x%5E2+y%5E2-4))%5E2-1)%3C1&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]Crazy lotus[/Link]

- Modulo
  - Create [Link:/m/formulagraph/index.html?f1(x,t)=(x%5E2+y%5E2)%2540=1&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]concentric shapes[/Link] using modulo
  - Create [Link:/m/formulagraph/index.html?f1(x,t)=y%20=%20x%5E(t%20%25%203)&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=false]repeating animations[/Link] using modulo
  - There are different definitions of [Link:https://en.wikipedia.org/wiki/Modulo_operation]modulo[/Link] for negative numbers
    - Many programming languages implement modulo as "truncated division"
    - Desmos, Relplot, and Graphtoy use "floored division" so I use that in FormulaPlot too

- How to convert Cartesian coordinates to polar
  - Based on Relplot's implementation, I thought I just had to replace "r" with "sqrt(x^2+y^2)" and "theta" with "atan2(y, x)".
  - This turned out to be much harder than I expected in part because Relplot's polar coodinate support is incomplete (noted above in my comparison of FormulaGraph and Relplot).
  - After what I thought would be a 20 minute feature consumed several weekends, I'm reminded of the tongue-in-cheek [Link:https://twitter.com/Pinboard/status/761656824202276864]Programmers' Credo[/Link]: "We do these things not because they are easy, but because we thought they were going to be easy"
  - I solved this with 3 techniques: graph positive r and negative r (with theta shifted by pi), translate atan2's result range to [0, 2pi] (instead of [-pi, pi]), and iteratively render with theta += 2pi.

- Debugging an incorrect graph is similar to general debugging. Try to find the simplest case that reproduces the issue. I was relieved when a glitch in [Link:/m/formulagraph/index.html?f1(x,t)=y%20=%20(mod(floor(x),2))*(x-floor(x))+(1-mod(floor(x),2))*(-x-floor(-x))+(1-mod(floor(x),2))*(1-ceil(x-floor(x)))&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]y = (mod(floor(x),2))*(x-floor(x))+(1-mod(floor(x),2))*(-x-floor(-x))+(1-mod(floor(x),2))*(1-ceil(x-floor(x)))[/Link] reproduced in the far simpler [Link:/m/formulagraph/index.html?f1(x,t)=y=ceil(x-floor(x))&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]y = ceil(x-floor(x))[/Link].

- When using interval arithmetic to graph formulas, it's ok to return wide intervals when the input is wide as long as the result intervals converge as the inputs get smaller. I use this technique to avoid the incorrect vertical line segments some graphing calculators (including Relplot and Graphtoy) show for [Link:/m/formulagraph/index.html?f1(x,t)=y=floor(x)&v1=true&f2(x,t)=&v2=true&f3(x,t)=&v3=true&f4(x,t)=&v4=true&f5(x,t)=&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=true]y = floor(x)[/Link].


To conclude, here's an improved version of the [Link:/m/formulagraph/index.html?f1(x,t)=&v1=true&f2(x,t)=-(x-0.7)+sqrt(.1)+abs(sin(PI*-(x-0.7)))&v2=false&f3(x,t)=&v3=true&f4(x,t)=y%3C-floor(x)&v4=true&f5(x,t)=(y-(-((t%2519-8)-0.7)+sqrt(.1)+abs(sin(PI*-((t%2519-8)-0.7)))))%5E2+(x-(t%2519-8))%5E2%3C=0.1&v5=true&f6(x,t)=&v6=true&grid=true&coords=0,0,12&paused=false]bouncing ball animation[/Link] (original [Link:/p/bouncing-ball.html]here[/Link]).

Happy graphing :)
