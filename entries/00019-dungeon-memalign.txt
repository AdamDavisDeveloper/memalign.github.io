Title: Dungeon Memalign
Date: 11/30/2020

[Image:/m/dungeon.jpg]

"You open your eyes and find yourself in dimly lit surroundings. The air is damp and cool. The smell of mildew reminds you of an old basement. In your head, you label this location 'room ðŸ‘€ðŸ‘ƒ'.

Nearby, you see a small potion.

You can head east."

  - [Link:/m/dungeon/index.html]Dungeon Memalign[/Link]


I hinted at a new dungeon game in my [Link:/p/pacman-dungeon.html]post about Pac-Man[/Link]. Well this game is now complete!

This game, "Dungeon Memalign," puts the player in a maze and a daze. The player solves puzzles and battles their way through ever-stronger monsters. Are you clever and strong enough to win? [Link:/m/dungeon/index.html]Play here![/Link]

The game is beatable in ~15 minutes and should work well on phones, tablets, and computers. It'll save your progress if you get interrupted.


In the rest of this post, I'm going to talk about how I wrote this game, the structure of the source code, and ideas for other games that can be built on the same foundations.


How I approached writing this game:

- I talked about my long-time desire to built my own text-based game in a [Link:/p/pacman-dungeon.html]previous post[/Link].

- I brainstormed about potential stories and even came up with a fairly rich idea

- I created a local [Link:/p/source-control.html]git repository[/Link] and I used a [Link:/p/notes-txt.html]notes.txt[/Link] engineering journal to capture my thoughts and pending task list

- I worked on the foundations: the game engine, the map, and how to structure game-specific logic. More details on this below.

- As I started scoping out the story-specific work, I realized that writing such a sophisticated story and supporting the game mechanics would take more time than I have for a side project. I didn't want this project to draw on for more than a handful of months. If it took longer, I'd have a bigger and more interesting game but I might get bored of it and never finish. Or it would prevent me from developing other ideas I haven't thought of yet.

- I found a way to scope the story down so I could keep it interesting, fun, and achieve my goal of writing a text-based game in a timeframe I was willing to devote to it.

- With the scoped-down story, I worked on designing the game map next

- I used a pixel art app to draw a grid and then I filled in a maze-like set of inter-connected rooms, light puzzles, and enemies of increasing difficulty. At this phase of design, I knew I wanted to have battles but I wasn't sure how they would work or what rewards to give to celebrate victory. [Link:/m/dungeon/Resources/map.png]Here's the map I drew[/Link] (don't look until you've played the game!).

- Next, I worked on implementing the map itself. I wrote the code to name each room, add items to the rooms, describe each room's contents, and hook the rooms up to each other. Some of this work was tedious/mechanical which turned out to be an easy way to unwind in the evening and build momentum. I could even do some of this work from a mobile device while using an exercise bike (e.g. naming all of the rooms).

- Next, I implemented the game mechanics one-by-one:
  - Locked doors and keys to unlock them
  - Simple battle mechanics where the user one-hit killed every enemy
  - Gear: armor to reduce damage during battle, weapons
  - Complex battle mechanics with attacks, variable damage, and enemies fighting back
  - Rewards for battles
  - Healing items and a healing room

- At every step of the way, the game was playable and it got iteratively richer. I like to work my way up from a simpler system to a more complex system iteratively.
  - I'm reminded of [Link:https://en.wikipedia.org/wiki/John_Gall_(author)]Gall's Law[/Link]: "A complex system that works is invariably found to have evolved from a simple system that worked. A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over with a working simple system."

- The whole time, I kept a detailed task list in my notes.txt file: enemies I needed to flesh out, details I skipped over, mechanics I still needed to implement, and test coverage I needed to write

- I played through the game a few times, tweaking rewards. I added a weapon upgrade and added more explanation of game items and attacks as a reward.

- I added saving/loading/and starting over. I had a strategy in mind for how I would save game progress from the beginning of the project (because the tools available could change how I maintained game state). Knowing this would be played in a web browser meant I only had some tools available.

- Then I worked through the whole test backlog. Though I often wrote tests as I added new logic, I also accumulated a big list of missing coverage for edge cases and some aspects of gameplay. I love projects where testing can be automated as unit tests and multi-layer "unit tests" (which are actually integration tests written using the unit test harness). More on testing below.


****Task list:


- Talk a little about the structure of the source code:
  - Map
  - GameEngine
  - GameSegments
  - Unit tests: some are unit tests, some are integration tests; it was less effort in the short-term to cover a lot with integration tests


- Ideas for other games or extensions

- Make sure post date is right




"You open your eyes and find yourself in dimly lit surroundings. You are shocked to find that your body has somehow become a smooth yellow sphere. You panic. Your giant wedge-shaped mouth gapes open as you gasp for air."
  - [Link:/m/pacmandungeon/index.html]Pac-Man Dungeon[/Link]

Text adventure games have a special place in my heart. My first memorable run-in was with [Link:https://en.wikipedia.org/wiki/MUD]MUDs[/Link]. A friend in my summer school World History class showed me how to telnet into a MUD server one day when we were goofing around in the computer lab (instead of working on our assignment).

Many years passed and I eventually played through a game that was super fun and blew my mind, [Link:https://en.wikipedia.org/wiki/Emily_Short]Emily Short[/Link]'s [Link:https://ifdb.tads.org/viewgame?id=aearuuxv83plclpl]Counterfeit Monkey[/Link]. (Her blog is [Link:https://emshort.blog]here[/Link].) The game's word-manipulation puzzles opened my eyes to capabilities I didn't realize these games could have.

On iPhones, iPads, and other devices that spend most of their time without a hardware keyboard, text-based games can be hard to play. In the back of my mind, I've been noodling on how to make these games more touch-friendly.

One way to build a touch-friendly interactive story is to use a tool like [Link:https://twinery.org]Twine[/Link], which lets users perform actions by choosing from a set of choices/hyperlinks.

Text-based games can be fun programming projects (check out this previous post on [Link:/p/text-adventure.html]How to Program a Text Adventure[/Link]). Instead of using Twine, I decided to make a tiny game engine in JavaScript that I could then use to accomplish my long-held goal of writing my own text-based game.

I've been working on a dungeon game for a few months and it's coming along nicely. And then, a few days ago, I got one of my favorite things as a hobbyist programmer: a sudden and powerful urge to take a quick detour on a tangentially related programming project. Following these impulses and bursts of passion have led to some of my most productive coding sessions over the years.

Here's what kicked it off this time (another instance of [Link:/p/rabbit-hole.html]falling down the rabbit hole[/Link]):

- I was already working on this game engine and its first game
  - To be touch-friendly, all actions are listed as tappable-links
  - To have some simple graphics, I use emoji. An idea I noted [Link:/p/emoji-conway.html]previously[/Link].

- I saw an article about [Link:http://www.pactxt.com]PacTxt[/Link] ("Pac-Man meets Zork")
  - (In case that ever disappears, here's my [Link:/m/pactxt/index.html]backup[/Link])
  - Use the "debug" command to see a map

- I thought it was a really funny idea and it in turn reminded me of a [Link:https://www.smbc-comics.com/comic/2012-09-16]comic[/Link] ([Link:/m/smbc-pacman.gif]backup[/Link]) I saw many years ago that frames Pac-Man as hyper-detailed horror

- I find the comic really creative, funny, and interesting. And while the core idea of PacTxt is amusing, the implementation is not fun to play (it's long, tedious, repetitive). I wondered if my own spin on this could combine the two into something more fun.

- I opened a pixel art app (one I wrote for fun earlier in the year on another programming spurt) and I sketched out a [Link:/m/pacmandungeon/Resources/map.png]dungeon map[/Link] for a Pac-Man level. The first maze I drew would be too big to be fun so I scoped it down to a mini version.

- Then I created a new private git repo for this project (I always try to save my code in [Link:/p/source-control.html]source control[/Link] -- who knows when it'll come in handy in the future!)

- I copied over the relevant game engine files, started a [Link:/p/notes-txt.html]notes.txt[/Link] journal for the project, and hacked it together

- Even though this is a tiny tangential project, I ended up solving some problems I'll ultimately need to solve for the bigger dungeon game I'm working on: emoji weren't displaying correctly in Chrome, tweaks to the page layout, better sorting for game actions


You can play my Pac-Man Dungeon game [Link:/m/pacmandungeon/index.html]here[/Link].


It's silly, it was fun to make, maybe somebody else will find it amusing, and maybe this will help somebody else to fall down the rabbit hole and come up with more creative ideas.

Here are some quick ideas to extend this:
- Support a full set of levels (and maybe even have the game glitch out on level 256, just like the original Pac-Man)
- Support all the different fruit
- Support larger levels
- Let the user input an ASCII map that they can then play
- Support all the different ghosts with their specific chase and scatter behaviors
- Let the user write code to inspect the game and control Pac-Man to create their own AI to play and win


Other notes:

- The game source source code can be found [Link:https://github.com/memalign/memalign.github.io/tree/master/m/pacmandungeon]here[/Link]
- I wrote a simple [Link:https://github.com/memalign/memalign.github.io/blob/master/m/pacmandungeon/UnitTests.js]unit test harness[/Link]. Run the tests [Link:/m/pacmandungeon/unitTests.html]here[/Link].
