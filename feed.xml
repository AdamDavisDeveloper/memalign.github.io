<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
<title>memalign.github.io</title>
<subtitle>By memalign</subtitle>
<link rel="alternate" type="text/html" href="https://memalign.github.io/index.html" />
<link rel="self" type="application/atom+xml" href="https://memalign.github.io/feed.xml" />
<id>https://memalign.github.io/feed.xml</id>
<updated>2020-11-30T00:00:00-08:00</updated>
<rights>Copyright © 2020, memalign</rights>
<icon>https://memalign.github.io/apple-touch-icon.png</icon>
<logo>https://memalign.github.io/apple-touch-icon.png</logo>
<entry>
<title>Dungeon Memalign</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/dungeon-memalign.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/dungeon-memalign.html" />
<id>https://memalign.github.io/p/dungeon-memalign.html</id>
<published>2020-11-30T00:00:00-08:00</published>
<updated>2020-11-30T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/dungeon-memalign.html'>Dungeon Memalign</a>
</h2>
</div>
<img src="/m/dungeon.jpg">
<div id='postdate'>Posted on 11/30/2020</div>
"You open your eyes and find yourself in dimly lit surroundings. The air is damp and cool. The smell of mildew reminds you of an old basement. In your head, you label this location 'room 👀👃'.<br />
<br />
Nearby, you see a small potion.<br />
<br />
You can head east."<br />
<br />
&nbsp;&nbsp;- <a href="/m/dungeon/index.html">Dungeon Memalign</a><br />
<br />
<br />
I hinted at a new dungeon game in my <a href="/p/pacman-dungeon.html">post about Pac-Man</a>. Well this game is now complete!<br />
<br />
This game, "Dungeon Memalign," puts the player in a maze and a daze. The player solves puzzles and battles their way through ever-stronger monsters. Are you clever and strong enough to win? <a href="/m/dungeon/index.html">Play here!</a><br />
<br />
The game is beatable in ~15 minutes and should work well on phones, tablets, and computers. It'll save your progress if you get interrupted.<br />
<br />
<br />
In the rest of this post, I'm going to talk about how I wrote this game, the structure of the source code, and ideas for other games that can be built on the same foundations.<br />
<br />
<br />
How I approached writing this game:<br />
<br />
- I talked about my long-time desire to built my own text-based game in a <a href="/p/pacman-dungeon.html">previous post</a>.<br />
<br />
- I brainstormed about potential stories and even came up with a fairly rich idea<br />
<br />
- I created a local <a href="/p/source-control.html">git repository</a> and I used a <a href="/p/notes-txt.html">notes.txt</a> engineering journal to capture my thoughts and pending task list<br />
<br />
- I worked on the foundations: the game engine, the map, and how to structure game-specific logic. More details on this below.<br />
<br />
- As I started scoping out the story-specific work, I realized that writing such a sophisticated story and supporting the game mechanics would take more time than I have for a side project. I didn't want this project to drag on for more than a handful of months. If it took longer, I'd have a bigger and more interesting game but I might get bored of it and never finish. Or it would prevent me from developing other ideas I haven't thought of yet.<br />
<br />
- I found a way to scope the story down so I could keep it interesting, fun, and achieve my goal of writing a text-based game in a timeframe I was willing to devote to it.<br />
<br />
- With the scoped-down story, I worked on designing the game map next<br />
<br />
- I used a pixel art app to draw a grid and then I filled in a maze-like set of inter-connected rooms, light puzzles, and enemies of increasing difficulty. At this phase of design, I knew I wanted to have battles but I wasn't sure how they would work or what rewards to give to celebrate victory. <a href="/m/dungeon/Resources/map.png">Here's the map I drew</a> (don't look until you've played the game!).<br />
<br />
- Next, I worked on implementing the map itself. I wrote the code to name each room, add items to the rooms, describe each room's contents, and hook the rooms up to each other. Some of this work was tedious/mechanical which turned out to be an easy way to unwind in the evening and build momentum. I could even do some of this work from a mobile device while using an exercise bike (e.g. naming all of the rooms).<br />
<br />
- Next, I implemented the game mechanics one-by-one:<br />
&nbsp;&nbsp;- Locked doors and keys to unlock them<br />
&nbsp;&nbsp;- Simple battle mechanics where the user one-hit killed every enemy<br />
&nbsp;&nbsp;- Gear: armor to reduce damage during battle, weapons<br />
&nbsp;&nbsp;- Complex battle mechanics with attacks, variable damage, and enemies fighting back<br />
&nbsp;&nbsp;- Rewards for battles<br />
&nbsp;&nbsp;- Healing items and a healing room<br />
<br />
- At every step of the way, the game was playable and it got iteratively richer. I like to work my way up from a simpler system to a more complex system iteratively.<br />
&nbsp;&nbsp;- I'm reminded of <a href="https://en.wikipedia.org/wiki/John_Gall_(author)">Gall's Law</a>: "A complex system that works is invariably found to have evolved from a simple system that worked. A complex system designed from scratch never works and cannot be patched up to make it work. You have to start over with a working simple system."<br />
<br />
- The whole time, I kept a detailed task list in my notes.txt file: enemies I needed to flesh out, details I skipped over, mechanics I still needed to implement, and test coverage I needed to write<br />
<br />
- I played through the game a few times, tweaking rewards. I added a weapon upgrade and added more explanation of game items and attacks as a reward.<br />
<br />
- I added saving/loading/and starting over. I had a strategy in mind for how I would save game progress from the beginning of the project (because the tools available could change how I maintained game state). Knowing this would be played in a web browser meant I only had some tools available.<br />
<br />
- Then I worked through the whole test backlog. Though I often wrote tests as I added new logic, I also accumulated a big list of missing coverage for edge cases and some aspects of gameplay. I love projects where most testing can be automated as unit tests and multi-layer "unit tests" (which are actually integration tests written using the unit test harness). More on testing below.<br />
<br />
- I played it a bunch and my wife played it too! I fixed any bugs we found.<br />
<br />
- And then the game was ready to share :)<br />
<br />
<br />
How the code is structured:<br />
<br />
- I use "MA" as a prefix on class names to create a simple namespace to avoid conflicts with global JavaScript APIs<br />
<br />
- Map.js<br />
&nbsp;&nbsp;- Most of the code in this file is game-specific. When writing a new game, most of this code would be deleted and replaced.<br />
&nbsp;&nbsp;- Defines the enemies (MAEnemy instances)<br />
&nbsp;&nbsp;- Defines the rooms (MALocation instances)<br />
&nbsp;&nbsp;- Defines the graph of room-to-room connections<br />
&nbsp;&nbsp;- Enemies and rooms have properties and methods that the game engine calls to get the appearance, attacks, etc<br />
&nbsp;&nbsp;- Has logic to generate an emoji representation of the map<br />
<br />
- GameEngine.js<br />
&nbsp;&nbsp;- Most of the code in this file is foundational. This should require only small tweaks when it's used in a new game.<br />
&nbsp;&nbsp;- Many foundational classes are in this file. They could be factored out into their own files.<br />
&nbsp;&nbsp;- Notable classes:<br />
&nbsp;&nbsp;&nbsp;&nbsp;- MAGameState: an instance of this class stores all of the current game's state. This instance is passed into game engine methods and modified as the game progresses. This object has a reference to the Map instance, the current location, the user's inventory, and storage used by MAGameSegment subclasses.<br />
&nbsp;&nbsp;&nbsp;&nbsp;- MAGameEngine: this class is the entry point to all of the game logic. It contains some common methods that most games would need (such as a method to calculate the possible actions the user can take given the current game state). There are only two places in this class that contain game-specific logic: constructor and setupNewGame. The constructor instantiates a hard-coded list of MAGameSegment subclasses (more on these below). The setupNewGame method simply has the name of the game hard-coded.<br />
&nbsp;&nbsp;&nbsp;&nbsp;- MANoun, MAScenery: classes used to represent items in the game map. These include some methods to guess the right indefinite article and in-sentence representation of the objects.<br />
&nbsp;&nbsp;&nbsp;&nbsp;- MADirection, MALocation: used to represent map locations and the connections between them<br />
<br />
- Utilities.js<br />
&nbsp;&nbsp;- Methods used in many different parts of the codebase<br />
&nbsp;&nbsp;- One example: naturalLanguageStringForArray, accepts an array of MANoun objects and constructs a string like "a dog and a cat" or "a dog, a mouse, and some ants"<br />
&nbsp;&nbsp;- Another useful method: fakeRandomInt. All of the "randomness" in the game is actually deterministic so I can replay every action taken since the beginning of the game and always get the same result. I use this trick for easy saving/loading of game progress. It also impacts unit testing.<br />
<br />
- GameSegments.js<br />
&nbsp;&nbsp;- MAGameSegment is an abstract class that is subclassed to create game-specific GameSegments<br />
&nbsp;&nbsp;- A GameSegment is a way to organize game logic, such as locked doors & keys to unlock them, using potions to heal, etc<br />
&nbsp;&nbsp;- The GameEngine asks every GameSegment for actions the user can perform (e.g. "Use potion"). The GameSegment is then asked to perform the action that's chosen.<br />
&nbsp;&nbsp;- GameSegments also get callbacks when other parts of the game will perform or did perform an action in case they have reason to block it or react to it. For example, a GameSegment may want to block "Go north" if the door is locked.<br />
&nbsp;&nbsp;- Game mechanics and room-specific behaviors are implemented as GameSegments.<br />
<br />
- GameSegmentBattle.js<br />
&nbsp;&nbsp;- The battle mechanics of the game are complex enough that I put this game segment in its own file<br />
<br />
- UnitTests.js<br />
&nbsp;&nbsp;- This is a simple unit test harness and collection of tests of both foundational and game-specific pieces<br />
&nbsp;&nbsp;- Run the unit tests by visiting <a href="/m/dungeon/unitTests.html">unitTests.html</a><br />
&nbsp;&nbsp;- Some of the tests are real "unit" tests<br />
&nbsp;&nbsp;- A lot of the test coverage comes from multi-layer tests which are more accurately called "integration" tests. I chose to get a lot of test coverage this way because it was less effort for me to write these instead of granular unit tests for everything.<br />
&nbsp;&nbsp;- These integration tests essentially play the game and assert that the game ended up in the right state along the way. See "test_MAGameEngine_beatGame" for a full play-through (and spoilers!).<br />
<br />
<br />
I'll close this post with some ideas to extend or reuse these pieces:<br />
<br />
- Create a game with a linear dungeon where enemies get stronger as you move deeper into it. If you die, you start over at the beginning but you get to keep your experience/attacks/equipment.<br />
- Create an "Emojimon" text-based RPG to collect and battle emoji (similar to Pokémon)<br />
- And one idea I executed on as soon as I had it: <a href="/p/pacman-dungeon.html">Pac-Man Dungeon</a><br />
<br />

]]>
</content>
</entry>

<entry>
<title>Pac-Man Dungeon</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/pacman-dungeon.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/pacman-dungeon.html" />
<id>https://memalign.github.io/p/pacman-dungeon.html</id>
<published>2020-11-24T00:00:00-08:00</published>
<updated>2020-11-24T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/pacman-dungeon.html'>Pac-Man Dungeon</a>
</h2>
</div>
<img src="/m/pacman.jpg">
<div id='postdate'>Posted on 11/24/2020</div>
"You open your eyes and find yourself in dimly lit surroundings. You are shocked to find that your body has somehow become a smooth yellow sphere. You panic. Your giant wedge-shaped mouth gapes open as you gasp for air."<br />
&nbsp;&nbsp;- <a href="/m/pacmandungeon/index.html">Pac-Man Dungeon</a><br />
<br />
Text adventure games have a special place in my heart. My first memorable run-in was with <a href="https://en.wikipedia.org/wiki/MUD">MUDs</a>. A friend in my summer school World History class showed me how to telnet into a MUD server one day when we were goofing around in the computer lab (instead of working on our assignment).<br />
<br />
Many years passed and I eventually played through a game that was super fun and blew my mind, <a href="https://en.wikipedia.org/wiki/Emily_Short">Emily Short</a>'s <a href="https://ifdb.tads.org/viewgame?id=aearuuxv83plclpl">Counterfeit Monkey</a>. (Her blog is <a href="https://emshort.blog">here</a>.) The game's word-manipulation puzzles opened my eyes to capabilities I didn't realize these games could have.<br />
<br />
On iPhones, iPads, and other devices that spend most of their time without a hardware keyboard, text-based games can be hard to play. In the back of my mind, I've been noodling on how to make these games more touch-friendly.<br />
<br />
One way to build a touch-friendly interactive story is to use a tool like <a href="https://twinery.org">Twine</a>, which lets users perform actions by choosing from a set of choices/hyperlinks.<br />
<br />
Text-based games can be fun programming projects (check out this previous post on <a href="/p/text-adventure.html">How to Program a Text Adventure</a>). Instead of using Twine, I decided to make a tiny game engine in JavaScript that I could then use to accomplish my long-held goal of writing my own text-based game.<br />
<br />
I've been working on a <a href="/p/dungeon-memalign.html">dungeon game</a> for a few months and it's coming along nicely. And then, a few days ago, I got one of my favorite things as a hobbyist programmer: a sudden and powerful urge to take a quick detour on a tangentially related programming project. Following these impulses and bursts of passion have led to some of my most productive coding sessions over the years.<br />
<br />
Here's what kicked it off this time (another instance of <a href="/p/rabbit-hole.html">falling down the rabbit hole</a>):<br />
<br />
- I was already working on this game engine and its first game<br />
&nbsp;&nbsp;- To be touch-friendly, all actions are listed as tappable-links<br />
&nbsp;&nbsp;- To have some simple graphics, I use emoji. An idea I noted <a href="/p/emoji-conway.html">previously</a>.<br />
<br />
- I saw an article about <a href="http://www.pactxt.com">PacTxt</a> ("Pac-Man meets Zork")<br />
&nbsp;&nbsp;- (In case that ever disappears, here's my <a href="/m/pactxt/index.html">backup</a>)<br />
&nbsp;&nbsp;- Use the "debug" command to see a map<br />
<br />
- I thought it was a really funny idea and it in turn reminded me of a <a href="https://www.smbc-comics.com/comic/2012-09-16">comic</a> (<a href="/m/smbc-pacman.gif">backup</a>) I saw many years ago that frames Pac-Man as hyper-detailed horror<br />
<br />
- I find the comic really creative, funny, and interesting. And while the core idea of PacTxt is amusing, the implementation is not fun to play (it's long, tedious, repetitive). I wondered if my own spin on this could combine the two into something more fun.<br />
<br />
- I opened a pixel art app (one I wrote for fun earlier in the year on another programming spurt) and I sketched out a <a href="/m/pacmandungeon/Resources/map.png">dungeon map</a> for a Pac-Man level. The first maze I drew would be too big to be fun so I scoped it down to a mini version.<br />
<br />
- Then I created a new private git repo for this project (I always try to save my code in <a href="/p/source-control.html">source control</a> -- who knows when it'll come in handy in the future!)<br />
<br />
- I copied over the relevant game engine files, started a <a href="/p/notes-txt.html">notes.txt</a> journal for the project, and hacked it together<br />
<br />
- Even though this is a tiny tangential project, I ended up solving some problems I'll ultimately need to solve for the bigger dungeon game I'm working on: emoji weren't displaying correctly in Chrome, tweaks to the page layout, better sorting for game actions<br />
<br />
<br />
You can play my Pac-Man Dungeon game <a href="/m/pacmandungeon/index.html">here</a>.<br />
<br />
<br />
It's silly, it was fun to make, maybe somebody else will find it amusing, and maybe this will help somebody else to fall down the rabbit hole and come up with more creative ideas.<br />
<br />
Here are some quick ideas to extend this:<br />
- Support a full set of levels (and maybe even have the game glitch out on level 256, just like the original Pac-Man)<br />
- Support all the different fruit<br />
- Support larger levels<br />
- Let the user input an ASCII map that they can then play<br />
- Support all the different ghosts with their specific chase and scatter behaviors<br />
- Let the user write code to inspect the game and control Pac-Man to create their own AI to play and win<br />
<br />
<br />
Other notes:<br />
<br />
- The game source source code can be found <a href="https://github.com/memalign/memalign.github.io/tree/master/m/pacmandungeon">here</a><br />
- I wrote a simple <a href="https://github.com/memalign/memalign.github.io/blob/master/m/pacmandungeon/UnitTests.js">unit test harness</a>. Run the tests <a href="/m/pacmandungeon/unitTests.html">here</a>.<br />

]]>
</content>
</entry>

<entry>
<title>The Queen's Gambit</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/queens-gambit.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/queens-gambit.html" />
<id>https://memalign.github.io/p/queens-gambit.html</id>
<published>2020-11-21T00:00:00-08:00</published>
<updated>2020-11-21T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/queens-gambit.html'>The Queen's Gambit</a>
</h2>
</div>
<img src="/m/queensgambit.jpg">
<div id='postdate'>Posted on 11/21/2020</div>
I recently watched <a href="https://en.wikipedia.org/wiki/The_Queen%27s_Gambit_(miniseries)">The Queen's Gambit</a>, a 7-episode miniseries on Netflix. It's based on a <a href="https://en.wikipedia.org/wiki/The_Queen%27s_Gambit_(novel)">novel</a> that I haven't read.<br />
<br />
The story drew me in and, though I originally planned to watch one episode per day, I ended up needing more and more. I watched one on Sunday, one on Monday, two on Tuesday, and the last three on Wednesday.<br />
<br />
As <a href="/p/books.html">often happens</a> when I finish a story, I was excited to see how it ended but I also felt a pensive sadness at the loss of characters I had grown to care for.<br />
<br />
I have some thoughts on the story below. If you haven't watched it yet, I recommend that you stop here and go experience it yourself! I hope you like it.<br />
<br />
.<br />
.<br />
.<br />
<br />
<img src="/m/bethharmon.jpg"><br />
.<br />
.<br />
.<br />
<br />
I kept thinking about the plot and characters, especially the main character, Beth Harmon. At first, I was a little disappointed that Beth had so many people helping her yet she had not been good or kind to them. They supported her because she was so brilliant that they wanted her to succeed. Part of their support and her success also came from being physically attractive and stylish. This happens in the real world, too, but it's not inspiring.<br />
<br />
I eventually found more inspiring takeaways:<br />
<br />
- Beth overcame her struggle with addiction thanks to people caring about her<br />
- Beth found success by following her passions and developing her talents<br />
- Beth's success required more than raw talent or learning on her own. Friendship and mentors made a huge difference.<br />
- Beth was able to break free from the trouble in her past when she finally let herself face it directly. She had a breakthrough by realizing her troubles weren't the same as her biological mother's. She also needed to see that other people had cared for her and followed her story from the beginning.<br />
<br />
In the end, the story resonates with me and the series is great entertainment.<br />

]]>
</content>
</entry>

<entry>
<title>Rebecca Meyer</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/rebecca-meyer.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/rebecca-meyer.html" />
<id>https://memalign.github.io/p/rebecca-meyer.html</id>
<published>2020-11-04T00:00:00-08:00</published>
<updated>2020-11-04T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/rebecca-meyer.html'>Rebecca Meyer</a>
</h2>
</div>
<img src="/m/meyerweb.png">
<div id='postdate'>Posted on 11/4/2020</div>
Browsing interesting personal websites is often fun (as in <a href="/p/clamps.html">clamps</a> and <a href="/p/coding-machines.html">Coding Machines</a>). But sometimes it can break your heart.<br />
<br />
That's the case with <a href="https://meyerweb.com/ui/about.html">Eric Meyer</a>'s open grieving after losing a child. I found his website when I learned about <a href="https://meyerweb.com/eric/thoughts/2014/06/19/rebeccapurple/">rebeccapurple</a>, a special color added to the CSS specification as a tribute to his daughter. As I read his family's experiences, I found myself crying and feeling an aching pain for these people I've never met.<br />
<br />
Eric shared his experiences as they happened. You can find them <a href="https://meyerweb.com/eric/thoughts/category/personal/rebecca/?order=asc">here</a>. His family's story is tragic and emotional and wonderfully written.<br />
<br />
(I normally try to keep a backup of external sites but I'm not grabbing one here. I want to be respectful of Eric and his family's potential future choices to remove their story.)<br />

]]>
</content>
</entry>

<entry>
<title>Coding Machines</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/coding-machines.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/coding-machines.html" />
<id>https://memalign.github.io/p/coding-machines.html</id>
<published>2020-11-03T00:00:00-08:00</published>
<updated>2020-11-03T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/coding-machines.html'>Coding Machines</a>
</h2>
</div>
<img src="/m/coding-machines/coding_machines.jpg">
<div id='postdate'>Posted on 11/3/2020</div>
Back when I discovered the website about <a href="/p/clamps.html">clamps</a>, I pored over that and similar personal websites (which sometimes linked me to even more interesting personal websites of their friends). I stumbled on a cool story about debugging, compilers, and viruses written by <a href="https://www.teamten.com/lawrence/">Lawrence Kesteloot</a>.<br />
<br />
You can check it out <a href="https://www.teamten.com/lawrence/writings/coding-machines/">here</a>.<br />
(My backup of the story is <a href="/m/coding-machines/index.html">here</a>.)<br />

]]>
</content>
</entry>

<entry>
<title>Clamps</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/clamps.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/clamps.html" />
<id>https://memalign.github.io/p/clamps.html</id>
<published>2020-11-02T00:00:00-08:00</published>
<updated>2020-11-02T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/clamps.html'>Clamps</a>
</h2>
</div>
<img src="/m/clamps/clamps.jpg">
<div id='postdate'>Posted on 11/2/2020</div>
Many years ago, I stumbled upon some cool personal websites made by software engineers back in the 1990s/early-2000s.<br />
<br />
I liked the websites because they shared interesting projects, essays, stories, and pictures. Some of them peppered in personality and humor unique to the author.<br />
<br />
In a way, they inspired me to eventually make this website.<br />
<br />
A simple yet intruiging post was about clamps. You can find my backup of the page <a href="/m/clamps/index.html">here</a>.<br />
<br />
It's got some humor (including that poor Pillsbury doughboy) and it opened my eyes to how handy clamps can be around the home and office. (By the way, I also find binder clips and zip ties to be useful fasteners for quick projects/fixes!)<br />
<br />
This is a glimpse into a more fun era of the web.<br />
<br />
The author eventually took the website down and replaced it with a much more professional one. Normally I would give full attribution but since he removed all the content, I decided to scrub his full name and web address from this post and my backup of the page. I'm assuming he intentionally wants to have a less personal presence on the web. (Drew, if you want attribution or want me to remove this post, please let me know via GitHub.)<br />

]]>
</content>
</entry>

<entry>
<title>Emoji Simulator</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/emoji-conway.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/emoji-conway.html" />
<id>https://memalign.github.io/p/emoji-conway.html</id>
<published>2020-10-31T00:00:00-08:00</published>
<updated>2020-10-31T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/emoji-conway.html'>Emoji Simulator</a>
</h2>
</div>
<img src="/m/glider.jpg">
<div id='postdate'>Posted on 10/31/2020</div>
The other night, I was trying to fall asleep but I couldn't clear my thoughts. I tried to focus on counting sheep: 🐑 1... 🐑 2... but then I wondered whether there's something better for an engineer to count. I started thinking about <a href="https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life">Conway's Game of Life</a> and began counting gliders.<br />
<br />
<div id='code'> o<br />
&nbsp;&nbsp;o<br />
ooo<br />
<br />
&nbsp;&nbsp;&nbsp;o o<br />
&nbsp;&nbsp;&nbsp;&nbsp;oo<br />
&nbsp;&nbsp;&nbsp;&nbsp;o<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o o<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oo<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oo<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oo<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ooo</div>
Instead of calmly drifting to sleep, I kept <a href="/p/rabbit-hole.html">falling down the rabbit hole</a>.<br />
<br />
I remembered a cool website for making simulators with rules:<br />
- Conway's Game of Life: <a href="https://ncase.me/sim/?s=conway">https://ncase.me/sim/?s=conway</a><br />
- Other simulators: <a href="https://ncase.me/sim/">https://ncase.me/sim/</a><br />
<br />
(The author explicitly shared the source code <a href="https://github.com/ncase/sim">here</a>)<br />
(And I made a backup <a href="/m/nicky-sim/?s=conway">here</a>)<br />
<br />
I noodled on that for a while and was inspired by the use of emoji as simple UI elements. It's an easy way to spice up a program/website. I also like how they generalized the rules to make tons of different simulators possible.<br />
<br />
I wondered if other people would find this site cool too. To get the idea out of my head for the night, I wrote down a reminder to revisit it in the morning and consider posting about it here.<br />
<br />
And, somehow, I eventually fell asleep.<br />

]]>
</content>
</entry>

<entry>
<title>Universal Paperclips</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/universal-paperclips.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/universal-paperclips.html" />
<id>https://memalign.github.io/p/universal-paperclips.html</id>
<published>2020-09-13T00:00:00-08:00</published>
<updated>2020-09-13T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/universal-paperclips.html'>Universal Paperclips</a>
</h2>
</div>
<img src="/m/universal-paperclips.png">
<div id='postdate'>Posted on 9/13/2020</div>
<a href="https://www.decisionproblem.com/paperclips/index2.html">Universal Paperclips</a> (<a href="https://en.wikipedia.org/wiki/Universal_Paperclips">wikipedia article</a>) is an <a href="https://en.wikipedia.org/wiki/Incremental_game">incremental game</a> about an AI created to produce paperclips.<br />
<br />
When I first played it several years ago, I got sucked in for an entire day. Then I felt compelled to play it again the next day.<br />
<br />
<br />
Universal Paperclips drew me in for many reasons:<br />
<br />
- Its premise and user interface is simple. It's almost entirely text-based.<br />
<br />
- The game starts small and builds up levels of complexity, with the next goal being barely within reach<br />
<br />
- Optimizing ever-growing numbers of paperclips, dollars, and other resources is satisfying to my engineer-brain<br />
<br />
- AI as an existential threat to humanity is an interesting topic to explore<br />
<br />
<br />
The game popped up in one of my news feeds last week and I started to consider whether I could automate playing the whole game from beginning to end.<br />
<br />
Because it's a web-based game, it's easy to inspect the UI and inject code. Just open your web browser's JavaScript console to paste in code.<br />
<br />
Here's how to scrape the number of paperclips:<br />
<div id='code'>parseInt(document.getElementById(&quot;clips&quot;).textContent.replace(/,/g, &#039;&#039;))</div>
Though it's possible to inspect the global variables that power the game, I mostly stuck to scraping the user interface even though it's messier. Example messiness: I needed to strip commas from the number of paperclips so "1,000,000" would turn into 1000000.<br />
<br />
The project of automating playing the game mirrored playing the game itself. I incrementally refined my strategy and added complexity.<br />
<br />
To automate playing the game:<br />
<br />
- I created an event loop which runs every 10ms<br />
<br />
- I aimed to maintain a minimal amount of my own state. Every cycle, my script inspects the UI to determine relevant actions to take. I only need to keep state to count the number of elapsed cycles and to monitor whether a few game attributes stopped changing. By keeping minimal state, I was able to easily update my code running on the page mid-game and it could always pick up at the right place.<br />
<br />
- I initially started by calling button handler methods directly. I found that the game doesn't always check whether the relevant button should have been enabled so I later started injecting clicks to the buttons themselves.<br />
<br />
<br />
Opportunities for improvement:<br />
<br />
- The game sometimes glitches due to how quickly my event loop performs actions. It's possible to over-spend some resources which means my script is accidentally cheating. The script could be updated to perform actions more slowly (and one per cycle) or add its own resource checking to avoid over-spending.<br />
<br />
- My script is not playing with an optimal strategy to complete the game quickly. Though I based some of the strategy off of a speed run I found on <a href="https://www.youtube.com/watch?v=hDXoonknjS0">YouTube</a>, there's a lot of opportunity to follow that strategy more closely.<br />
<br />
- I sprinkled some limits to prevent actions when they're not relevant (e.g. stop upgrading the investment engine after level 15). It would be helpful to document why these limits are needed. Some could be replaced with smarter logic.<br />
<br />
- Updating the script is time-consuming because a test cycle takes hours! Finding a way to reduce the test cycle to take less time than playing through the game in real-time could lead to a lot of other refinement.<br />
<br />
<br />
Here's a script which successfully automatically plays Universal Paperclips from beginning to end:<br />
<br />
<div id='code'>// Open this page:<br />
// https://www.decisionproblem.com/paperclips/index2.html<br />
//<br />
// Open JavaScript console and paste this code in<br />
<br />
var dpCycles = 0<br />
<br />
function incrementCycles() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;dpCycles++<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (dpCycles % 10000 == 0) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;dpCycles: &quot; + dpCycles)<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
<br />
var lastUnsoldClips = 0<br />
var cyclesWithoutSellingClips = 0<br />
var cyclesSinceLastDeposit = 0<br />
var lastUnusedClipsCount = 0<br />
var cyclesWithoutUnusedClipsCountChange = 0<br />
function performEventCycle() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;incrementCycles()<br />
&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Examine game state<br />
&nbsp;&nbsp;&nbsp;&nbsp;let clips = parseInt(document.getElementById(&quot;clips&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let unsoldClips = parseInt(document.getElementById(&quot;unsoldClips&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let funds = parseFloat(document.getElementById(&quot;funds&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let pricePerClip = parseFloat(document.getElementById(&quot;margin&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let wire = parseInt(document.getElementById(&quot;wire&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let wireCost = parseInt(document.getElementById(&quot;wireCost&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canBuyWire = !document.getElementById(&quot;btnBuyWire&quot;).disabled<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let marketingLevel = parseInt(document.getElementById(&quot;marketingLvl&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canIncreaseMarketingLevel = !document.getElementById(&quot;btnExpandMarketing&quot;).disabled<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let autoClippers = parseInt(document.getElementById(&quot;clipmakerLevel2&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canMakeAutoClipper = !document.getElementById(&quot;btnMakeClipper&quot;).disabled <br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let megaAutoClippers = parseInt(document.getElementById(&quot;megaClipperLevel&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canMakeMegaAutoClipper = !document.getElementById(&quot;btnMakeMegaClipper&quot;).disabled<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let processors = parseInt(document.getElementById(&quot;processors&quot;).textContent)<br />
&nbsp;&nbsp;&nbsp;&nbsp;let memory = parseInt(document.getElementById(&quot;memory&quot;).textContent)<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let processorButton = document.getElementById(&quot;btnAddProc&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canAddProcessor = processorButton &amp;&amp; !processorButton.disabled<br />
&nbsp;&nbsp;&nbsp;&nbsp;let memoryButton = document.getElementById(&quot;btnAddMem&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canAddMemory = memoryButton &amp;&amp; !memoryButton.disabled<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let operations = parseInt(document.getElementById(&quot;operations&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let hasQuantumComputing = document.getElementById(&quot;qComputing&quot;).style.display != &quot;none&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;let needsQuantumChip = document.getElementById(&quot;qCompDisplay&quot;).textContent == &quot;Need Photonic Chips&quot;<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let investmentLevel = parseInt(document.getElementById(&quot;investmentLevel&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canInvest = document.getElementById(&quot;investmentEngine&quot;).style.display != &quot;none&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;let investmentTotal = parseInt(document.getElementById(&quot;portValue&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;var quantumChipValues = []<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (hasQuantumComputing) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (var i = 0; i &lt; 10; i++) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quantumChipValues.push(document.getElementById(&quot;qChip&quot;+i).style.opacity)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (lastUnsoldClips &lt; unsoldClips) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesWithoutSellingClips++<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesWithoutSellingClips = 0<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;lastUnsoldClips = unsoldClips<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Available research projects<br />
&nbsp;&nbsp;&nbsp;&nbsp;let projButton_creativity = document.getElementById(&quot;projectButton3&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;let projAvail_creativity = projButton_creativity &amp;&amp; !projButton_creativity.disabled<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_creativity = function() { projButton_creativity.click() }<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let businessButtonIDs = [&quot;projectButton7&quot;, &quot;projectButton26&quot;]<br />
&nbsp;&nbsp;&nbsp;&nbsp;let trustProjectButtonIDs = [&quot;projectButton6&quot;, &quot;projectButton13&quot;, &quot;projectButton14&quot;, &quot;projectButton15&quot;, &quot;projectButton17&quot;, &quot;projectButton19&quot;]<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let quantumProjectButtonIDs = [&quot;projectButton50&quot;, &quot;projectButton51&quot;]<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let postQuantumProjectButtonIDs = [&quot;projectButton1&quot;, &quot;projectButton4&quot;, &quot;projectButton5&quot;, &quot;projectButton8&quot;, &quot;projectButton9&quot;, &quot;projectButton10&quot;, &quot;projectButton10b&quot;, &quot;projectButton11&quot;, &quot;projectButton12&quot;, &quot;projectButton16&quot;, &quot;projectButton18&quot;, &quot;projectButton20&quot;, &quot;projectButton21&quot;, &quot;projectButton22&quot;, &quot;projectButton23&quot;, &quot;projectButton24&quot;, &quot;projectButton25&quot;, &quot;projectButton27&quot;, &quot;projectButton28&quot;, &quot;projectButton29&quot;, &quot;projectButton30&quot;, &quot;projectButton31&quot;, &quot;projectButton34&quot;, &quot;projectButton35&quot;, &quot;projectButton41&quot;, &quot;projectButton43&quot;, &quot;projectButton44&quot;, &quot;projectButton45&quot;, &quot;projectButton46&quot;, &quot;projectButton60&quot;, &quot;projectButton61&quot;, &quot;projectButton62&quot;, &quot;projectButton63&quot;, &quot;projectButton64&quot;, &quot;projectButton65&quot;, &quot;projectButton66&quot;, &quot;projectButton70&quot;, &quot;projectButton100&quot;, &quot;projectButton101&quot;, &quot;projectButton102&quot;, &quot;projectButton110&quot;, &quot;projectButton111&quot;, &quot;projectButton112&quot;, &quot;projectButton118&quot;, &quot;projectButton119&quot;, &quot;projectButton120&quot;, &quot;projectButton121&quot;, &quot;projectButton125&quot;, &quot;projectButton126&quot;, &quot;projectButton127&quot;, &quot;projectButton128&quot;, &quot;projectButton129&quot;, &quot;projectButton130&quot;, &quot;projectButton131&quot;, &quot;projectButton132&quot;, &quot;projectButton133&quot;, &quot;projectButton134&quot;, &quot;projectButton218&quot;]<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// comment out projectButton148 (Reject Drift&#039;s offer to Start Over in a New Universe) to try the alternate ending<br />
&nbsp;&nbsp;&nbsp;&nbsp;let endGameProjectButtonIDs = [ &quot;projectButton140&quot;, &quot;projectButton141&quot;, &quot;projectButton142&quot;, &quot;projectButton143&quot;, &quot;projectButton144&quot;, &quot;projectButton145&quot;, &quot;projectButton146&quot;, &quot;projectButton148&quot;, &quot;projectButton210&quot;, &quot;projectButton211&quot;, &quot;projectButton212&quot;, &quot;projectButton213&quot;, &quot;projectButton214&quot;, &quot;projectButton215&quot;, &quot;projectButton216&quot; ]<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let moneyProjectButtonIDs = [&quot;projectButton37&quot;, &quot;projectButton38&quot;, &quot;projectButton40&quot;, &quot;projectButton40b&quot;]<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Button handler functions<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_makePaperclip = function() { clipClick(1) }<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_increaseMarketing = buyAds<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_buyWire = buyWire<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeAutoClipper = makeClipper<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeMegaAutoClipper = makeMegaClipper<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_raisePrice = raisePrice<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_lowerPrice = lowerPrice<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_addProcessor = addProc<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_addMemory = addMem<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_quantumCompute = qComp<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_deposit = investDeposit<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_withdraw = investWithdraw<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// =========================<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Choose actions to perform<br />
&nbsp;&nbsp;&nbsp;&nbsp;// =========================<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;handler_makePaperclip()<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (wireCost &lt; 19 &amp;&amp; canBuyWire) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_buyWire()<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// If we&#039;re not selling any paperclips, reduce cost<br />
&nbsp;&nbsp;&nbsp;&nbsp;if ((clips &lt; 10000 &amp;&amp; pricePerClip &gt; 0.03) ||<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cyclesWithoutSellingClips &gt; 20 &amp;&amp; pricePerClip &gt; 0.03) ||<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(unsoldClips &gt; 10000000 &amp;&amp; pricePerClip &gt; 0.01)) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_lowerPrice()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesWithoutSellingClips = 0<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// In middle-game, if we&#039;re selling out fast, increase cost<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (clips &gt; 500000 &amp;&amp; unsoldClips &lt; 1000 &amp;&amp; pricePerClip &lt; 8.00) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_raisePrice()<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Autoclippers<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (clips &gt; 1000000 &amp;&amp; wire &gt; 0 &amp;&amp; canMakeAutoClipper &amp;&amp; autoClippers &lt; 75) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeAutoClipper()<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;if ((clips &gt; 1000000 &amp;&amp; wire &gt; 0 &amp;&amp; canMakeMegaAutoClipper &amp;&amp; megaAutoClippers &lt; 70) ||<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(clips &gt; 100000000 &amp;&amp; wire &gt; 0 &amp;&amp; canMakeMegaAutoClipper &amp;&amp; megaAutoClippers &lt; 90) ||<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(clips &gt; 20000000000 &amp;&amp; wire &gt; 0 &amp;&amp; canMakeMegaAutoClipper &amp;&amp; megaAutoClippers &lt; 120)<br />
&nbsp;&nbsp;&nbsp;&nbsp;) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeMegaAutoClipper()<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Marketing<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (canIncreaseMarketingLevel &amp;&amp; marketingLevel &lt; 14) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_increaseMarketing()<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Quantum Computing<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (hasQuantumComputing) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var canCompute = true<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (let qVal of quantumChipValues) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (qVal &lt; 0) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;canCompute = false<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (canCompute) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_quantumCompute()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Research projects<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (projAvail_creativity) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_creativity()<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;for (let trustButtonID of trustProjectButtonIDs) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let trustButton = document.getElementById(trustButtonID)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (trustButton &amp;&amp; !trustButton.disabled &amp;&amp; trustButton.style.visibility == &quot;visible&quot;) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;trustButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;for (let businessButtonID of businessButtonIDs) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let businessButton = document.getElementById(businessButtonID)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (businessButton &amp;&amp; !businessButton.disabled &amp;&amp; businessButton.style.visibility == &quot;visible&quot;) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;businessButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;for (let buttonID of quantumProjectButtonIDs) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let button = document.getElementById(buttonID)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (button &amp;&amp; !button.disabled &amp;&amp; button.style.visibility == &quot;visible&quot;) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (operations &gt; 0) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasQuantumComputing &amp;&amp; !needsQuantumChip) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (let buttonID of postQuantumProjectButtonIDs) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let button = document.getElementById(buttonID)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (button &amp;&amp; !button.disabled &amp;&amp; button.style.visibility == &quot;visible&quot;) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.click()<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Act on only one at a time; the game appears to let you overspend with fast clicks<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;for (let buttonID of endGameProjectButtonIDs) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let button = document.getElementById(buttonID)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (button &amp;&amp; !button.disabled &amp;&amp; button.style.visibility == &quot;visible&quot;) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Strategic Modeling<br />
&nbsp;&nbsp;&nbsp;&nbsp;let newTournamentButton = document.getElementById(&quot;btnNewTournament&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;let runTournamentButton = document.getElementById(&quot;btnRunTournament&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;let hasAutoTourney = document.getElementById(&quot;autoTourneyControl&quot;).style.display != &quot;none&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_newTournament = newTourney<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_runTournament = runTourney<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (operations &gt; 50000 &amp;&amp; newTournamentButton &amp;&amp; !newTournamentButton.disabled &amp;&amp; !hasAutoTourney) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_newTournament()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let stratPickerElement = document.getElementById(&quot;stratPicker&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let hasBeatLastStrategy = Array.apply(null, document.getElementById(&quot;stratPicker&quot;).options).map(x =&gt; x.value).includes(&quot;7&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasBeatLastStrategy) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stratPickerElement.value = 7 // BEAT LAST<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;stratPickerElement.value = 0 // RANDOM<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (runTournamentButton &amp;&amp; !runTournamentButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_runTournament()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Investments<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Perform these upgrades after handling research projects to avoid starving them<br />
&nbsp;&nbsp;&nbsp;&nbsp;let upgradeInvestmentEngineButton = document.getElementById(&quot;btnImproveInvestments&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_upgradeInvestmentEngine = function() { upgradeInvestmentEngineButton.click() }<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (investmentLevel &lt; 15 &amp;&amp; upgradeInvestmentEngineButton &amp;&amp; !upgradeInvestmentEngineButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_upgradeInvestmentEngine()<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (investmentLevel &gt; 5 &amp;&amp; unsoldClips &gt; 10000000 &amp;&amp; funds &gt; 20000 &amp;&amp; cyclesSinceLastDeposit &gt; 50000) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;investStrat&quot;).value = &quot;hi&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_deposit()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesSinceLastDeposit = 0<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesSinceLastDeposit++<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Money projects (e.g. Hostile Takeover)<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Check whether they are visible moneyProjectButtonIDs; check money in stock market; if &gt; 15M; withdraw and perform project<br />
&nbsp;&nbsp;&nbsp;&nbsp;for (let moneyButtonID of moneyProjectButtonIDs) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let button = document.getElementById(moneyButtonID)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let buttonIsVisible = button &amp;&amp; button.style.visibility == &quot;visible&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let buttonIsDisabled = button &amp;&amp; button.disabled<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (buttonIsVisible) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (buttonIsDisabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (investmentTotal &gt; 15000000) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_withdraw()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Button may have become enabled; check the button directly<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!button.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;button.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Drone and Solar Farm phase<br />
&nbsp;&nbsp;&nbsp;&nbsp;let factoryCount = parseInt(document.getElementById(&quot;factoryLevelDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canMakeFactory = !document.getElementById(&quot;btnMakeFactory&quot;).disabled<br />
&nbsp;&nbsp;&nbsp;&nbsp;let harvesterDroneCount = parseInt(document.getElementById(&quot;harvesterLevelDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canMakeHarvesterDrone = !document.getElementById(&quot;btnMakeHarvester&quot;).disabled<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canMakeHarvesterDrone1k = !document.getElementById(&quot;btnHarvesterx1000&quot;).disabled<br />
&nbsp;&nbsp;&nbsp;&nbsp;let wireDroneCount = parseInt(document.getElementById(&quot;wireDroneLevelDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canMakeWireDrone = !document.getElementById(&quot;btnMakeWireDrone&quot;).disabled<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canMakeWireDrone1k = !document.getElementById(&quot;btnWireDronex1000&quot;).disabled<br />
&nbsp;&nbsp;&nbsp;&nbsp;let solarFarmCount = parseInt(document.getElementById(&quot;farmLevel&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canMakeSolarFarm = !document.getElementById(&quot;btnMakeFarm&quot;).disabled<br />
&nbsp;&nbsp;&nbsp;&nbsp;let batteryTowerCount = parseInt(document.getElementById(&quot;batteryLevel&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;let canMakeBatteryTower = !document.getElementById(&quot;btnMakeBattery&quot;).disabled<br />
&nbsp;&nbsp;&nbsp;&nbsp;let hasAvailableMatter = parseFloat(document.getElementById(&quot;availableMatterDisplay&quot;).textContent.replace(/,/g, &#039;&#039;)) &gt; 0<br />
&nbsp;&nbsp;&nbsp;&nbsp;let hasAcquiredMatter = parseFloat(document.getElementById(&quot;acquiredMatterDisplay&quot;).textContent.replace(/,/g, &#039;&#039;)) &gt; 0<br />
&nbsp;&nbsp;&nbsp;&nbsp;let hasWire = parseFloat(document.getElementById(&quot;nanoWire&quot;).textContent.replace(/,/g, &#039;&#039;)) &gt; 0<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// We can end up stuck with a small amount of clips that we can&#039;t spend (e.g. 528.1 thousand)<br />
&nbsp;&nbsp;&nbsp;&nbsp;let unusedClipsCount = parseFloat(document.getElementById(&quot;unusedClipsDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (unusedClipsCount == lastUnusedClipsCount) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesWithoutUnusedClipsCountChange++<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cyclesWithoutUnusedClipsCountChange = 0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastUnusedClipsCount = unusedClipsCount<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;let hasUnusedClips = unusedClipsCount &gt; 0 &amp;&amp; (cyclesWithoutUnusedClipsCountChange &lt; 1000)<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let projButton_selfCorrectingSupplyChain = document.getElementById(&quot;projectButton102&quot;) <br />
&nbsp;&nbsp;&nbsp;&nbsp;let selfCorrectingSupplyChainVisible = projButton_selfCorrectingSupplyChain &amp;&amp; projButton_selfCorrectingSupplyChain.style.visibility == &quot;visible&quot;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeFactory = makeFactory<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeHarvesterDrone = function() { makeHarvester(1) }<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeHarvesterDrone1k = function() { makeHarvester(1000) }<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeWireDrone = function() { makeWireDrone(1) }<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeWireDrone1k = function() { makeWireDrone(1000) }<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeSolarFarm = function() { makeFarm(1) }<br />
&nbsp;&nbsp;&nbsp;&nbsp;let handler_makeBatteryTower = function() { makeBattery(1) }<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (factoryCount &gt;= 59 &amp;&amp; solarFarmCount &gt; 3538 &amp;&amp; selfCorrectingSupplyChainVisible) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Pause consuming clips so we can activate selfCorrectingSupplyChain<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else if (hasAvailableMatter || hasAcquiredMatter) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Based on a speed run: https://www.youtube.com/watch?v=hDXoonknjS0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Values to achieve:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// [factory, harvester, wire, farm, battery]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let milestones = [<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1, 30, 30, 11, 1],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6, 170, 180, 34, 11],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[6, 320, 370, 49, 11],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8, 400, 490, 60, 21],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9, 510, 610, 68, 21],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[10, 1000, 1400, 168, 21],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[15, 2000, 2800, 248, 121],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[20, 2500, 3300, 308, 121],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[50, 5500, 6600, 600, 121],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[57, 35500, 36000, 2208, 121],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[70, 77000, 77000, 5508, 1221],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[80, 87000, 87000, 7508, 1221],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[198, 377000, 404000, 29508, 1221],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[211, 1121000, 1133000, 50308, 1221],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1000, 1133000, 1135000, 50308, 1221],<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;]<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let currVals = [factoryCount, harvesterDroneCount, wireDroneCount, solarFarmCount, batteryTowerCount]<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (let milestone of milestones) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var done = false<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (let i = 0; i &lt; currVals.length; i++) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let delta = milestone[i] - currVals[i]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (delta &gt; 0) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (i == 0 &amp;&amp; canMakeFactory) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeFactory()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (i == 1 &amp;&amp; canMakeHarvesterDrone) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasAvailableMatter) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (canMakeHarvesterDrone1k &amp;&amp; delta &gt;= 1000) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeHarvesterDrone1k()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeHarvesterDrone()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (i == 2 &amp;&amp; canMakeWireDrone) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasAcquiredMatter) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (canMakeWireDrone1k &amp;&amp; delta &gt;= 1000) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeWireDrone1k()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeWireDrone()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (i == 3 &amp;&amp; canMakeSolarFarm) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeSolarFarm()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (i == 4 &amp;&amp; canMakeBatteryTower) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_makeBatteryTower()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Don&#039;t break so we can increment evenly across the types that need it<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;done = true<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (done) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let hasSpaceExploration = document.getElementById(&quot;spaceDiv&quot;).style.display != &quot;none&quot;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Swarm computing<br />
&nbsp;&nbsp;&nbsp;&nbsp;let hasSwarmComputing = document.getElementById(&quot;swarmEngine&quot;).style.display != &quot;none&quot;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (hasSwarmComputing) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let totalDroneCount = harvesterDroneCount + wireDroneCount<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let swarmComputingSlider = document.getElementById(&quot;slider&quot;)<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var sliderValue = 0 // range is 0 to 200<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasSpaceExploration) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderValue = processors &gt; 1400 ? 0 : 150<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Heuristic for when we&#039;re still on Earth (prior to space exploration)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!hasAvailableMatter &amp;&amp; !hasAcquiredMatter) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderValue = 200<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (processors &gt; 160) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderValue = 0<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (totalDroneCount &gt; 1000) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderValue = 150<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (totalDroneCount &gt; 700) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sliderValue = 100<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;swarmComputingSlider.value = sliderValue<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let entertainSwarmButton = document.getElementById(&quot;btnEntertainSwarm&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let swarmIsBored = document.getElementById(&quot;swarmStatus&quot;).textContent == &quot;Bored&quot;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let synchronizeSwarmButton = document.getElementById(&quot;btnSynchSwarm&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let swarmIsDisorganized = document.getElementById(&quot;swarmStatus&quot;).textContent == &quot;Disorganized&quot;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (entertainSwarmButton &amp;&amp; !entertainSwarmButton.disabled &amp;&amp; swarmIsBored) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;entertainSwarmButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (synchronizeSwarmButton &amp;&amp; !synchronizeSwarmButton.disabled &amp;&amp; swarmIsDisorganized) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronizeSwarmButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Reclaim clips from factories and drones<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (hasSwarmComputing &amp;&amp; !hasSpaceExploration &amp;&amp; !hasAvailableMatter &amp;&amp; !hasAcquiredMatter &amp;&amp; wire == 0) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let handler_disassembleFactories = factoryReboot<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let handler_disassembleHarvesterDrones = harvesterReboot<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let handler_disassembleWireDrones = wireDroneReboot<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (factoryCount &gt; 0) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_disassembleFactories()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (harvesterDroneCount &gt; 0) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_disassembleHarvesterDrones()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (wireDroneCount &gt; 0) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_disassembleWireDrones()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Space Exploration and Probes<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (hasSpaceExploration) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probesLaunched = parseInt(document.getElementById(&quot;probesLaunchedDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeSpeed = parseInt(document.getElementById(&quot;probeSpeedDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeExploration = parseInt(document.getElementById(&quot;probeNavDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeReplication = parseInt(document.getElementById(&quot;probeRepDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeHazardRemediation = parseInt(document.getElementById(&quot;probeHazDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeFactoryProduction = parseInt(document.getElementById(&quot;probeFacDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeHarvesterDroneProduction = parseInt(document.getElementById(&quot;probeHarvDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeWireDroneProduction = parseInt(document.getElementById(&quot;probeWireDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let increaseProbeTrustButton = document.getElementById(&quot;btnIncreaseProbeTrust&quot;) <br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!increaseProbeTrustButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increaseProbeTrustButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let increaseProbeMaxTrustButton = document.getElementById(&quot;btnIncreaseMaxTrust&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!increaseProbeMaxTrustButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;increaseProbeMaxTrustButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Don&#039;t launch any probes until we have enough hazard remediation and replication for them to survive<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let launchProbeButton = document.getElementById(&quot;btnMakeProbe&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!launchProbeButton.disabled &amp;&amp; probesLaunched &lt; 11000 &amp;&amp; probeHazardRemediation &gt;= 5 &amp;&amp; probeReplication &gt;= 7) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;launchProbeButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let needsToExplore = !hasAcquiredMatter &amp;&amp; !hasUnusedClips &amp;&amp; !hasWire<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let lowerSpeedButton = document.getElementById(&quot;btnLowerProbeSpeed&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let raiseSpeedButton = document.getElementById(&quot;btnRaiseProbeSpeed&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let lowerExplorationButton = document.getElementById(&quot;btnLowerProbeNav&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let raiseExplorationButton = document.getElementById(&quot;btnRaiseProbeNav&quot;)<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let lowerReplicationButton = document.getElementById(&quot;btnLowerProbeRep&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let raiseReplicationButton = document.getElementById(&quot;btnRaiseProbeRep&quot;)<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// When we need to gather more matter, take from replication to explore with speed<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (needsToExplore) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let needsSpeed = probeSpeed &lt; 1<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let needsExploration = probeExploration &lt; 1<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (needsSpeed) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (raiseSpeedButton.disabled &amp;&amp; !lowerReplicationButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerReplicationButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!raiseSpeedButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raiseSpeedButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (needsExploration) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (raiseExplorationButton.disabled &amp;&amp; !lowerReplicationButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerReplicationButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!raiseExplorationButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raiseExplorationButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// reduce exploration and speed so it goes back to replication<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!lowerExplorationButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerExplorationButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!lowerSpeedButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerSpeedButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// If we&#039;re not exploring, divide our time between different responsibilities:<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// each dpCycle is 1ms, 1000 in a second, 10000 in 10 seconds;  if dpCycles/10 % 10000:<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!needsToExplore) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let timeSlice = Math.floor(dpCycles/10) % 10000<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let buttonToProduce = null<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (timeSlice &lt; 10 &amp;&amp; probeFactoryProduction &lt; 1) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Produce factories<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonToProduce = document.getElementById(&quot;btnRaiseProbeFac&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (timeSlice &gt;= 10 &amp;&amp; timeSlice &lt; 2010 &amp;&amp; probeWireDroneProduction &lt; 1) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Produce wire drones<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonToProduce = document.getElementById(&quot;btnRaiseProbeWire&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (timeSlice &gt;= 2010 &amp;&amp; timeSlice &lt; 4010 &amp;&amp; probeHarvesterDroneProduction &lt; 1) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Produce harvester drones<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonToProduce = document.getElementById(&quot;btnRaiseProbeHarv&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (buttonToProduce) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (buttonToProduce.disabled &amp;&amp; !lowerReplicationButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerReplicationButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!buttonToProduce.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buttonToProduce.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Lower relevant buttons to reclaim the probe trust for replication<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let lowerButtonIDs = [&quot;btnLowerProbeFac&quot;, &quot;btnLowerProbeWire&quot;, &quot;btnLowerProbeHarv&quot;]<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (let lowerButtonID of lowerButtonIDs) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let lowerButton = document.getElementById(lowerButtonID)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!lowerButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let hasProbeCombat = document.getElementById(&quot;combatButtonDiv&quot;).style.display != &quot;none&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (hasProbeCombat) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeCombat = parseInt(document.getElementById(&quot;probeCombatDisplay&quot;).textContent.replace(/,/g, &#039;&#039;))<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeCountText = document.getElementById(&quot;probesTotalDisplay&quot;).textContent // &quot;2.2 billion &quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let drifterCountText = document.getElementById(&quot;drifterCount&quot;).textContent<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let numProbes = parseFloat(probeCountText)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let numDrifters = parseFloat(drifterCountText)<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let probeOrderOfMagnitudeStr = probeCountText.replace(/[\d\s\.]+/, &#039;&#039;).trim()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let drifterOrderOfMagnitudeStr = drifterCountText.replace(/[\d\s\.]+/, &#039;&#039;).trim()<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let needsToBattle = (probeOrderOfMagnitudeStr == drifterOrderOfMagnitudeStr) || numDrifters &gt; 10<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let combatRaiseButton = document.getElementById(&quot;btnRaiseProbeCombat&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let combatLowerButton = document.getElementById(&quot;btnLowerProbeCombat&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (needsToBattle) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (probeCombat &lt; 6) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (combatRaiseButton.disabled &amp;&amp; !lowerReplicationButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lowerReplicationButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!combatRaiseButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;combatRaiseButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Reduce combat to reclaim probe trust for replication<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!combatLowerButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;combatLowerButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let raiseHazardRemediationButton = document.getElementById(&quot;btnRaiseProbeHaz&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (probeHazardRemediation &lt; 5 &amp;&amp; !raiseHazardRemediationButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raiseHazardRemediationButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (!raiseReplicationButton.disabled) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Spend any remaining probe trust on replication<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;raiseReplicationButton.click()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Computational resources<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Some research projects consume trust. Update computational resources after research projects to avoid starving research.<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (canAddProcessor &amp;&amp; processors &lt; 6) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addProcessor()<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddMemory &amp;&amp; memory &lt; 46) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addMemory()<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddProcessor &amp;&amp; processors &lt; 25) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addProcessor()<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddMemory &amp;&amp; memory &lt; 95) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addMemory()<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddProcessor &amp;&amp; processors &lt; 113) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addProcessor()<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddMemory &amp;&amp; memory &lt; 146) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addMemory()<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddProcessor &amp;&amp; processors &lt; 1102) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addProcessor()<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddMemory &amp;&amp; memory &lt; 503) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addMemory()<br />
&nbsp;&nbsp;&nbsp;&nbsp;} else if (canAddProcessor) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;handler_addProcessor()<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
}<br />
<br />
function runEventLoop() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(function() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;performEventCycle()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!pauseAI) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;runEventLoop()<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}, 1)<br />
}<br />
<br />
var pauseAI = 0<br />
runEventLoop()</div>
]]>
</content>
</entry>

<entry>
<title>Fall Down the Rabbit Hole</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/rabbit-hole.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/rabbit-hole.html" />
<id>https://memalign.github.io/p/rabbit-hole.html</id>
<published>2020-05-15T00:00:00-08:00</published>
<updated>2020-05-15T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/rabbit-hole.html'>Fall Down the Rabbit Hole</a>
</h2>
</div>
<img src="/m/whiterabbit.jpg">
<div id='postdate'>Posted on 5/15/2020</div>
I enjoy following my interests and making connections that take me on tangents. This is a hobby that's supercharged by the internet.<br />
<br />
<br />
A recent example:<br />
<br />
I was in the mood to read a good book so I asked my coworkers for recommendations. While reading the most enticing one, I had the idea to write about <a href="/p/books.html">notable books I've read</a>. While I wrote that, I did a little research into those books on Wikipedia and I discovered that, after Douglas Adams died, a concluding Hitchhiker's Guide book was published that I hadn't heard about. I read <a href="https://en.wikipedia.org/wiki/And_Another_Thing..._(novel)">that book</a> next. I refreshed my memory on his other work and saw that there was a 2016 TV series for <a href="https://www.imdb.com/title/tt4047038/">Dirk Gently's Holistic Detective Agency</a>. I watched the first episode and liked it so I binged its two seasons over the following days. I haven't read the original Dirk Gently books (and my impression is that the TV series is only loosely based on them) so I'm going to read those next. Who knows where those will take me!<br />
<br />
<br />
A similar activity that can also be fun is to realize, deep into a conversation with people, that a chain of tangentially connected ideas led you to the current topic. Then you can work backwards together to figure out how you got there.<br />
<br />
For example:<br />
<br />
- What the heck led us to talking about Trader Joe's Everything but the Bagel Sesame Seasoning?<br />
<br />
- We were talking about having avocado toast and that seasoning goes great on it<br />
<br />
- Before that, we were talking about how your neighbor has an avocado tree<br />
<br />
- Before that, we were talking about fruit trees<br />
<br />
- Before that, we were talking about how Silicon Valley was largely covered in orchards before the tech boom. It was called the <a href="https://en.wikipedia.org/wiki/Santa_Clara_Valley">Valley of Heart's Delight</a>.<br />
<br />
- Before that, I mentioned how the first thing I noticed when I landed in the Bay Area for my first job interview is that it wasn't a frozen wasteland like upstate New York where I had just departed. The second thing I noticed is how many iconic tech companies I saw while driving down 101 from SFO to the South Bay.<br />
<br />
- Before that, we were fake complaining about the lack of seasons in the Bay Area... because none of us actually miss winter<br />
<br />
- Before that, we were talking about how time is blurring together while we're all sheltering in place<br />
<br />
- And now we're back to the beginning of our FaceTime call when I asked how you're doing in these crazy times<br />

]]>
</content>
</entry>

<entry>
<title>Live COVID-19 Dashboard</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/live-covid19.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/live-covid19.html" />
<id>https://memalign.github.io/p/live-covid19.html</id>
<published>2020-05-09T00:00:00-08:00</published>
<updated>2020-05-09T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/live-covid19.html'>Live COVID-19 Dashboard</a>
</h2>
</div>
<img src="/m/graph-js.jpg">
<div id='postdate'>Posted on 5/9/2020</div>
As a followup to <a href="/p/graph-js.html">graphing in Scriptable</a>, I took some time to convert the script into a live web dashboard.<br />
<br />
You can find the live dashboard <a href="/m/graph-js/covid19.html?maxStates=24">here</a>.<br />
<br />
<br />
The main ways the code needed to change:<br />
<br />
- Instead of loading data synchronously, it is now loaded asynchronously via XMLHttpRequest<br />
<br />
- The document body is constructed dynamically once data loads (instead of being generated and then loaded into a web view in its complete form)<br />
<br />
- canvasJS requires divs to be set up before charts are created. I needed to move div setup to happen inline instead of at the end of the script.<br />
<br />
- Instead of generating JavaScript in string form to setup the charts, I set them up directly<br />
<br />
&nbsp;&nbsp;Code like this:<br />
<div id='code'>var result = &quot;&quot;<br />
...<br />
result += &quot;{ x: new Date(&quot;+year+&quot;,&quot;+(month-1)+&quot;,&quot;+day+&quot;), y: &quot; + value + &quot; },\n&quot;<br />
...<br />
return result</div>
&nbsp;&nbsp;Became this:<br />
<div id='code'>var result = []<br />
...<br />
result.push({ x: new Date(year, month-1, day), y: value })<br />
...<br />
return result</div>
- I limit the number of total charts because the full page was consuming too much memory which caused canvasJS to render completely blank charts, charts where some lines were missing, etc.<br />
<br />
- I also fixed a bug so lines can be hidden by clicking them in the legend<br />

]]>
</content>
</entry>

<entry>
<title>Create COVID-19 Graphs Using JavaScript</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/graph-js.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/graph-js.html" />
<id>https://memalign.github.io/p/graph-js.html</id>
<published>2020-05-08T00:00:00-08:00</published>
<updated>2020-05-08T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/graph-js.html'>Create COVID-19 Graphs Using JavaScript</a>
</h2>
</div>
<img src="/m/graph-js.jpg">
<div id='postdate'>Posted on 5/8/2020</div>
COVID-19 has loomed over us for many months. For weeks, I watched the spread using graphs on <a href="https://www.politico.com/interactives/2020/coronavirus-testing-by-state-chart-of-new-cases/">politico.com</a>.<br />
<br />
<img src="/m/politico-covid19.jpg"><br />
<br />
A few days went by without updates so I investigated recreating the graphs myself. Here’s my process:<br />
<br />
1. I noticed that the website links to its data source. Fortunately, it comes from an open website with a convenient API: <a href="https://covidtracking.com/api">https://covidtracking.com/api</a><br />
<br />
2. I knew I could use the <a href="https://apps.apple.com/us/app/scriptable/id1405459188">Scriptable app</a> on iOS to write some JavaScript to process and transform the data<br />
<br />
3. Scriptable can draw some native UI but it’s often too limited. Instead, I chose to generate some HTML it can display in a web view.<br />
<br />
4. I did some quick searches for simple ways to graph data on web pages. When I <a href="https://www.google.com/search?q=graph+data+html">searched</a>, one of the top hits was <a href="https://canvasjs.com">canvasJS</a>.<br />
<br />
5. I found a <a href="https://canvasjs.com/javascript-charts/null-data-chart/">sample</a> graph that looked similar to what I needed<br />
<br />
6. To quickly check that this would work, I created a script in Scriptable to generate the HTML and show a web view, pasting in their example:<br />
<br />
<div id='code'>let html = `<br />
&lt;!DOCTYPE html&gt;<br />
&lt;html&gt;<br />
&lt;head&gt;<br />
&lt;script&gt;<br />
window.onload = function() {<br />
<br />
var chart = new CanvasJS.Chart(&quot;chartContainer&quot;, {<br />
	animationEnabled: true,<br />
	title: {<br />
		text: &quot;Hourly Average CPU Utilization&quot;<br />
	},<br />
	axisX: {<br />
		title: &quot;Time&quot;<br />
	},<br />
	axisY: {<br />
		title: &quot;Percentage&quot;,<br />
		suffix: &quot;%&quot;<br />
	},<br />
	data: [{<br />
		type: &quot;line&quot;,<br />
		name: &quot;CPU Utilization&quot;,<br />
		connectNullData: true,<br />
		//nullDataLineDashType: &quot;solid&quot;,<br />
		xValueType: &quot;dateTime&quot;,<br />
		xValueFormatString: &quot;DD MMM hh:mm TT&quot;,<br />
		yValueFormatString: &quot;#,##0.##\&quot;%\&quot;&quot;,<br />
		dataPoints: [<br />
			{ x: 1501102673000, y: 22.836 },<br />
			{ x: 1501106273000, y: 23.220 },<br />
			{ x: 1501109873000, y: 23.594 },<br />
			{ x: 1501113473000, y: 24.596 },<br />
			{ x: 1501117073000, y: 31.947 },<br />
			{ x: 1501120673000, y: 31.142 }<br />
		]<br />
	}]<br />
});<br />
chart.render();<br />
<br />
}<br />
&lt;/script&gt;<br />
&lt;/head&gt;<br />
&lt;body&gt;<br />
&lt;div id=&quot;chartContainer&quot; style=&quot;height: 300px; width: 100%;&quot;&gt;&lt;/div&gt;<br />
&lt;script src=&quot;https://canvasjs.com/assets/script/canvasjs.min.js&quot;&gt;&lt;/script&gt;<br />
&lt;/body&gt;<br />
&lt;/html&gt;<br />
`<br />
<br />
let webView = new WebView()<br />
<br />
webView.loadHTML(html)<br />
webView.present(true)</div>
7. That worked! I then figured out how to request data from covidtracking.com — conveniently hosted in JSON format. I used console.log to sanity check the result.<br />
<br />
<div id='code'>let dailyDataRequest = new Request(&quot;https://covidtracking.com/api/v1/us/daily.json&quot;)<br />
let dailyData = await dailyDataRequest.loadJSON()<br />
<br />
console.log(&quot;Row 0: &quot; + dailyData[0].positive)</div>
8. From there, I parsed the data, transformed it, and added more charts. I included some charts that the original website didn’t have that I found interesting.<br />
<br />
<div id='code'>// Show graphs that match: https://www.politico.com/interactives/2020/coronavirus-testing-by-state-chart-of-new-cases/<br />
// Data from: https://covidtracking.com/api<br />
<br />
// Examples the charts are based on:<br />
// https://canvasjs.com/javascript-charts/null-data-chart/<br />
// https://canvasjs.com/javascript-charts/multi-series-chart/<br />
// https://canvasjs.com/javascript-charts/stacked-column-chart/<br />
// https://canvasjs.com/javascript-charts/stacked-bar-chart/<br />
// https://canvasjs.com/javascript-charts/stacked-bar-100-chart/<br />
<br />
let firstInterestingDate = 20200301<br />
<br />
function dataPointsFromDailyDataJSON(json, key) {<br />
&nbsp;&nbsp;// { x: new Date(2017,6,24), y: 31 },<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;var result = &quot;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;for (let row of json) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;let value = row[key]<br />
&nbsp;&nbsp;&nbsp;&nbsp;let date = row[&quot;date&quot;]<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Data is uninteresting before March 1st: 20200301<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (date &lt; firstInterestingDate) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let match = (date+&quot;&quot;).match(/(\d{4})(\d{2})(\d{2})/)<br />
&nbsp;&nbsp;&nbsp;&nbsp;let year = parseInt(match[1])<br />
&nbsp;&nbsp;&nbsp;&nbsp;let month = parseInt(match[2])<br />
&nbsp;&nbsp;&nbsp;&nbsp;let day = parseInt(match[3])<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;result += &quot;{ x: new Date(&quot;+year+&quot;,&quot;+(month-1)+&quot;,&quot;+day+&quot;), y: &quot; + value + &quot; },\n&quot;<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;return result<br />
}<br />
<br />
function deltaDataPointsFromDailyDataJSON(json, key) {<br />
&nbsp;&nbsp;// { x: new Date(2017,6,24), y: 31 },<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;var result = &quot;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;// json is sorted newest to oldest so we need to iterate backwards<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;var index = json.length-1<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;var prevValue = json[index][key]<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;while (index &gt;= 0) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;let row = json[index]<br />
&nbsp;&nbsp;&nbsp;&nbsp;index--<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let value = row[key]<br />
&nbsp;&nbsp;&nbsp;&nbsp;let date = row[&quot;date&quot;]<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let delta = value - prevValue<br />
&nbsp;&nbsp;&nbsp;&nbsp;prevValue = value<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Data is uninteresting before March 1st: 20200301<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (date &lt; firstInterestingDate) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;let match = (date+&quot;&quot;).match(/(\d{4})(\d{2})(\d{2})/)<br />
&nbsp;&nbsp;&nbsp;&nbsp;let year = parseInt(match[1])<br />
&nbsp;&nbsp;&nbsp;&nbsp;let month = parseInt(match[2])<br />
&nbsp;&nbsp;&nbsp;&nbsp;let day = parseInt(match[3])<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;result += &quot;{ x: new Date(&quot;+year+&quot;,&quot;+(month-1)+&quot;,&quot;+day+&quot;), y: &quot; + delta + &quot; },\n&quot;<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;return result<br />
}<br />
<br />
var chartCount = 0<br />
<br />
function chartTestsPositivesDeathsForState(json, state) {<br />
&nbsp;&nbsp;// Filter the data to the correct state; null means US<br />
&nbsp;&nbsp;let filteredJson = (state == null) ? json : json.filter(row =&gt; row[&quot;state&quot;] == state)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let currentTotalTests = filteredJson[0][&quot;totalTestResults&quot;]<br />
&nbsp;&nbsp;let totalTestsDataPoints = dataPointsFromDailyDataJSON(filteredJson, &quot;totalTestResults&quot;)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let currentPositive = filteredJson[0][&quot;positive&quot;]<br />
&nbsp;&nbsp;let positiveDataPoints = dataPointsFromDailyDataJSON(filteredJson, &quot;positive&quot;)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let currentDeath = filteredJson[0][&quot;death&quot;]<br />
&nbsp;&nbsp;let deathsDataPoints = dataPointsFromDailyDataJSON(filteredJson, &quot;death&quot;)<br />
<br />
&nbsp;&nbsp;let chartName = &quot;chart&quot; + (state == null ? &quot;US&quot; : state) + chartCount++<br />
<br />
&nbsp;&nbsp;let chartJS = `<br />
var ${chartName} = new CanvasJS.Chart(&quot;${chartName}&quot;, {<br />
	animationEnabled: false,<br />
	title:{<br />
		text: &quot;Covid-19 in ${state == null ? &quot;the United States&quot; : state}&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize: 25,<br />
	},<br />
	axisX: {<br />
		valueFormatString: &quot;MMM DD&quot;<br />
	},<br />
	axisY: {<br />
		title: &quot;Count&quot;,<br />
		includeZero: true,<br />
	},<br />
	legend:{<br />
		cursor: &quot;pointer&quot;,<br />
		fontSize: 16,<br />
		itemclick: toggleDataSeries<br />
	},<br />
	toolTip:{<br />
		shared: true<br />
	},<br />
	data: [{<br />
		name: &quot;Total Tests (${currentTotalTests.toLocaleString()})&quot;,<br />
		type: &quot;line&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;gray&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;gray&quot;,<br />
		showInLegend: true,<br />
		dataPoints: [<br />
${totalTestsDataPoints}<br />
		]<br />
	},<br />
	{<br />
		name: &quot;Positive (${currentPositive.toLocaleString()})&quot;,<br />
		type: &quot;line&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;orange&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;orange&quot;,<br />
		showInLegend: true,<br />
		dataPoints: [<br />
${positiveDataPoints}<br />
		]<br />
	},<br />
	{<br />
		name: &quot;Deaths (${currentDeath.toLocaleString()})&quot;,<br />
		type: &quot;line&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;red&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;red&quot;,<br />
		showInLegend: true,<br />
		dataPoints: [<br />
${deathsDataPoints}<br />
		]<br />
	}]<br />
});<br />
${chartName}.render();<br />
`<br />
<br />
&nbsp;&nbsp;return { chartJS: chartJS, chartName: chartName };<br />
}<br />
<br />
<br />
function chartDeltas(json, state) {<br />
&nbsp;&nbsp;// Filter the data to the correct state; null means US<br />
&nbsp;&nbsp;let filteredJson = (state == null) ? json : json.filter(row =&gt; row[&quot;state&quot;] == state)<br />
<br />
&nbsp;&nbsp;let currentTestsDeltaToday = filteredJson[0][&quot;totalTestResults&quot;] - filteredJson[1][&quot;totalTestResults&quot;]<br />
&nbsp;&nbsp;let currentTestsDeltas = deltaDataPointsFromDailyDataJSON(filteredJson, &quot;totalTestResults&quot;)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let positiveDeltaToday = filteredJson[0][&quot;positive&quot;] - filteredJson[1][&quot;positive&quot;]<br />
&nbsp;&nbsp;let positiveDeltas = deltaDataPointsFromDailyDataJSON(filteredJson, &quot;positive&quot;)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let deathsDeltaToday = filteredJson[0][&quot;death&quot;] - filteredJson[1][&quot;death&quot;]<br />
&nbsp;&nbsp;let deathsDeltas = deltaDataPointsFromDailyDataJSON(filteredJson, &quot;death&quot;)<br />
<br />
&nbsp;&nbsp;let chartName = &quot;chartDeltas&quot; + (state == null ? &quot;US&quot; : state) + chartCount++<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let chartJS = `<br />
var ${chartName} = new CanvasJS.Chart(&quot;${chartName}&quot;, {<br />
	animationEnabled: false,<br />
	title:{<br />
		text: &quot;Day-over-Day Change${state == null ? &quot;&quot; : &quot; in &quot; + state}&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize: 25,<br />
	},<br />
	axisX: {<br />
		valueFormatString: &quot;MMM DD&quot;<br />
	},<br />
	axisY: {<br />
		title: &quot;Count&quot;,<br />
		includeZero: true,<br />
	},<br />
	legend:{<br />
		cursor: &quot;pointer&quot;,<br />
		fontSize: 16,<br />
		itemclick: toggleDataSeries<br />
	},<br />
	toolTip:{<br />
		shared: true<br />
	},<br />
	data: [{<br />
		name: &quot;Total Tests Δ (${currentTestsDeltaToday.toLocaleString()})&quot;,<br />
		type: &quot;line&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;gray&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;gray&quot;,<br />
		showInLegend: true,<br />
		dataPoints: [<br />
${currentTestsDeltas}<br />
		]<br />
	},<br />
	{<br />
		name: &quot;Positive Δ (${positiveDeltaToday.toLocaleString()})&quot;,<br />
		type: &quot;line&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;orange&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;orange&quot;,<br />
		showInLegend: true,<br />
		dataPoints: [<br />
${positiveDeltas}<br />
		]<br />
	},<br />
	{<br />
		name: &quot;Deaths Δ (${deathsDeltaToday.toLocaleString()})&quot;,<br />
		type: &quot;line&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lineColor: &quot;red&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;color: &quot;red&quot;,<br />
		showInLegend: true,<br />
		dataPoints: [<br />
${deathsDeltas}<br />
		]<br />
	}]<br />
});<br />
${chartName}.render();<br />
`<br />
<br />
&nbsp;&nbsp;return { chartJS: chartJS, chartName: chartName };<br />
}<br />
<br />
<br />
function sortedStateNames(json) {<br />
&nbsp;&nbsp;// For the entry with today&#039;s date, sort the state names from highest positive count to lowest<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let todaysDate = json[0].date<br />
&nbsp;&nbsp;let todaysData = json.filter(row =&gt; row.date == todaysDate)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;todaysData.sort((a, b) =&gt; b.positive - a.positive)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;return todaysData.map(row =&gt; row.state)<br />
}<br />
<br />
<br />
function statesTestsBarChart(json) {<br />
&nbsp;&nbsp;let todaysDate = json[0].date<br />
&nbsp;&nbsp;let todaysData = json.filter(row =&gt; row.date == todaysDate)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;todaysData.sort((a, b) =&gt; b.positive - a.positive)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let positiveDataPoints = todaysData.map(row =&gt; &quot;{ y: &quot;+row.positive+&quot;, label: &#039;&quot;+row.state+&quot;&#039; }&quot;)<br />
&nbsp;&nbsp;let negativeDataPoints = todaysData.map(row =&gt; &quot;{ y: &quot;+(row.totalTestResults-row.positive)+&quot;, label: &#039;&quot;+row.state+&quot;&#039; }&quot;)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let chartName = &quot;chartTestsBarChart&quot; + chartCount++<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let chartJS = `<br />
var ${chartName} = new CanvasJS.Chart(&quot;${chartName}&quot;, {<br />
	animationEnabled: false,<br />
	title:{<br />
		text: &quot;State Testing&quot;,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize: 25,<br />
	},<br />
	axisX: {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title: &quot;State&quot;,<br />
		interval: 1,<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;labelFontSize: 12,<br />
	},<br />
	axisY:{<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title: &quot;Count&quot;,<br />
	},<br />
	data: [{<br />
		type: &quot;stackedColumn&quot;,<br />
		showInLegend: true,<br />
		color: &quot;orange&quot;,<br />
		name: &quot;Positive&quot;,<br />
		dataPoints: [<br />
${positiveDataPoints.join(&quot;,&quot;)}<br />
		]<br />
		},<br />
		{        <br />
			type: &quot;stackedColumn&quot;,<br />
			showInLegend: true,<br />
			name: &quot;Negative&quot;,<br />
			color: &quot;gray&quot;,<br />
			dataPoints: [<br />
${negativeDataPoints.join(&quot;,&quot;)}  <br />
			]<br />
		},<br />
	]<br />
});<br />
${chartName}.render();<br />
`<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;return { chartJS: chartJS, chartName: chartName };<br />
}<br />
<br />
<br />
<br />
var html = `<br />
&lt;!DOCTYPE HTML&gt;<br />
&lt;html&gt;<br />
&lt;head&gt;  <br />
&lt;script&gt;<br />
window.onload = function () {<br />
`<br />
<br />
<br />
var chartNames = []<br />
<br />
<br />
<br />
// https://covidtracking.com/api/v1/us/daily.json<br />
<br />
let dailyDataRequest = new Request(&quot;https://covidtracking.com/api/v1/us/daily.json&quot;)<br />
let dailyData = await dailyDataRequest.loadJSON()<br />
<br />
<br />
// US chart for tests given, positive tests, deaths<br />
<br />
let usChart = chartTestsPositivesDeathsForState(dailyData, null)<br />
<br />
html += usChart.chartJS<br />
chartNames.push(usChart.chartName)<br />
<br />
<br />
<br />
// US Deltas<br />
<br />
let usDeltasChart = chartDeltas(dailyData, null)<br />
html += usDeltasChart.chartJS<br />
chartNames.push(usDeltasChart.chartName)<br />
<br />
<br />
<br />
// Per-state tests, positive, deaths charts sorted by most positive<br />
// https://covidtracking.com/api/v1/states/daily.json<br />
<br />
let stateDataRequest = new Request(&quot;https://covidtracking.com/api/v1/states/daily.json&quot;)<br />
let stateData = await stateDataRequest.loadJSON()<br />
<br />
<br />
<br />
// States tests stacked bar chart<br />
<br />
let testsBarChart = statesTestsBarChart(stateData)<br />
html += testsBarChart.chartJS<br />
chartNames.push(testsBarChart.chartName)<br />
<br />
<br />
<br />
// California<br />
let caChart = chartTestsPositivesDeathsForState(stateData, &quot;CA&quot;)<br />
<br />
html += caChart.chartJS<br />
chartNames.push(caChart.chartName)<br />
<br />
let caDeltasChart = chartDeltas(stateData, &quot;CA&quot;)<br />
html += caDeltasChart.chartJS<br />
chartNames.push(caDeltasChart.chartName)<br />
<br />
<br />
<br />
// Sorted state data<br />
<br />
let sortedStates = sortedStateNames(stateData)<br />
<br />
for (let state of sortedStates) {<br />
&nbsp;&nbsp;let stateChart = chartTestsPositivesDeathsForState(stateData, state)<br />
&nbsp;&nbsp;html += stateChart.chartJS<br />
&nbsp;&nbsp;chartNames.push(stateChart.chartName)<br />
}<br />
<br />
<br />
<br />
<br />
<br />
html += `<br />
function toggleDataSeries(e){<br />
	if (typeof(e.dataSeries.visible) === &quot;undefined&quot; || e.dataSeries.visible) {<br />
		e.dataSeries.visible = false;<br />
	}<br />
	else{<br />
		e.dataSeries.visible = true;<br />
	}<br />
	chart.render();<br />
}<br />
<br />
}<br />
&lt;/script&gt;<br />
&lt;/head&gt;<br />
&lt;body&gt;<br />
`<br />
<br />
<br />
var index = 0<br />
for (let chartName of chartNames) {<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;var width = &quot;100%&quot; // US data, tests for all states<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;if (index &gt;= 5) { // sorted states<br />
&nbsp;&nbsp;&nbsp;&nbsp;width = &quot;33%&quot;<br />
&nbsp;&nbsp;} else if (index &gt;= 3) { // California<br />
&nbsp;&nbsp;&nbsp;&nbsp;width = &quot;50%&quot;<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &#039;&lt;div id=&quot;&#039;+chartName+&#039;&quot; style=&quot;height: 500px; width: &#039;+width+&#039;; display: inline-block;&quot;&gt;&lt;/div&gt;&#039;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;if (index == 1 || index == 2 || (index % 3) == 1) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;br /&gt;&lt;br /&gt;&quot;<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;index++<br />
}<br />
<br />
<br />
html += `<br />
&lt;script src=&quot;https://canvasjs.com/assets/script/canvasjs.min.js&quot;&gt;&lt;/script&gt;<br />
&lt;/body&gt;<br />
&lt;/html&gt;<br />
`<br />
<br />
<br />
<br />
let webView = new WebView()<br />
<br />
webView.loadHTML(html)<br />
webView.present(true)</div>
Resources:<br />
- <a href="/m/graph-js/canvasjs.min.js">Backup of the canvasJS library</a><br />
- <a href="/m/graph-js/us-daily.json">Snapshot of US Daily data</a><br />
- <a href="/m/graph-js/states-daily.json">Snapshot of States Daily data</a><br />

]]>
</content>
</entry>

<entry>
<title>Books</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/books.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/books.html" />
<id>https://memalign.github.io/p/books.html</id>
<published>2020-04-19T00:00:00-08:00</published>
<updated>2020-04-19T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/books.html'>Books</a>
</h2>
</div>
<img src="/m/book.svg">
<div id='postdate'>Posted on 4/19/2020</div>
I know some people who are always reading a book. I’m not an avid book reader like them.<br />
<br />
I enjoy reading, though. When reading, I get attached to the characters and the plot. When I finish a book, I feel melancholy, a mild mourning for my fictional companions.<br />
I try to pick books that will be fun to read while also sticking with me for years to come.<br />
In some ways, I treat TV, movies, and books similarly: I don’t always need to be consuming something and I try to pick meaningful ones. I like to think about what I watched/read for weeks or months before picking up something else.<br />
<br />
Here’s a list of some books I’ve read. I’ll try to update this periodically.<br />
<br />
<br />
<br />
Non-Fiction:<br />
<br />
- Becoming Steve Jobs<br />
<br />
- Black Like Me<br />
<br />
- The Checklist Manifesto<br />
<br />
- Creative Selection<br />
<br />
- Extreme Ownership<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The lessons in this book directly apply to engineering management and leadership. I highly recommend it.<br />
<br />
- Getting to Yes<br />
<br />
- The Hard Thing About Hard Things<br />
<br />
- Punished by Rewards<br />
<br />
- Radical Candor<br />
&nbsp;&nbsp;&nbsp;&nbsp;- This is another great book for leaders and managers.<br />
<br />
- Steve Jobs<br />
<br />
- Thinking Fast and Slow<br />
<br />
<br />
<br />
Fiction:<br />
<br />
- American Gods<br />
<br />
- Atlas Shrugged<br />
<br />
- The Bicentennial Man<br />
<br />
- Brave New World<br />
<br />
- Breakfast of Champions<br />
<br />
- Cat’s Cradle<br />
&nbsp;&nbsp;&nbsp;&nbsp;- I like Vonnegut’s writing for its humor, depth, and straightforwardness. He’s one of the few authors with more than one book on my list.<br />
<br />
- The Catcher in the Rye<br />
<br />
- Choke<br />
<br />
- Dirk Gently's Holistic Detective Agency<br />
<br />
- Dune<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The writing is dense and not usually what I would choose to read. I’m still glad I read it because it’s one of the classics which gets a lot of references.<br />
<br />
- <a href="http://www.galactanet.com/oneoff/theegg_mod.html">The Egg</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;- Wonderful short story by Andy Weir<br />
<br />
- Ender’s Game<br />
&nbsp;&nbsp;&nbsp;&nbsp;- One of my favorite books. It’s an interesting story which also influences my own thoughts about leadership in the real world.<br />
<br />
- Ender’s Shadow<br />
&nbsp;&nbsp;&nbsp;&nbsp;- A sort-of-sequel to Ender’s Game. I enjoyed how it layers extra depth onto a story I already loved.<br />
<br />
- Fight Club<br />
<br />
- Foundation trilogy<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Foundation<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Foundation and Empire<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Second Foundation<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Asimov is another author with many books on my list. I think about these stories a lot today (in the year 2020) when things feel out of control.<br />
<br />
- Futuristic Violence and Fancy Suits<br />
<br />
- Girl with the Dragon Tattoo series<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The Girl with the Dragon Tattoo<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The Girl Who Played with Fire<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The Girl Who Kicked the Hornets’ Nest<br />
<br />
- The Gods Themselves<br />
<br />
- Good Omens<br />
<br />
- Harry Potter series<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Sorcerer’s Stone<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Chamber of Secrets<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Prisoner of Azkaban<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Goblet of Fire<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Order of the Phoenix<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Half-Blood Prince<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Harry Potter and the Deathly Hallows<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;- A series core to my childhood and young adulthood. I got the first book as a present from my grandmother for graduating 5th grade.<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
- Hitchhiker’s Guide to the Galaxy trilogy<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The Hitchhiker’s Guide to the Galaxy<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The Restaurant at the End of the Universe<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Life, the Universe and Everything<br />
&nbsp;&nbsp;&nbsp;&nbsp;- So Long, and Thanks for All the Fish<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Mostly Harmless<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Young Zaphod Plays it Safe<br />
&nbsp;&nbsp;&nbsp;&nbsp;- And Another Thing...<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Funny and light while still carrying depth. Some of my favorites.<br />
<br />
- Hyperion<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Interesting stories though I wish I had known up-front that there would be no ending to tie off loose ends and plot-lines.<br />
<br />
- The Illustrated Man<br />
<br />
- John Dies at the End series<br />
&nbsp;&nbsp;&nbsp;&nbsp;- John Dies at the End<br />
&nbsp;&nbsp;&nbsp;&nbsp;- This Book is Full of Spiders<br />
&nbsp;&nbsp;&nbsp;&nbsp;- What the Hell Did I Just Read<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Fun comedy horror from Jason Parkin (aka David Wong), another author with several books on my list.<br />
<br />
- <a href="https://www.multivax.com/last_question.html">The Last Question</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;- Wonderful short story by Isaac Asimov<br />
<br />
- Learning to Be Me<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Unsettling and thought-provoking short story by Greg Egan. It could be a Black Mirror episode.<br />
<br />
- The Little Prince<br />
<br />
- Lord of the Flies<br />
<br />
- Lord of the Rings<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The Hobbit<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The Fellowship of the Ring<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The Two Towers<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The Return of the King<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Dense fantasy classics. I’m glad I’ve read them but I don’t love them. I tried to read the Silmarillion but that was way too far in the wrong direction for me (even more dense and way less story).<br />
<br />
- The Perks of Being a Wallflower<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Really resonated with my angsty teenager self<br />
<br />
- The Red Pony<br />
<br />
- Replay<br />
&nbsp;&nbsp;&nbsp;&nbsp;- One of my favorite books: fun, fast, thought-provoking<br />
<br />
- Slaughterhouse-Five<br />
<br />
- Snow Crash<br />
<br />
- The Terminal Experiment <br />
<br />
- Watchmen<br />
<br />
- Watership Down<br />

]]>
</content>
</entry>

<entry>
<title>notes.txt</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/notes-txt.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/notes-txt.html" />
<id>https://memalign.github.io/p/notes-txt.html</id>
<published>2020-04-13T00:00:00-08:00</published>
<updated>2020-04-13T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/notes-txt.html'>notes.txt</a>
</h2>
</div>
<img src="/m/ios-notes.png">
<div id='postdate'>Posted on 4/13/2020</div>
At a software engineering internship in 2006, my mentor told me that he kept a paper engineering journal that he put notes in every day as he worked on problems. He gave me one, too. I followed that habit during all of my internships.<br />
<br />
Then ~4 years later, I started working as a full-time software engineer. A few months into working, I stopped using a paper notebook. I think part of the reason is that I had a better tool: the bug tracker. Pretty much every assignment I got had a corresponding entry in a bug tracking database. I started keeping the notes of my investigations in bug reports directly so there would be a central and shared source of truth. A mentor at this job said "some of the best engineers" put frequent clear updates in their bugs.<br />
<br />
My personal projects had always been note-free, though. Unfortunately, I didn't bring the same problem-solving-and-knowledge-capturing discipline to personal projects until ~2016. That's a whole decade after learning the value of an engineering journal at work!<br />
<br />
Now, even for informal personal projects, I keep a notes.txt file in the <a href="/p/source-control.html">git repository</a>. <br />
<br />
Here's an excerpt from notes.txt for this website (which is a personal side-project of its own):<br />
<br />
<div id='code'>12/25/19<br />
<br />
I created a user page in github!<br />
<br />
I found that I have to publish from the master branch and the root directory of the memalign.github.io project. I also found that an index.html file with just plaintext contents wouldn&#039;t get served for https://memalign.github.io<br />
<br />
( I figured this out by googling and finding:<br />
https://github.community/t5/GitHub-Pages/index-html-not-working/td-p/1266 )</div>
(You can see the full notes.txt for the project <a href="/notes.txt">here</a>.)<br />
<br />
I use notes.txt to capture:<br />
<br />
- Problems I'm running into<br />
- Thoughts on what might be happening<br />
- Potential solutions to explore<br />
- The solution that worked<br />
- Useful links and other research<br />
- Useful commands<br />
- The full steps required to do something novel (for example: getting a 3rd party open source library to build and install correctly)<br />
- Features I want to add<br />
- The bug list<br />
&nbsp;&nbsp;&nbsp;&nbsp;- For a simple side-project a text bug list embedded in my notes is much easier than a full bug tracker
]]>
</content>
</entry>

<entry>
<title>Download Video Into Your Brain</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/speed-up-av.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/speed-up-av.html" />
<id>https://memalign.github.io/p/speed-up-av.html</id>
<published>2020-04-05T00:00:00-08:00</published>
<updated>2020-04-05T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/speed-up-av.html'>Download Video Into Your Brain</a>
</h2>
</div>
<img src="/m/westworld-pearl.jpg">
<div id='postdate'>Posted on 4/5/2020</div>
A natural extension of <a href="/p/tts-download-into-brain.html">Downloading Text Into Your Brain</a> is to consume audio and video more efficiently.<br />
<br />
I do this by speeding up playback to be anywhere between 1.2x and 2x faster. Another useful trick is to skip ahead (past ads, uninteresting segments). I like to skip ahead by 30 seconds and skip back by 10 seconds (to rewind after skipping too far forward).<br />
<br />
<br />
Some examples where I'll use this technique:<br />
<br />
- To watch a technical talk that's important but not interesting<br />
<br />
- To watch things that are enjoyable but not quite worth their time tradeoff. For me, this applies to YouTube channels that are funny but too slow-paced. And ones that have too much uninteresting filler.<br />
<br />
- To listen to podcasts which are also often too slow-paced<br />
<br />
- To skip past ads and sponsored content<br />
<br />
- To fast-foward through the credits in case there's a post-credits scene<br />
<br />
<br />
Not all content consumption is about efficiency, of course!<br />
<br />
Sometimes I want to savor every moment. For example, I won't speed up a TV show like <a href="https://en.wikipedia.org/wiki/Westworld_(TV_series)">Westworld</a> which is dense with references, foreshadowing; which is made to be beautiful and thought-provoking.<br />
<br />
<br />
I've built my own tools for doing this which I won't be sharing today. But you don't need my tools to get started! There's a useful bookmarklet called <a href="http://www.yuptude.com/">yuptude</a>. There's more info on that website. In case it goes down some day, here's the raw bookmarklet:<br />
<div id='code'>javascript:(function()%7Bfunction%20dg(t)%7Breturn%20document.getElementById(t)%7Dfunction%20yte_in()%7Bs=dg(%22yptd-in%22).value%7Dfunction%20yte_off()%7Byti_in.removeEventListener(%22input%22,yte_in),yti_off.removeEventListener(%22click%22,yte_off),yti_pit.removeEventListener(%22click%22,yte_pit),yti_up.removeEventListener(%22click%22,yte_up),yti_dwn.removeEventListener(%22click%22,yte_dwn),ytw.parentNode.removeChild(ytw),yts.parentNode.removeChild(yts),clearInterval(interval),s=1,pitch(1)%7Dfunction%20yte_pit()%7Bp=dg(%22yptd-pin%22).checked%7Dfunction%20yte_up()%7Binputval=document.getElementById(%22yptd-in%22).value,inputval=inputval%3FparseFloat(inputval):1,inputval=3.9%3E=inputval%3Finputval+.1:inputval,s=dg(%22yptd-in%22).value=inputval.toFixed(1)%7Dfunction%20yte_dwn()%7Binputval=dg(%22yptd-in%22).value,inputval=inputval%3FparseFloat(inputval):1,inputval=inputval%3E=.6%3Finputval-.1:inputval,s=dg(%22yptd-in%22).value=inputval.toFixed(1)%7Dfunction%20pitch(t)%7Bfor(var%20e=0;videos.length%3Ee;e++)v=videos%5Be%5D,v%26%26v.readyState%3E=2%26%26(v.playbackRate=t%7C%7Cs%7C%7C1,v.mozPreservesPitch=v.webkitPreservesPitch=v.preservePitch=!p)%7Dvar%20s=1,p=!1,videos=document.querySelectorAll(%22video,audio%22),v,inputval,ytw=document.createElement(%22div%22);ytw.innerHTML=&#039;%3Cstyle%20id=%22yptd-style%22%3E%20%20%20%20%20%20%20%20%20%20%20%20%23yptd%20span,%23yptd-box%7Bfloat:left;padding:0%20.5em;display:block%7D%23yptd%20span%20em,%23yptd-bottom,%23yptd-in%7Bvertical-align:middle%7D%23yptd-pit,%23yptd-pit%20input%7Bfloat:right%7D%23yptd%20a,%23yptd-bar%7Bbackground-color:%23fd0d5d%7D%23yptd%7Bz-index:9999999999;position:fixed;bottom:0;left:6px;font:16px%20Helvetica,Arial,sans-serif;-webkit-text-size-adjust:100%25;-ms-text-size-adjust:100%25%7D%23yptd%20*%7Bmargin:0%7D%23yptd%20a%7Bborder-radius:5px;-moz-border-radius:5px;-webkit-border-radius:5px;float:left;margin:0%20.5em%200%200;padding:.25em%201em;font-weight:700;color:%23FFF%7D%23yptd%20a%20em%7Bfont-size:.9em%7D%23yptd%20a:active,%23yptd%20a:focus,%23yptd%20a:hover%7Boutline:0;color:%23fd0d5d;background-color:%23FFF;text-decoration:none%7D%23yptd%20span%7Bborder-radius:3px;-moz-border-radius:3px;-webkit-border-radius:3px;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;margin:.5em;width:2.5em;border-bottom:2px%20solid%20rgba(0,0,0,.25);text-decoration:none;color:%23000;background-color:%23FFF;cursor:pointer;text-align:center%7D%23yptd%20span%20em%7Bfont-size:.75em%7D%23yptd%20span:active,%23yptd%20span:focus,%23yptd%20span:hover%7Bcolor:%23fd0d5d%7D%23yptd-bar%7Bborder-radius:3px%203px%200%200;-moz-border-radius:3px%203px%200%200;-webkit-border-radius:3px%203px%200%200;height:2.25em%7D%23yptd-bar:after,%23yptd-bottom:after%7Bcontent:%22%22;display:block;clear:both%7D%23yptd-controls%7Bfloat:right;height:2.25em;border-left:2px%20solid%20rgba(0,0,0,.33)%7D%23yptd-box%7B-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box;width:4em;min-width:4em;height:100%25;background-color:rgba(0,0,0,.15)%7D%23yptd-in%7Bwidth:100%25;height:100%25;border:0;text-align:center;font:14px%20Helvetica,Arial,sans-serif;font-family:Helvetica,Arial,sans-serif;font-size:14px;color:%23FFF;background-color:transparent%7D%23yptd-bottom%7Bpadding:.75em;font-size:.75em;background-color:rgba(0,0,0,.8)%7D%23yptd-pit%7Bposition:relative;padding:.25em%200%7D%23yptd-pit%20label%7Bmargin-right:.5em;color:%23FFF%7D%23yptd-pit%20em%7Bdisplay:none%7D%23yptd-pit:active%20em,%23yptd-pit:focus%20em,%23yptd-pit:hover%20em%7Bdisplay:block;position:absolute;top:-2.5em;left:0;padding:.5em;white-space:pre;font-size:.8em;background-color:%23fd0d5d%7D%20%20%20%20%20%20%20%20%20%20%20%20%3C/style%3E%20%20%20%20%20%20%20%20%3Cdiv%20id=%22yptd%22%3E%20%3Cdiv%20id=%22yptd-bar%22%3E%20%3Cspan%20id=%22yptd-off%22%3E%3Cem%3EOff%3C/em%3E%3C/span%3E%20%3Cdiv%20id=%22yptd-controls%22%3E%20%3Cspan%20id=%22yptd-dwn%22%3E-%3C/span%3E%20%3Cdiv%20id=%22yptd-box%22%3E%20%3Cinput%20id=%22yptd-in%22%20type=%22text%22%20value=%22&#039;+s+&#039;%22%3E%20%3C/div%3E%20%3Cspan%20id=%22yptd-up%22%3E+%3C/span%3E%20%3C/div%3E%20%3C/div%3E%20%3Cdiv%20id=%22yptd-bottom%22%3E%20%3Ca%20href=%22http://yuptude.com%22%3E%3Cem%3Eyuptude%3C/em%3E%3C/a%3E%20%3Cdiv%20id=%22yptd-pit%22%3E%20%3Clabel%20for=%22yptd-pin%22%3E%20Shift%20Pitch%20%3Cem%3E(Firefox%20%26amp;%20Safari%20only)%3C/em%3E%3C/label%3E%20%3Cinput%20type=%22checkbox%22%20name=%22yptd-pin%22%20id=%22yptd-pin%22%20value=%221%22%20&#039;+(p%3F&#039;checked=%22checked%22%20&#039;:%22%20%22)+%22%3E%20%3C/div%3E%20%3C/div%3E%20%3C/div%3E%22,document.body.appendChild(ytw);var%20ytw=dg(%22yptd%22),yts=dg(%22yptd-style%22),yti_in=dg(%22yptd-in%22),yti_off=dg(%22yptd-off%22),yti_pit=dg(%22yptd-pin%22),yti_up=dg(%22yptd-up%22),yti_dwn=dg(%22yptd-dwn%22);yti_in.addEventListener(%22input%22,yte_in),yti_off.addEventListener(%22click%22,yte_off),yti_pit.addEventListener(%22click%22,yte_pit),yti_up.addEventListener(%22click%22,yte_up),yti_dwn.addEventListener(%22click%22,yte_dwn);var%20interval=setInterval(function()%7Bpitch()%7D,100);%7D)()</div>
]]>
</content>
</entry>

<entry>
<title>Download Text Into Your Brain</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/tts-download-into-brain.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/tts-download-into-brain.html" />
<id>https://memalign.github.io/p/tts-download-into-brain.html</id>
<published>2020-03-28T00:00:00-08:00</published>
<updated>2020-03-28T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/tts-download-into-brain.html'>Download Text Into Your Brain</a>
</h2>
</div>
<img src="/m/matrix-kung-fu.jpg">
<div id='postdate'>Posted on 3/28/2020</div>
In the internet age, there's so much interesting information to absorb: academic papers, blog posts, articles, books, reddit posts, text messages, emails, etc.<br />
<br />
A lot of this content is in text form so I'm reading all the time.<br />
<br />
A while ago, I discovered that the iPhone has a built-in <a href="https://en.wikipedia.org/wiki/Speech_synthesis">text-to-speech (TTS)</a> accessibility feature that can speak text the user highlights. At the time of writing, you can turn this on in Settings->Accessibility->Spoken Content->Speak Selection. This will cause a Speak button to appear when you select text. You can crank up the speed of the speech too.<br />
<br />
I started using this feature to listen to paragraphs while doing things that occupy eyes and hands: driving, washing dishes, exercising. I quickly got used to listening to this sped up Siri voice.<br />
<br />
I was blown away by how much more quickly I could read this way. When I'm reading with my eyes, I'll often get temporarily stuck trying to understand specific wording or fine details. I realized that this is unnecessarily slowing me down. When listening, I'm forced to keep a quick and steady pace. For wording I would've gotten stuck on, I either figure it out from context or move on.<br />
<br />
Using this technique feels like downloading information directly into your brain.<br />
<br />
Manually selecting text can become onerous so I've built some tools that help me more easily read websites and eBooks this way.<br />
<br />
I'm using a combination of the <a href="https://apps.apple.com/us/app/shortcuts/id1462947752">Shortcuts app</a> and the <a href="https://apps.apple.com/us/app/scriptable/id1405459188">Scriptable app</a>.<br />
<br />
The Shortcuts app provides easy ways to access system functionality, including speaking text and getting text from a website.<br />
<br />
Scriptable lets the user write programs in JavaScript that call into iOS APIs and make use of Shortcuts.<br />
<br />
<br />
To use these yourself:<br />
<br />
1. Install the apps<br />
&nbsp;&nbsp;&nbsp;&nbsp;- <a href="https://apps.apple.com/us/app/shortcuts/id1462947752">Shortcuts</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;- <a href="https://apps.apple.com/us/app/scriptable/id1405459188">Scriptable</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
2. Install/recreate these Shortcuts:<br />
&nbsp;&nbsp;&nbsp;&nbsp;- <a href="https://www.icloud.com/shortcuts/992821652da741e2a3993a2dce37f4b2">Get Website Text</a><br />
<img src="/m/get-website-text.png"><br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;- <a href="https://www.icloud.com/shortcuts/a3f88b742ada4a9f835e8a734bdfb907">SpeakText</a><br />
<img src="/m/speaktext.png"><br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;- <a href="https://www.icloud.com/shortcuts/80a6e542803448329e110094bfee2146">Dictate</a><br />
<img src="/m/dictate.png"><br />
<br />
3. In Scriptable, create a new script called Speak Web Content. Paste in this code:<br />
<br />
<div id='code'>// Made by @memalign - 1/1/19<br />
// Copyright 2019<br />
// Run from a share sheet to speak shared text<br />
// I call over to a shortcut because the Speech support in Scriptable doesn&#039;t let me configure the speaking speed<br />
// Needs to be run in the app (instead of in the extension) so x-callback-url works<br />
<br />
<br />
// let urls = [ &quot;https://support.apple.com/guide/shortcuts/use-x-callback-url-apdcd7f20a6f/ios&quot; ]<br />
let urls = args.urls<br />
<br />
<br />
for (url of urls) {<br />
&nbsp;&nbsp;console.log(url)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;// Without this alert, Scriptable got confused and would abort when the callback URL returned focus to Scriptable from Shortcuts<br />
&nbsp;&nbsp;let alert = new Alert()<br />
&nbsp;&nbsp;alert.title = &quot;Speak Web Content&quot;<br />
&nbsp;&nbsp;alert.message = &quot;Speak content for &quot; + url + &quot; ?&quot;<br />
&nbsp;&nbsp;alert.addAction(&quot;Speak it!&quot;)<br />
&nbsp;&nbsp;alert.addAction(&quot;Cancel&quot;)<br />
&nbsp;&nbsp;if (await alert.present() == 1) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;break<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;// Get Website Text: https://www.icloud.com/shortcuts/992821652da741e2a3993a2dce37f4b2<br />
&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />
&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;Get Website Text&quot;)<br />
&nbsp;&nbsp;callbackURL.addParameter(&quot;input&quot;, &quot;text&quot;)<br />
&nbsp;&nbsp;callbackURL.addParameter(&quot;text&quot;, url)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let result = await callbackURL.open()<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;console.log(&quot;result: &quot; + result.result)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;await showWebViewWithText(result.result)<br />
&nbsp;&nbsp;<br />
}<br />
<br />
<br />
async function showWebViewWithText(text) {<br />
&nbsp;&nbsp;let webView = new WebView()<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let html = &quot;&lt;table&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let lines = text.split(&quot;\n&quot;)<br />
&nbsp;&nbsp;let count = 0<br />
&nbsp;&nbsp;for (line of lines) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;input type=&#039;checkbox&#039; id=&#039;line&quot;+count+&quot;&#039; value=&#039;&quot;+htmlEncode(line)+&quot;&#039; checked&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;input type=&#039;button&#039; value=&#039;uncheck above&#039; onclick=&#039;uncheckAbove(&quot;+count+&quot;)&#039;&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;br /&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;input type=&#039;button&#039; value=&#039;uncheck below&#039; onclick=&#039;uncheckBelow(&quot;+count+&quot;)&#039;&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += htmlEncode(line)<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;count++<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += `<br />
&nbsp;&nbsp;&lt;script&gt;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;document.body.style.zoom = 4.0<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;function uncheckAbove(index) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;for (let i = 0; i &lt;= index; i++) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;line&quot;+i).checked = false;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;function uncheckBelow(index) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;for (let i = index; i &lt; ${count}; i++) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;line&quot;+i).checked = false;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;function getSelectedText() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;let text = &quot;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;for (let i = 0; i &lt; ${count}; i++) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let checkbox = document.getElementById(&quot;line&quot;+i)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (checkbox.checked) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text += &quot;\\n&quot; + checkbox.value<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;return text<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&lt;/script&gt;<br />
&nbsp;&nbsp;`<br />
&nbsp;&nbsp;<br />
<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;await webView.loadHTML(html)<br />
&nbsp;&nbsp;await webView.present()<br />
&nbsp;&nbsp;let selectedText = await webView.evaluateJavaScript(&quot;getSelectedText()&quot;)<br />
&nbsp;&nbsp;console.log(&quot;selected text:\n&quot; + selectedText)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;speakText(selectedText)<br />
}<br />
<br />
<br />
function speakText(text) {<br />
&nbsp;&nbsp;// SpeakText: https://www.icloud.com/shortcuts/a3f88b742ada4a9f835e8a734bdfb907<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />
&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;SpeakText&quot;)<br />
&nbsp;&nbsp;callbackURL.addParameter(&quot;input&quot;, &quot;text&quot;)<br />
&nbsp;&nbsp;callbackURL.addParameter(&quot;text&quot;, text)<br />
&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;callbackURL.open()<br />
}<br />
<br />
// HTML encoding utilities<br />
// Main logic from https://ourcodeworld.com/articles/read/188/encode-and-decode-html-entities-using-pure-javascript<br />
<br />
function htmlEncode(str) {<br />
&nbsp;&nbsp;var buf = [];<br />
			<br />
&nbsp;&nbsp;for (var i=str.length-1;i&gt;=0;i--) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;buf.unshift([&#039;&amp;#&#039;, str[i].charCodeAt(), &#039;;&#039;].join(&#039;&#039;));<br />
&nbsp;&nbsp;}<br />
			<br />
&nbsp;&nbsp;return buf.join(&#039;&#039;);<br />
}<br />
<br />
function htmlDecode(str) {<br />
&nbsp;&nbsp;return str.replace(/&amp;#(\d+);/g, function(match, dec) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;return String.fromCharCode(dec);<br />
&nbsp;&nbsp;});<br />
}</div>
4. Configure the script settings:<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Always Run in App = on<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Share Sheet Inputs = URLs<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
5. To use this script:<br />
&nbsp;&nbsp;&nbsp;&nbsp;- View a website in Safari<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Tap the Share button<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Tap "Run Script"<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Tap "Speak Web Content"<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Accept prompts asking for permission<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Uncheck any text that you don't want the script to read. Usually an article is in the middle of a webpage so it's useful to uncheck the top portion and bottom portion of a webpage which include menus, ads, user comments, or related article links.<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Tap Close<br />
&nbsp;&nbsp;&nbsp;&nbsp;- The content will now be spoken!<br />
<br />
6. In Scriptable, create a new script called Read eBook. Paste in this code:<br />
<br />
<div id='code'>// Made by @memalign - 1/1/19<br />
// Copyright 2019<br />
<br />
// First, convert eBook to text using http://www.convertfiles.com/convert/ebook/EPUB-to-TXT.html<br />
// Then, using Files, save the result to Scriptable&#039;s space<br />
<br />
<br />
let fm = FileManager.iCloud()<br />
<br />
let fullBookPath = fm.documentsDirectory() + &quot;/your-book-filename.txt&quot;<br />
<br />
<br />
// File format:<br />
// currentLineNumber\n   - integer, offset into full book<br />
let inProgressPath = fullBookPath + &quot;.inProgress.txt&quot;<br />
<br />
fm.downloadFileFromiCloud(inProgressPath)<br />
if (!fm.fileExists(inProgressPath)) {<br />
&nbsp;&nbsp;console.log(&quot;Creating in progress copy&quot;)<br />
&nbsp;&nbsp;fm.writeString(inProgressPath, &quot;0\n&quot;)<br />
}<br />
<br />
<br />
let lines = fm.readString(fullBookPath).split(&quot;\n&quot;)<br />
let lineOffset = 0<br />
<br />
let fullBookLineCount = lines.length<br />
<br />
const DEFAULT_APPROX_WORDS_PER_CHUNK = 1200<br />
<br />
let wordsPerChunk = DEFAULT_APPROX_WORDS_PER_CHUNK<br />
<br />
let handsFreeMode = false<br />
<br />
do {<br />
<br />
&nbsp;&nbsp;let progress = fm.readString(inProgressPath)<br />
&nbsp;&nbsp;if (!progress) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;break<br />
&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;lineOffset = parseInt((progress.split(&quot;\n&quot;))[0])<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;// Pick enough lines to have enough words<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let lineCount = findNumLinesToAchieveWordCount(lines, lineOffset, wordsPerChunk)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;console.log(&quot;Showing chunk of &quot; + lineCount + &quot; lines with &quot; + (lines.length-lineCount) + &quot; remaining&quot;)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let chunkStr = stringForNumLines(lines, lineOffset, lineCount)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;// console.log(chunkStr)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let action = &quot;read&quot;<br />
<br />
<br />
&nbsp;&nbsp;if (handsFreeMode) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;let voiceCommand = await getDictatedText()<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;let shouldStop = voiceCommand.match(/stop/i)<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (shouldStop) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;action = &quot;stop&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;} else {<br />
&nbsp;&nbsp;&nbsp;&nbsp;let actionAndWPC = await showWebViewWithText(chunkStr, lineOffset, fullBookLineCount, wordsPerChunk)<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;action = actionAndWPC[0]<br />
&nbsp;&nbsp;&nbsp;&nbsp;wordsPerChunk = actionAndWPC[1]<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;if (action === &quot;stop&quot;) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;break<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;if (action === &quot;start over&quot;) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;let alert = new Alert()<br />
&nbsp;&nbsp;&nbsp;&nbsp;alert.title = &quot;Start Over&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;alert.message = &quot;Are you sure you want to forget all progress? This cannot be undone.&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;alert.addDestructiveAction(&quot;Start Over&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;alert.addAction(&quot;Cancel&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (await alert.present() == 0) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Starting over!&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fm.remove(inProgressPath)<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;break<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;if (action === &quot;hands free&quot;) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;action = &quot;read&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;handsFreeMode = true<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;if (action === &quot;read&quot;) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;await speakText(chunkStr)<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;if (action === &quot;previous&quot;) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;lineOffset -= findNumLinesToGoBack(lines, lineOffset, wordsPerChunk)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;lineCount = 0<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;updateInProgressFile(lineOffset+lineCount, fullBookLineCount, inProgressPath)<br />
<br />
} while (true)<br />
<br />
<br />
<br />
function updateInProgressFile(newLineOffset, fullBookLineCount, inProgressPath) {<br />
&nbsp;&nbsp;if (newLineOffset &gt;= fullBookLineCount) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;No more lines remain!&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;fm.remove(inProgressPath)<br />
&nbsp;&nbsp;&nbsp;&nbsp;return<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;// Write to a temp file<br />
&nbsp;&nbsp;let tempFile = fm.documentsDirectory() + &quot;/temp-book.txt&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;fm.writeString(tempFile, newLineOffset+&quot;\n&quot;)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;console.log(&quot;Replacing &quot; + inProgressPath)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;// Move the temp file to final path<br />
&nbsp;&nbsp;fm.remove(inProgressPath) // seems to be required since move errors if the destination file exists (contradicting the docs)<br />
&nbsp;&nbsp;fm.move(tempFile, inProgressPath)<br />
}<br />
<br />
async function showWebViewWithText(text, lineOffset, totalLineCount, wordsPerChunk) {<br />
&nbsp;&nbsp;let webView = new WebView()<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let html = &quot;&lt;html&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;body&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += `<br />
&nbsp;&nbsp;&lt;script&gt;<br />
&nbsp;&nbsp;document.body.style.zoom = 4.0<br />
&nbsp;&nbsp;&lt;/script&gt;<br />
&nbsp;&nbsp;`<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;center&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;stop&#039; onclick=&#039;setAction(\&quot;stop\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;skip&#039; onclick=&#039;setAction(\&quot;skip\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;read&#039; onclick=&#039;setAction(\&quot;read\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;hands free&#039; onclick=&#039;setAction(\&quot;hands free\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;text&#039; size=&#039;5&#039; style=&#039;text-align:center;&#039; id=&#039;desiredAction&#039; value=&#039;read&#039;&gt;&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;text&#039; size=&#039;5&#039; style=&#039;text-align:center;&#039; id=&#039;wordsPerChunk&#039; value=&#039;&quot;+wordsPerChunk+&quot;&#039;&gt; words&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;br /&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let linesRead = lineOffset<br />
&nbsp;&nbsp;html += &quot;Progress: &quot; + linesRead + &quot;/&quot; + totalLineCount + &quot; = &quot; + (100*linesRead/totalLineCount).toFixed(1) + &quot;%&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;/center&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let lines = text.split(&quot;\n&quot;)<br />
&nbsp;&nbsp;let count = 0<br />
&nbsp;&nbsp;for (line of lines) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />
<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;td&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += htmlEncode(line)<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;count++<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;br /&gt;&lt;br /&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;center&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;table&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;tr&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;previous&#039; onclick=&#039;setAction(\&quot;previous\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;td&gt;&lt;input type=&#039;button&#039; value=&#039;start over&#039; onclick=&#039;setAction(\&quot;start over\&quot;)&#039;&gt;&lt;/td&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;/tr&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;/table&gt;&quot;<br />
&nbsp;&nbsp;html += &quot;&lt;/center&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += `<br />
&nbsp;&nbsp;&lt;script&gt;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;function setAction(str) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;document.getElementById(&quot;desiredAction&quot;).value = str<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;function getDesiredAction() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;let actionInput = document.getElementById(&quot;desiredAction&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;return actionInput.value<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;function getWordsPerChunk() {<br />
&nbsp;&nbsp;&nbsp;&nbsp;let wpcInput = document.getElementById(&quot;wordsPerChunk&quot;)<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;return wpcInput.value<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;&lt;/script&gt;<br />
&nbsp;&nbsp;`<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;html += &quot;&lt;/body&gt;&lt;/html&gt;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;await webView.loadHTML(html)<br />
&nbsp;&nbsp;await webView.present()<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let selectedAction = await webView.evaluateJavaScript(&quot;getDesiredAction()&quot;)<br />
&nbsp;&nbsp;console.log(&quot;action:\n&quot; + selectedAction)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let wpc = await webView.evaluateJavaScript(&quot;getWordsPerChunk()&quot;)<br />
&nbsp;&nbsp;console.log(&quot;wpc: &quot; + wpc)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;return [selectedAction, wpc]<br />
}<br />
<br />
<br />
<br />
function stringForNumLines(lines, lineOffset, numLines) {<br />
&nbsp;&nbsp;let str = &quot;&quot;<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;for (let i = 0; i &lt; numLines; i++) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;str += &quot;\n&quot; + lines[i+lineOffset];<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;return str<br />
}<br />
<br />
<br />
function findNumLinesToAchieveWordCount(lines, lineOffset, desiredWordCount) {<br />
&nbsp;&nbsp;let lineCount = 0<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let accumWC = 0<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;for (let i = lineOffset; i &lt; lines.length; i++) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;let line = lines[i]<br />
&nbsp;&nbsp;&nbsp;&nbsp;let lineWC = line.split(&quot; &quot;).length<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;// Don&#039;t far exceed word count<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (i &gt; 0 &amp;&amp; lineWC &gt; 2*desiredWordCount) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;lineCount++<br />
&nbsp;&nbsp;&nbsp;&nbsp;accumWC += lineWC<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (accumWC &gt;= desiredWordCount) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;return lineCount<br />
}<br />
<br />
<br />
// Instead of making a custom reversed version of findNumLinesToAchieveWordCount, this is a more complex method that should work with any future implementation of that method<br />
function findNumLinesToGoBack(lines, lineOffset, wordsPerChunk) {<br />
&nbsp;&nbsp;let numToGoBack = 0<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;for (numToGoBack = 0; numToGoBack &lt;= lineOffset; numToGoBack++) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;let numLinesWeWouldPick = findNumLinesToAchieveWordCount(lines, lineOffset-numToGoBack, wordsPerChunk)<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;// if our offset were lineOffset-numToGoBack<br />
&nbsp;&nbsp;&nbsp;&nbsp;// we would show numLinesWeWouldPick lines<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;// if (lineOffset-numToGoBack) + numLinesWeWouldPick is equal to our current offset then that&#039;s the previous offset we had<br />
&nbsp;&nbsp;&nbsp;&nbsp;// if that sum is less than our current offset then it would be going back too far<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;let testOffset = (lineOffset-numToGoBack) + numLinesWeWouldPick<br />
&nbsp;&nbsp;&nbsp;&nbsp;<br />
&nbsp;&nbsp;&nbsp;&nbsp;if (testOffset &lt;= lineOffset) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break<br />
&nbsp;&nbsp;&nbsp;&nbsp;}<br />
&nbsp;&nbsp;}<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;console.log(&quot;Going back by &quot; + numToGoBack + &quot; lines&quot;)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;return numToGoBack<br />
}<br />
<br />
<br />
// I call over to a shortcut because the Speech support in Scriptable doesn&#039;t let me configure the speaking speed<br />
// https://www.icloud.com/shortcuts/a3f88b742ada4a9f835e8a734bdfb907<br />
async function speakText(text) {<br />
&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />
&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;SpeakText&quot;)<br />
&nbsp;&nbsp;callbackURL.addParameter(&quot;input&quot;, &quot;text&quot;)<br />
&nbsp;&nbsp;callbackURL.addParameter(&quot;text&quot;, text)<br />
&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let result = await callbackURL.open()<br />
&nbsp;&nbsp;console.log(&quot;speakText result: &quot; + result)<br />
}<br />
<br />
// I call over to a shortcut because the Dictation support in Scriptable requires touch interaction<br />
// https://www.icloud.com/shortcuts/80a6e542803448329e110094bfee2146<br />
async function getDictatedText() {<br />
&nbsp;&nbsp;let callbackURL = new CallbackURL(&quot;shortcuts://x-callback-url/run-shortcut&quot;)<br />
&nbsp;&nbsp;callbackURL.addParameter(&quot;name&quot;, &quot;Dictate&quot;)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;console.log(&quot;callbackurl: &quot; + callbackURL.getURL())<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;let result = await callbackURL.open()<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;console.log(&quot;dictated text: &quot; + result.result)<br />
&nbsp;&nbsp;<br />
&nbsp;&nbsp;return result.result<br />
}<br />
<br />
<br />
// HTML encoding utilities<br />
// Main logic from https://ourcodeworld.com/articles/read/188/encode-and-decode-html-entities-using-pure-javascript<br />
<br />
function htmlEncode(str) {<br />
&nbsp;&nbsp;var buf = [];<br />
			<br />
&nbsp;&nbsp;for (var i=str.length-1;i&gt;=0;i--) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;buf.unshift([&#039;&amp;#&#039;, str[i].charCodeAt(), &#039;;&#039;].join(&#039;&#039;));<br />
&nbsp;&nbsp;}<br />
			<br />
&nbsp;&nbsp;return buf.join(&#039;&#039;);<br />
}<br />
<br />
function htmlDecode(str) {<br />
&nbsp;&nbsp;return str.replace(/&amp;#(\d+);/g, function(match, dec) {<br />
&nbsp;&nbsp;&nbsp;&nbsp;return String.fromCharCode(dec);<br />
&nbsp;&nbsp;});<br />
}</div>
7. You'll need to save a long text file (using a converted eBook works great) into Scriptable's directory using the Files app. Then, you'll need to replace "your-book-filename.txt" with the appropriate filename.<br />
<br />
8. Run the script<br />
<br />
9. Tap a mode (stop, skip, read, hands free) or keep the default (read) and then tap Close<br />
&nbsp;&nbsp;&nbsp;&nbsp;- stop: stop the script<br />
&nbsp;&nbsp;&nbsp;&nbsp;- skip: skip this page without reading it aloud<br />
&nbsp;&nbsp;&nbsp;&nbsp;- read: read this page, advance to the next one, and reprompt<br />
&nbsp;&nbsp;&nbsp;&nbsp;- hands free: read this page, then give the user a chance to say "continue" or "stop". If the user says "continue" the next page will automatically be read aloud. If the user says "stop", the script will stop running. This is especially useful when driving or washing dishes!<br />
<br />
<br />
Hopefully somebody will find these tools useful or inspiring!<br />

]]>
</content>
</entry>

<entry>
<title>Source Control</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/source-control.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/source-control.html" />
<id>https://memalign.github.io/p/source-control.html</id>
<published>2020-03-27T00:00:00-08:00</published>
<updated>2020-03-27T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/source-control.html'>Source Control</a>
</h2>
</div>
<img src="/m/2560px-Git-logo-black.svg.png">
<div id='postdate'>Posted on 3/27/2020</div>
It's smart to have backups of important information. The best way to have backups for programming projects is <a href="https://en.wikipedia.org/wiki/Version_control">source control</a>.<br />
<br />
I've used source control (<a href="https://en.wikipedia.org/wiki/Git">git</a>, specifically) for personal programming projects, professional software development, journals, and websites. It works well for anything text-based.<br />
<br />
Source control is super useful because it tracks incremental history of changes. That makes it easy to hone in on when a change (good or bad) was made with some context of why. That's useful when tracking down a nasty bug! It's also useful when researching why specific design decisions were made.<br />
<br />
<br />
Some helpful options to get started with source control:<br />
<br />
- Use <a href="https://github.com">https://github.com</a> to create and host repositories for free<br />
<br />
- Another free option is <a href="https://bitbucket.org/product">Bitbucket</a><br />
<br />
- Create your own local git repository that lives directly on your computer. Learn more <a href="https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Getting-and-Creating-Projects">here</a>.<br />
<br />
<br />
Because code can often be reused, I recommend using git for nearly all the code you ever write. It's even useful to have a git repository that's just for small utilities or toying around. Use a local git repository if you want to keep it private.<br />
<br />
You can find my own public GitHub repositories <a href="https://github.com/memalign/">here</a>.
]]>
</content>
</entry>

<entry>
<title>Personal Projects</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/personal-projects.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/personal-projects.html" />
<id>https://memalign.github.io/p/personal-projects.html</id>
<published>2020-03-26T00:00:00-08:00</published>
<updated>2020-03-26T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/personal-projects.html'>Personal Projects</a>
</h2>
</div>
<img src="/m/sitegenerator.jpg">
<div id='postdate'>Posted on 3/26/2020</div>
I used to get in my own head about personal projects.<br />
<br />
I didn't want to waste time working on something that wouldn't have a big impact on other people or wouldn't make money.<br />
<br />
I eventually worked on a tool for myself, mostly just for fun, and I realized that my hobbies don't need to be productive or impactful. An enjoyable hobby is a fulfilling part of life.<br />
<br />
This website is a hobby that I think will be fun yet not impactful. Maybe somebody will see a post some day and think, "that's neat". That's more than enough for me :)<br />
<br />
(Programming the <a href="https://github.com/memalign/memalign.github.io/blob/master/SiteGenerator/SiteGenerator.js">site generator</a> has already been lots of fun)
]]>
</content>
</entry>

<entry>
<title>How to Program a Text Adventure</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/text-adventure.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/text-adventure.html" />
<id>https://memalign.github.io/p/text-adventure.html</id>
<published>2020-03-25T00:00:00-08:00</published>
<updated>2020-03-25T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/text-adventure.html'>How to Program a Text Adventure</a>
</h2>
</div>
<img src="/m/text-adventure.jpg">
<div id='postdate'>Posted on 3/25/2020</div>
Text adventures, also known as <a href="https://en.wikipedia.org/wiki/Interactive_fiction">interactive fiction</a>, are fun text-only computer games that give me a lot of nostalgia.<br />
<br />
I recently read a cool website that shows how to incrementally write your own text adventure:<br />
<br />
<a href="https://helderman.github.io/htpataic/htpataic01.html">https://helderman.github.io/htpataic/htpataic01.html</a><br />
<br />
(An older version can be found <a href="http://home.hccnet.nl/r.helderman/adventures/htpataic01.html">here</a>)<br />
<br />
<br />
I like this website because:<br />
<br />
- It's written simply and clearly<br />
<br />
- It exposes the reader to a bunch of useful concepts in a practical context<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Text adventures<br />
&nbsp;&nbsp;&nbsp;&nbsp;- C programming<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Simple data structures<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Text parsing<br />
&nbsp;&nbsp;&nbsp;&nbsp;- AWK and Domain-specific languages<br />
&nbsp;&nbsp;&nbsp;&nbsp;- make files<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Generating a graph using Graphviz<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Automated testing<br />
<br />
- It serves as a launching point for learning these topics in depth<br />
<br />
- It demonstrates how to incrementally build a more complicated program from a simple one that works<br />
<br />
- The subject is fun<br />
<br />
<br />
This tutorial can serve as a great example for other types of online textbooks.
]]>
</content>
</entry>

<entry>
<title>RSS and Feedly</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/feedly.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/feedly.html" />
<id>https://memalign.github.io/p/feedly.html</id>
<published>2020-03-22T00:00:00-08:00</published>
<updated>2020-03-22T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/feedly.html'>RSS and Feedly</a>
</h2>
</div>
<img src="/m/feedly.jpg">
<div id='postdate'>Posted on 3/22/2020</div>
I like to read news feeds to learn, find entertainment, and stay up-to-date on various topics.<br />
<br />
RSS feeds and Atom feeds are a great way to subscribe to news feeds. I used to use Google Reader and, after that service shut down, I moved to Feedly.<br />
<br />
Feedly is really cool! Especially for developers.<br />
<br />
Over winter break in 2019, I decided to build an app for myself to read news feeds (mainly so I could write smart filters to remove uninteresting entries). I did some cursory research into Feedly's developer support and I was pleasantly surprised by how easy the Feedly API is to adopt! Even though every website's RSS or Atom feed can have weird quirks, Feedly solves all of those problems for us. It's straightforward and quick to use the Feedly API to build a simple RSS reader.<br />
<br />
<br />
Here's how I adopted the Feedly API (and how you can too):<br />
<br />
1. Become a Feedly user. Create an account using their website or app.<br />
<br />
2. Subscribe to some RSS feeds using their app<br />
<br />
3. Decide to build a custom news reader app to read these feeds<br />
<br />
4. Look at their developer documentation with an eye toward ease of adoption and whether all needed functionality exists<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Documentation is found here: <a href="https://developer.feedly.com/">https://developer.feedly.com/</a><br />
<br />
5. Note the primitives needed to build an app:<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Get a list of news feeds with unread entries: <a href="https://developer.feedly.com/v3/markers/">https://developer.feedly.com/v3/markers/</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;- Get information about a feed (I use this to get its icon): <a href="https://developer.feedly.com/v3/collections/">https://developer.feedly.com/v3/collections/</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;- Get a list of news entries (including their content) for a given feed: <a href="https://developer.feedly.com/v3/streams/">https://developer.feedly.com/v3/streams/</a><br />
<br />
6. Get access to their API. It's easy to start prototyping for your own use with a developer access token: <a href="https://developer.feedly.com/v3/developer/">https://developer.feedly.com/v3/developer/</a><br />
&nbsp;&nbsp;&nbsp;&nbsp;- Your developer access token can then be included in HTTP requests instead of a real OAuth token.<br />
<br />
7. Use <a href="https://en.wikipedia.org/wiki/CURL">curl</a> to quickly prove that the developer access token works and the APIs return expected results<br />
&nbsp;&nbsp;&nbsp;&nbsp;- Here's an example command:<br />
<div id='code'>curl -H &#039;Authorization: OAuth YOUR_DEV_TOKEN&#039; https://cloud.feedly.com/v3/markers/counts</div>
8. Think about how to organize your code into classes. Some useful classes might be: FeedlyDataSource, NewsFeed, NewsEntry.<br />
<br />
9. Use your platform's built-in APIs for making HTTP requests, parsing JSON, displaying a list of NewsEntrys to the user.<br />
<br />
10. As you build your app, add unit tests for parsing responses. One tip: save some curl results to files and inject those files into tests so your tests can work offline. Save to file like this:<br />
<div id='code'>curl -H &#039;Authorization: OAuth YOUR_DEV_TOKEN&#039; https://cloud.feedly.com/v3/markers/counts &gt; /path/to/test_data_files/markersCountsResponse.txt</div>
If you need any help, please @ me on <a href="http://twitter.com/memalign">Twitter</a>.<br />
<br />
<br />
Bonus:<br />
<br />
- You can subscribe to YouTube channels in Feedly<br />
- I like to subscribe to HackerNews in Feedly instead of reading it on the website: <a href="https://news.ycombinator.com/rss">https://news.ycombinator.com/rss</a>
]]>
</content>
</entry>

<entry>
<title>Welcome</title>
<link rel="alternate" type="text/html" href="https://memalign.github.io/p/this-website.html" />
<link rel="related" type="text/html" href="https://memalign.github.io/p/this-website.html" />
<id>https://memalign.github.io/p/this-website.html</id>
<published>2019-12-26T00:00:00-08:00</published>
<updated>2019-12-26T00:00:00-08:00</updated>
<author>
<name>memalign</name>
<uri>https://memalign.github.io/index.html</uri>
</author>
<content type="html" xml:base="https://memalign.github.io/p/" xml:lang="en"><![CDATA[

<div id='header'>
<h2>
<a href='https://memalign.github.io/p/this-website.html'>Welcome</a>
</h2>
</div>
<img src="/m/shiba.jpg">
<div id='postdate'>Posted on 12/26/2019</div>
Welcome to memalign.github.io!<br />
<br />
I made this website so I have a place to post ideas and projects.<br />
<br />
I'm creating my own website instead of posting on Facebook or Twitter with the hope that it'll be more durable and discoverable long-term.<br />
<br />
I also hope that this website will be simpler than maintaining some kind of blog.<br />
<br />
<br />
About me:<br />
- I live in California. I moved here for a software engineering job after graduating college<br />
- I'm married to a beautiful and intelligent woman who works as an attorney<br />
- We have a Shiba Inu who brings us a lot of joy<br />

]]>
</content>
</entry>
</feed><!-- THE END -->
